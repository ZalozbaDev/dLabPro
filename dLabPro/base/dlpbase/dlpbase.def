## dLabPro base library
## - Definition file
##
## AUTHOR : Matthias Eichner
## PACKAGE: dLabPro/base
## 
## Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
## - Chair of System Theory and Speech Technology, TU Dresden
## - Chair of Communications Engineering, BTU Cottbus
## 
## This file is part of dLabPro.
## 
## dLabPro is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
## 
## dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
## 
## You should have received a copy of the GNU Lesser General Public License
## along with dLabPro. If not, see <http://www.gnu.org/licenses/>.

/cLib PROJECT: dlpbase
COMMENT:  dLabPro base library
AUTHOR:   Matthias Wolff

## Source files
FILE: dlp_arith.c
FILE: dlp_assert.c
FILE: dlp_file.c
FILE: dlp_heap.c
FILE: dlp_io.c
FILE: dlp_ncnv.c
FILE: dlp_optab.c
FILE: dlp_session.c
FILE: dlp_string.c
FILE: dlp_thread.c
FILE: dlp_type.c

## Additional manual sections
NOTE:    Numeric and String Operations
COMMENT: Overview of dLabPro operation names and the respective C/C++ operation codes
/html MAN:
  <table class="indent" cellpadding="3">
    <tr><th colspan="2">Identifier</th><th rowspan="2">Operation code</th><th rowspan="2">Formula</th><th rowspan="2">Description</th></tr>
    <tr><th>C/C++</th><th>dLabPro</th></tr>

  {@cgen:index Scalar operations}
    <tr><td class="rowgroup" colspan="5">
       <a name="scalops"></a>Scalar operations<br>
       <span class="normal">See {@link dlp_scalop},
       <a href="data.html#mth_-scalop"><code class="link">data -scalop</code></a> <sup>1)</sup><br>
       Type &lt;<code><a href="function.html#mth_-list">-list</a> scalops</code>&gt; at the dLabPro
       command prompt for a recent list.</span>
    </td></tr>
    <tr><td><code><b>OP_NOOP     </code></td><td>noop         </td><td><code>   0</code></td><td></td><td>No operation</td></tr>
    <tr><td colspan="5">&nbsp;<br>Monadic scalar math operations</td></tr>
    <tr><td><code><b>OP_NEG      </code></td><td>neg          </td><td><code>1100</code></td><td>-<i>x</a></td><td>Negation</td></tr>
    <tr><td><code><b>OP_SQR      </code></td><td>sqr          </td><td><code>1101</code></td><td><i>x</i><sup>2</sup></td><td>Square</td></tr>
    <tr><td><code><b>OP_ABS      </code></td><td>abs          </td><td><code>1102</code></td><td>|<i>x</i>|</td><td>Absolute value</td></tr>
    <tr><td><code><b>OP_SQRT     </code></td><td>sqrt         </td><td><code>1103</code></td><td>&radic;<i style="text-decoration:overline;">x</i></td><td>Square root</td></tr>
    <tr><td><code><b>OP_SIGN     </code></td><td>sign         </td><td><code>1104</code></td><td>sgn(<i>x</i>)</td><td>Sign</td></tr>
    <tr><td><code><b>OP_ENT      </code></td><td>ent          </td><td><code>1105</code></td><td>ent(<i>x</i>)</td><td>Entire</td></tr>
    <tr><td><code><b>OP_FLOOR    </code></td><td>floor        </td><td><code>1106</code></td><td>floor(<i>x</i>)</td><td>Floor</td></tr>
    <tr><td><code><b>OP_CEIL     </code></td><td>ceil         </td><td><code>1107</code></td><td>ceil(<i>x</i>)</td><td>Ceil</td></tr>
    <tr><td><code><b>OP_INC      </code></td><td>inc, ++      </td><td><code>1108</code></td><td><i>x</i>+1</td><td>Increment (+1)</td></tr>
    <tr><td><code><b>OP_DEC      </code></td><td>dec, --      </td><td><code>1109</code></td><td><i>x</i>-1</td><td>Decrement (-1)</td></tr>
    <tr><td><code><b>OP_INVT     </code></td><td>inv          </td><td><code>1110</code></td><td><i>x</i><sup>-1</sup></td><td>Inversion</td></tr>
    <tr><td><code><b>OP_LOG      </code></td><td>log          </td><td><code>1111</code></td><td>log<sub>10</sub><i>x</i></td><td>Decadic logarithm</td></tr>
    <tr><td><code><b>OP_LOG2     </code></td><td>log2         </td><td><code>1111</code></td><td>log<sub>2</sub><i>x</i></td><td>Binary logarithm</td></tr>
    <tr><td><code><b>OP_LN       </code></td><td>ln           </td><td><code>1112</code></td><td>log<i>x</i></td><td>Natural logarithm</td></tr>
    <tr><td><code><b>OP_EXP      </code></td><td>exp          </td><td><code>1113</code></td><td><i>e<sup>x</sup></i></td><td>Exponential function</td></tr>
    <tr><td><code><b>OP_SIN      </code></td><td>sin          </td><td><code>1114</code></td><td>sin <i>x</i></td><td>Sine</td></tr>
    <tr><td><code><b>OP_ASIN     </code></td><td>asin         </td><td><code>1115</code></td><td>asin <i>x</i></td><td>Arc sine</td></tr>
    <tr><td><code><b>OP_SINH     </code></td><td>sinh         </td><td><code>1116</code></td><td>sinh <i>x</i></td><td>Hyperbolic sine</td></tr>
    <tr><td><code><b>OP_COS      </code></td><td>cos          </td><td><code>1117</code></td><td>cos <i>x</i></td><td>Cosine</td></tr>
    <tr><td><code><b>OP_ACOS     </code></td><td>acos         </td><td><code>1118</code></td><td>acos <i>x</i></td><td>Arc cosine</td></tr>
    <tr><td><code><b>OP_COSH     </code></td><td>cosh         </td><td><code>1119</code></td><td>cosh <i>x</i></td><td>Hyperbolic cosine</td></tr>
    <tr><td><code><b>OP_TAN      </code></td><td>tan          </td><td><code>1120</code></td><td>tan <i>x</i></td><td>Tangent</td></tr>
    <tr><td><code><b>OP_ATAN     </code></td><td>atan         </td><td><code>1121</code></td><td>atan <i>x</i></td><td>Arc tangent</td></tr>
    <tr><td><code><b>OP_TANH     </code></td><td>tanh         </td><td><code>1122</code></td><td>tanh <i>x</i></td><td>Hyperbolic tangent</td></tr>
    <tr><td><code><b>OP_SET      </code></td><td>set, =       </td><td><code>1123</code></td><td><i>x</i></td><td>Assignment</td></tr>
    <tr><td><code><b>OP_ANGLE    </code></td><td>angle        </td><td><code>1138</code></td><td>|<i>x</i>|</td><td>Angle of value</td></tr>
    <tr><td colspan="5">&nbsp;<br>Dyadic scalar math operations</td></tr>
    <tr><td><code><b>OP_ADD      </code></td><td>add, +       </td><td><code>1200</code></td><td><i>x</i>+<i>y</i></td><td>Addition</td></tr>
    <tr><td><code><b>OP_LSADD    </code></td><td>lsadd        </td><td><code>1201</code></td><td>-log(<i>e</i><sup>-<i>x</i></sup>+<i>e</i><sup>-<i>y</i></sup>)</td><td>Log semiring addition</td></tr>
    <tr><td><code><b>OP_EXPADD   </code></td><td>expadd       </td><td><code>1202</code></td><td>log(<i>e</i><sup><i>x</i></sup>+<i>e</i><sup><i>y</i></sup>)</td><td>Exponential addition</td></tr>
    <tr><td><code><b>OP_DIFF     </code></td><td>diff, -      </td><td><code>1203</code></td><td><i>x</i>-<i>y</i></td><td>Difference</td></tr>
    <tr><td><code><b>OP_ABSDIFF  </code></td><td>absdiff      </td><td><code>1204</code></td><td>|<i>x</i>-<i>y</i>|</td><td>Absolute difference</td></tr>
    <tr><td><code><b>OP_QDIFF    </code></td><td>qdiff        </td><td><code>1205</code></td><td>(<i>x</i>-<i>y</i>)<sup>2</sup></td><td>Quadratic difference</td></tr>
    <tr><td><code><b>OP_MULT     </code></td><td>mult, *      </td><td><code>1206</code></td><td><i>x</i>*<i>y</i></td><td>Multiplication</td></tr>
    <tr><td><code><b>OP_DIV      </code></td><td>div, /       </td><td><code>1207</code></td><td><i>x</i>/<i>y</i></td><td>Division</td></tr>
    <tr><td><code><b>OP_DIV1     </code></td><td>             </td><td><code>1208</code></td><td><i>x</i>/(<i>y</i>+1)</td><td>Division by y+1</td></tr>
    <tr><td><code><b>OP_MOD      </code></td><td>             </td><td><code>1209</code></td><td>mod(<i>x</i>,<i>y</i>)</td><td>Modulus</td></tr>
    <tr><td><code><b>OP_LNL      </code></td><td>lnl          </td><td><code>1210</code></td><td>max(log(<i>x</i>),<i>y</i>)</td><td>Natural logarithm, limited</td></tr>
    <tr><td><code><b>OP_POW      </code></td><td>pow          </td><td><code>1211</code></td><td><i>x<sup>y</sup></i></td><td>Power</td></tr>
    <tr><td><code><b>OP_NOVERK   </code></td><td>over         </td><td><code>1212</code></td><td><table><tr><td rowspan="2" style="vertical-align:middle; border:none;">(</td><td style="border:none"><i>x</i></td><td rowspan="2" style="vertical-align:middle; border:none;">)</td></tr><tr><td style="border:none"><i>y</i></td></tr></table></td><td>n over k</td></tr>
    <tr><td><code><b>OP_GAUSS    </code></td><td>gauss        </td><td><code>1213</code></td><td><i>e</i><sup>-<i>x<i><sup>2</sup>/<i>y<i><sup>2</sup></sup></td><td>Gaussian function</td></tr>
    <tr><td><code><b>OP_SIGMOID  </code></td><td>sigmoid      </td><td><code>1214</code></td><td>1/(1-<i>e</i><sup><i>x</i>/<i>y</i></sup>)</td><td>Sigmoid function</td></tr>
    <tr><td><code><b>OP_AIZER    </code></td><td>             </td><td><code>1215</code></td><td>1/(1+<i>x</i>/<i>y</i>) for <i>x</i>&gt;<i>y</i></td><td>Aizer function (?)</td></tr>
    <tr><td><code><b>OP_POTENTIAL</code></td><td>             </td><td><code>1216</code></td><td>1/(1+<i>x</i><sup>2</sup>/<i>y</i><sup>2</sup>)</td><td>Potential function (?) </td></tr>

    <tr><td><code><b>OP_MAX      </code></td><td>max          </td><td><code>2440</code></td><td>max(<i>x</i>,<i>y</i>)</td><td>Maximum</td></tr>
    <tr><td><code><b>OP_AMAX     </code></td><td>amax         </td><td><code>2441</code></td><td>max(|<i>x</i>|,|<i>y</i>|)</td><td>Absolute maximum</td></tr>
    <tr><td><code><b>OP_SMAX     </code></td><td>smax         </td><td><code>2442</code></td><td><i>x</i> if |<i>x</i>|&gt;|<i>y</i>|; <i>y</i> otherwise</td><td>Signed absolute maximum</td></tr>
    <tr><td><code><b>OP_MIN      </code></td><td>min          </td><td><code>2450</code></td><td>min(<i>x</i>,<i>y</i>)</td><td>Minimum</td></tr>
    <tr><td><code><b>OP_AMIN     </code></td><td>amin         </td><td><code>2451</code></td><td>min(|<i>x</i>|,|<i>y</i>|)</td><td>Absolute minimum</td></tr>
    <tr><td><code><b>OP_SMIN     </code></td><td>smin         </td><td><code>2452</code></td><td><i>x</i> if |<i>x</i>|&lt;|<i>y</i>|; <i>y</i> otherwise</td><td>Signed absolute minimum</td></tr>

    <tr><td colspan="5">&nbsp;<br>Logical operations</td></tr>
    <tr><td><code><b>OP_OR       </code></td><td>or, ||       </td><td><code>2260</code></td><td><i>x</i>&or;<i>y</i></td><td>Logical or</td></tr>
    <tr><td><code><b>OP_BITOR    </code></td><td>bitor, &     </td><td><code>2264</code></td><td><i>x</i>&bitor;<i>y</i></td><td>Bitwise or</td></tr>
    <tr><td><code><b>OP_AND      </code></td><td>and, &&      </td><td><code>2261</code></td><td><i>x</i>&and;<i>y</i></td><td>Logical and</td></tr>
    <tr><td><code><b>OP_BITAND   </code></td><td>bitand, &    </td><td><code>2263</code></td><td><i>x</i>&bitand;<i>y</i></td><td>Bitwise and</td></tr>
    <tr><td><code><b>OP_NOT      </code></td><td>not          </td><td><code>2262</code></td><td>&not;<i>x</i></td><td>Logical not</td></tr>
    <tr><td><code><b>OP_EQUAL    </code></td><td>eq, ==       </td><td><code>2310</code></td><td><i>x</i>=<i>y</i></td><td>Equal</td></tr>
    <tr><td><code><b>OP_NEQUAL   </code></td><td>neq, !=      </td><td><code>2320</code></td><td><i>x</i>&ne;<i>y</i></td><td>Not equal</td></tr>
    <tr><td><code><b>OP_LESS     </code></td><td>less, &lt;   </td><td><code>2330</code></td><td><i>x</i>&lt;<i>y</i></td><td>Less than</td></tr>
    <tr><td><code><b>OP_GREATER  </code></td><td>greater, &gt;</td><td><code>2340</code></td><td><i>x</i>&gt;<i>y</i></td><td>Greater than</td></tr>
    <tr><td><code><b>OP_LEQ      </code></td><td>leq, &lt;=   </td><td><code>2350</code></td><td><i>x</i>&le;<i>y</i></td><td>Less or equal</td></tr>
    <tr><td><code><b>OP_GEQ      </code></td><td>geq, &gt;=   </td><td><code>2360</code></td><td><i>x</i>&ge;<i>y</i></td><td>Greater or equal</td></tr>
    <tr><td class="rowempty" colspan="4">&nbsp;</td></tr>

  {@cgen:index Aggregation operatations}
    <tr><td class="rowgroup" colspan="5">
       <a name="aggrops"></a>Aggregation operations<br>
       <span class="normal">See {@link dlp_aggrop},
       <a href="data.html#mth_-aggregate"><code class="link">data -aggregate</code></a> <sup>2)</sup><br>
       Type &lt;<code><a href="function.html#mth_-list">-list</a> aggrops</code>&gt; at the dLabPro
       command prompt for a recent list.</span>
    </td></tr>
    <tr><td><code><b>OP_DIFF     </code></td><td>       </td><td><code>2210</code></td><td><i>x</i><sup>(<i>N-1</i>)</sup>-<i>x</i><sup>(0)</sup></td><td>Difference first - last value</td></tr>
    <tr><td><code><b>OP_SUM      </code></td><td>sum    </td><td><code>2430</code></td><td>&sum;<i>x</i><sup>(<i>n</i>)</sup></td><td>Sum</td></tr>
    <tr><td><code><b>OP_PROD     </code></td><td>prod   </td><td><code>2431</code></td><td>&prod;<i>x</i><sup>(<i>n</i>)</sup></td><td>Product</td></tr>
    <tr><td><code><b>OP_MAX      </code></td><td>max    </td><td><code>2440</code></td><td>Max(<i>x</i><sup>(<i>n</i>)</sup>)</td><td>Maximum</td></tr>
    <tr><td><code><b>OP_AMAX     </code></td><td>       </td><td><code>2441</code></td><td>Max(|<i>x</i><sup>(<i>n</i>)</sup>|)</td><td>Absolute maximum</td></tr>
    <tr><td><code><b>OP_SMAX     </code></td><td>       </td><td><code>2442</code></td><td> </td><td>Signed absolute maximum</td></tr>
    <tr><td><code><b>OP_IMAX     </code></td><td>imax   </td><td><code>2443</code></td><td> </td><td>Index of maximum</td></tr>
    <tr><td><code><b>OP_MIN      </code></td><td>min    </td><td><code>2450</code></td><td>Min(<i>x</i><sup>(<i>n</i>)</sup>)</td><td>Minimum</td></tr>
    <tr><td><code><b>OP_AMIN     </code></td><td>       </td><td><code>2451</code></td><td>Min(|<i>x</i><sup>(<i>n</i>)</sup>|)</td><td>Absolute minimum</td></tr>
    <tr><td><code><b>OP_SMIN     </code></td><td>       </td><td><code>2452</code></td><td> </td><td>Signed absolute minimum</td></tr>
    <tr><td><code><b>OP_IMIN     </code></td><td>imin   </td><td><code>2453</code></td><td> </td><td>Index of minimum</td></tr>
    <tr><td><code><b>OP_SPAN     </code></td><td>span   </td><td><code>2459</code></td><td>Max(<i>x</i><sup>(<i>n</i>)</sup>) - Min(<i>x</i><sup>(<i>n</i>)</sup>)</td><td>Spanwidth</td></tr>
    <tr><td><code><b>OP_MEAN     </code></td><td>mean   </td><td><code>9600</code></td><td><b>E</b><i>X</i></span> &asymp; 1/<i>N</i> &sum;<i>x</i><sup>(<i>n</i>)</sup></td><td>Arithmetic mean</td></tr>
    <tr><td><code><b>OP_AMEAN    </code></td><td>amean  </td><td><code>9601</code></td><td>1/<i>N</i> &sum;|<i>x</i><sup>(<i>n</i>)</sup>|</td><td>Absolute mean</td></tr>
    <tr><td><code><b>OP_QMEAN    </code></td><td>qmean  </td><td><code>9602</code></td><td>1/<i>N</i> &sum;(<i>x</i><sup>(<i>n</i>)</sup>)<sup>2</sup></td><td>Quadratic mean</td></tr>
    <tr><td><code><b>OP_MOMENT   </code></td><td>mom    </td><td><code>9603</code></td><td>1/<i>N</i> &sum;(<i>x</i><sup>(<i>n</i>)</sup>)<sup><i>k</i></sup></td><td><i>k</i>-th moment</td></tr>
    <tr><td><code><b>OP_CMOMENT  </code></td><td>cmom   </td><td><code>9604</code></td><td>1/<i>N</i> &sum;(<i>x</i><sup>(<i>n</i>)</sup>-<b>E</b><i>X</i></span>)<sup><i>k</i></sup></td><td><i>k</i>-th central moment</td></tr>
    <tr><td><code><b>OP_GMEAN    </code></td><td>gmean  </td><td><code>9605</code></td><td>1/<i>N</i> &sum; log(<i>x</i><sup>(<i>n</i>)</sup>)</td><td>Geometric mean</td></tr>
    <tr><td><code><b>OP_HMEAN    </code></td><td>hmean  </td><td><code>9606</code></td><td>1 / (&sum;(1/<i>x</i><sup>(<i>n</i>)</sup>))</td><td>Harmonic mean</td></tr>
    <tr><td><code><b>OP_RANK     </code></td><td>rank   </td><td><code>9620</code></td><td> </td><td>Element of rank <i>k</i></td></tr>
    <tr><td><code><b>OP_MED      </code></td><td>med    </td><td><code>9621</code></td><td> </td><td>Median</td></tr>
    <tr><td><code><b>OP_QUANTIL  </code></td><td>quantil</td><td><code>9622</code></td><td> </td><td><i>k</i> quantil</td></tr>
    <tr><td><code><b>OP_QUARTIL  </code></td><td>quartil</td><td><code>9623</code></td><td> </td><td>Quartil (<i>k</i>=0.25)</td></tr>
    <tr><td><code><b>OP_IQDIST   </code></td><td>       </td><td><code>9623</code></td><td> </td><td>Interquartil distance</td></tr>
    <tr><td><code><b>OP_VAR      </code></td><td>var    </td><td><code>9640</code></td><td>Var<i>X</i> &asymp; 1/(<i>N</i>-1) [&sum;(<i>x</i><sup>(<i>n</i>)</sup>)<sup>2</sup> - (&sum;<i>x</i><sup>(<i>n</i>)</sup>)<sup>2</sup> / <i>N</i> ]</td><td>Variance</td></tr>
    <tr><td><code><b>OP_STDEV    </code></td><td>sdev   </td><td><code>9641</code></td><td>(Var<i>X</i>)<sup>1/2</sup></td><td>Standard deviation</td></tr>
    <tr><td><code><b>OP_SKEW     </code></td><td>skew   </td><td><code>9650</code></td><td><b>E</b>(<i>X</i>-<b>E</b><i>X</i>)<sup>3</sup> / (Var<i>X</i>)<sup>3/2</sup></td><td>Skewness</td></tr>
    <tr><td><code><b>OP_EXC      </code></td><td>exc    </td><td><code>9660</code></td><td>[<b>E</b>(<i>X</i>-<b>E</b><i>X</i>)<sup>4</sup> / (Var<i>X</i>)<sup>2</sup>] -3</td><td>Excess</td></tr>
    <tr><td><code><b>OP_MINK     </code></td><td>mink   </td><td><code>9700</code></td><td>[&sum;(<i>x</i><sup>(<i>n</i>)</sup>)<sup><i>k</i></sup>]<sup>1/<i>k</i></sup></td><td>Minkowski sum (power <i>k</i>)</td></tr>
    <tr><td><code><b>OP_MINKPOW  </code></td><td>minkpow</td><td><code>9701</code></td><td>&sum;(<i>x</i><sup>(<i>n</i>)</sup>)<sup><i>k</i></sup></td><td>Minkowski sum (power <i>k</i>) w/o root</td></tr>
    <tr><td class="rowempty" style="border:none;" colspan="5">
      with<br>
      &nbsp;&nbsp;<i>x</i><sup>(<i>n</i>)</sup>: value of <i>n</i>-th vector component<br>
      &nbsp;&nbsp;<i>N</i>: vector dimension (number of components)<br>
      &nbsp;&nbsp;<i>k</i>: parameter
    </td></tr>
    <tr><td class="rowempty" style="border:none" colspan="5">&nbsp;</td></tr>

<!--
<table><tr><td rowspan="2" style="border:none; vertical-align:middle">...</td><td style="border:none;">...</td><td rowspan="2" style="border:none; vertical-align:middle">...</td></tr><tr><td style="border:none">...</td></tr></table>
-->
  {@cgen:index String operatations}
    <tr><td class="rowgroup" colspan="5">
       <a name="strops"></a>String operations<br>
       <span class="normal">See
       <a href="data.html#mth_-strop"><code class="link">data -strop</code></a><br>
       Type &lt;<code><a href="function.html#mth_-list">-list</a> strops</code>&gt; at the dLabPro
       command prompt for a recent list.</span>
    </td></tr>
    <tr><td><code><b>SOP_CMP    </code></td><td>cmp    </td><td><code>10000</code></td><td> </td><td>Compare</td></tr>
    <tr><td><code><b>SOP_LEFT   </code></td><td>left   </td><td><code>10001</code></td><td> </td><td>Left n characters</td></tr>
    <tr><td><code><b>SOP_LEN    </code></td><td>len    </td><td><code>10002</code></td><td> </td><td>Length</td></tr>
    <tr><td><code><b>SOP_LWR    </code></td><td>lwr    </td><td><code>10003</code></td><td> </td><td>Lower case</td></tr>
    <tr><td><code><b>SOP_RCAT   </code></td><td>rcat   </td><td><code>10004</code></td><td> </td><td>Concatenate records</td></tr>
    <tr><td><code><b>SOP_REPLACE</code></td><td>replace</td><td><code>10005</code></td><td> </td><td>Replace keystrings</td></tr>
    <tr><td><code><b>SOP_RIGHT  </code></td><td>right  </td><td><code>10006</code></td><td> </td><td>Right n characters</td></tr>
    <tr><td><code><b>SOP_SEARCH </code></td><td>search </td><td><code>10007</code></td><td> </td><td>Search sub string</td></tr>
    <tr><td><code><b>SOP_SPLIT  </code></td><td>split  </td><td><code>10008</code></td><td> </td><td>Split at delimiters</td></tr>
    <tr><td><code><b>SOP_SPLITALL</code></td><td>splitall</td><td><code>10008</code></td><td> </td><td>Split at every delimiter</td></tr>
    <tr><td><code><b>SOP_UPR    </code></td><td>upr    </td><td><code>10009</code></td><td> </td><td>Upper case</td></tr>

  </table>

  <p>
    <sup>1)</sup> Few operations <em>not</em> supported by {@link dlp_scalop} and
    <a href="data.html#mth_-scalop"><code class="link">data -scalop</code></a><br>
    <sup>2)</sup> Few operations <em>not</em> supported by {@link dlp_aggrop} and
    <a href="data.html#mth_-aggregate"><code class="link">data -aggregate</code></a>
  </p>
END_MAN

NOTE:    Constants
COMMENT: Global constants. 
/html MAN:
  {@cgen:index Constants}
  <table class="indent" cellpadding="3">
    <tr><th>Identifier</th><th>Value</th><th>Description</th></tr>

    <tr><td class="rowgroup" colspan="3">General</td></tr>
    <tr><td><code><b>C_DIR</b></code>   {@cgen:index Constants!C_DIR}   </td><td><code>'\\'</code> or <code>'/'</code></td><td>Platform dependent path separator</td></tr>
    <tr><td><code><b>FALSE</b></code>   {@cgen:index Constants!FALSE}   </td><td><code>0</code></td><td>Logical false</td></tr>
    <tr><td><code><b>L_SSTR</b></code>  {@cgen:index Constants!L_SSTR}  </td><td><code>256</code></td><td>Maximal length of static strings</td></tr>
    <tr><td><code><b>NEWLINE</b></code> {@cgen:index Constants!NEWLINE} </td><td><code>"\n\r"</code> or <code>"\n"</code></td><td>Platform dependent line break</td></tr>
    <tr><td><code><b>NOT_EXEC</b></code>{@cgen:index Constants!NOT_EXEC}</td><td><code>-1</code></td><td>Generic error return</td></tr>
    <tr><td><code><b>NULL</b></code>    {@cgen:index Constants!NULL}    </td><td><code>0</code></td><td>Null pointer</td></tr>
    <tr><td><code><b>O_K</b></code>     {@cgen:index Constants!O_K}     </td><td><code>1</code></td><td>Generic return code for "ok"</td></tr>
    <tr><td><code><b>PI</b></code>      {@cgen:index Constants!PI}      </td><td><code>3.14159265</code></td><td>&pi;</td></tr>
    <tr><td><code><b>TRUE</b></code>    {@cgen:index Constants!TRUE}    </td><td><code>1</code></td><td>Logical true</td></tr>
    <tr><td class="rowempty" colspan="3">&nbsp;</td></tr>

    <tr><td class="rowgroup" colspan="3">Type codes <sup>1)</sup></td></tr>
    <tr><td><code><b>T_BOOL</b></code>    {@cgen:index Constants!T_BOOL}    </td><td><code>1000</code></td><td>Boolean</td></tr>
    <tr><td><code><b>T_BYTE</b></code>    {@cgen:index Constants!T_BYTE}    </td><td><code>1001</code></td><td>8-bit word <sup>2)</sup></td></tr>
    <tr><td><code><b>T_UCHAR</b></code>   {@cgen:index Constants!T_UCHAR}   </td><td><code>1001</code></td><td>Unsigned character (8-bit word <sup>2)</sup>)</td></tr>
    <tr><td><code><b>T_CHAR</b></code>    {@cgen:index Constants!T_CHAR}    </td><td><code>2001</code></td><td>Signed character</td></tr>
    <tr><td><code><b>T_USHORT</b></code>  {@cgen:index Constants!T_USHORT}  </td><td><code>1002</code></td><td>Unsigned short integer</td></tr>
    <tr><td><code><b>T_SHORT</b></code>   {@cgen:index Constants!T_SHORT}   </td><td><code>2002</code></td><td>Signed short integer</td></tr>
    <tr><td><code><b>T_UINT</b></code>    {@cgen:index Constants!T_UINT}    </td><td><code>1004</code></td><td>Signed integer</td></tr>
    <tr><td><code><b>T_INT</b></code>     {@cgen:index Constants!T_INT}     </td><td><code>2004</code></td><td>Signed integer</td></tr>
    <tr><td><code><b>T_ULONG</b></code>   {@cgen:index Constants!T_ULONG }  </td><td><code>1008</code></td><td>Unsigned long integer</td></tr>
    <tr><td><code><b>T_LONG</b></code>    {@cgen:index Constants!T_LONG}    </td><td><code>2008</code></td><td>Signed long integer</td></tr>
    <tr><td><code><b>T_FLOAT</b></code>   {@cgen:index Constants!T_FLOAT}   </td><td><code>3004</code></td><td>Single precision floating point number</td></tr>
    <tr><td><code><b>T_DOUBLE</b></code>  {@cgen:index Constants!T_DOUBLE}  </td><td><code>3008</code></td><td>Double precision floating point number</td></tr>
    <tr><td><code><b>T_COMPLEX</b></code> {@cgen:index Constants!T_COMPLEX} </td><td><code>3009</code></td><td>Double precision complex floating point number</td></tr>
    <tr><td><code><b>T_STRING</b></code>  {@cgen:index Constants!T_STRING}  </td><td><code>5000</code></td><td>Pointer to character array (<code>char*</code>)</td></tr>
    <tr><td><code><b>T_TEXT</b></code>    {@cgen:index Constants!T_TEXT}    </td><td><code>5001</code></td><td>- deprecated -</td></tr>
    <tr><td><code><b>T_CSTRING</b></code> {@cgen:index Constants!T_CSTRING} </td><td><code>5002</code></td><td>Pointer to constant character array (<code>const char*</code>)</td></tr>
    <tr><td><code><b>T_PTR</b></code>     {@cgen:index Constants!T_PTR}     </td><td><code>6000</code></td><td>Typeless pointer</td></tr>
    <tr><td><code><b>T_INSTANCE</b></code>{@cgen:index Constants!T_INSTANCE}</td><td><code>6000</code></td><td>Pointer to dLabPro instance (<code>CDlpObject*</code>)</td></tr>
    <tr><td><code><b>T_IGNORE</b></code>  {@cgen:index Constants!T_IGNORE}  </td><td><code>10000</code></td><td>- internal use -</td></tr>
    <tr><td><code><b>T_STKBRAKE</b></code>{@cgen:index Constants!T_STKBRAKE}</td><td><code>10001</code></td><td>- internal use -</td></tr>
    <tr><td class="rowempty" colspan="3">&nbsp;</td></tr>

    <tr><td class="rowgroup" colspan="3">Type ranges</td></tr>
    <tr><td><code><b>T_BOOL_MAX</b></code>  {@cgen:index Constants!T_BOOL_MAX}  </td><td><code>1</code></td><td>Boolean maximum</td></tr>
    <tr><td><code><b>T_BOOL_MIN</b></code>  {@cgen:index Constants!T_BOOL_MIN}  </td><td><code>0</code></td><td>Boolean minimum</td></tr>
    <tr><td><code><b>T_UCHAR_MAX</b></code> {@cgen:index Constants!T_UCHAR_MAX} </td><td><code>0xFF</code></td><td>Unsigned char maximum</td></tr>
    <tr><td><code><b>T_UCHAR_MIN</b></code> {@cgen:index Constants!T_UCHAR_MIN} </td><td><code>0x00</code></td><td>Unsigned char minimum</td></tr>
    <tr><td><code><b>T_CHAR_MAX</b></code>  {@cgen:index Constants!T_CHAR_MAX } </td><td><code>127</code></td><td>Signed char maximum</td></tr>
    <tr><td><code><b>T_CHAR_MIN</b></code>  {@cgen:index Constants!T_CHAR_MIN } </td><td><code>-127</code></td><td>Signed char minimum</td></tr>
    <tr><td><code><b>T_USHORT_MAX</b></code>{@cgen:index Constants!T_USHORT_MAX}</td><td><code>0xFFFF</code></td><td>Unsigned short maximum</td></tr>
    <tr><td><code><b>T_USHORT_MIN</b></code>{@cgen:index Constants!T_USHORT_MIN}</td><td><code>0x0000</code></td><td>Unsigned short minimum</td></tr>
    <tr><td><code><b>T_SHORT_MAX</b></code> {@cgen:index Constants!T_SHORT_MAX} </td><td><code>32767</code></td><td>Signed short maximum</td></tr>
    <tr><td><code><b>T_SHORT_MIN</b></code> {@cgen:index Constants!T_SHORT_MIN} </td><td><code>-32767</code></td><td>Signed short minimum</td></tr>
    <tr><td><code><b>T_UINT_MAX</b></code>  {@cgen:index Constants!T_UINT_MAX}  </td><td><code>0xFFFFFFFF</code></td><td>Unsigned int maximum</td></tr>
    <tr><td><code><b>T_UINT_MIN</b></code>  {@cgen:index Constants!T_UINT_MIN}  </td><td><code>0x00000000</code></td><td>Unsigned int minimum</td></tr>
    <tr><td><code><b>T_INT_MAX</b></code>   {@cgen:index Constants!T_INT_MAX}   </td><td><code>2147483647</code></td><td>Signed int maximum</td></tr>
    <tr><td><code><b>T_INT_MIN</b></code>   {@cgen:index Constants!T_INT_MIN}   </td><td><code>-2147483647</code></td><td>Signed int minimum</td></tr>
    <tr><td><code><b>T_ULONG_MAX</b></code> {@cgen:index Constants!T_ULONG_MAX} </td><td><code>0xFFFFFFFF</code></td><td>Unsigned long maximum</td></tr>
    <tr><td><code><b>T_ULONG_MIN</b></code> {@cgen:index Constants!T_ULONG_MIN} </td><td><code>0x00000000</code></td><td>Unsigned long minimum</td></tr>
    <tr><td><code><b>T_LONG_MAX</b></code>  {@cgen:index Constants!T_LONG_MAX}  </td><td><code>9223372036854775807</code></td><td>Signed long maximum</td></tr>
    <tr><td><code><b>T_LONG_MIN</b></code>  {@cgen:index Constants!T_LONG_MIN}  </td><td><code>-9223372036854775808</code></td><td>Signed long minimum</td></tr>
    <tr><td><code><b>T_FLOAT_MAX</b></code> {@cgen:index Constants!T_FLOAT_MAX} </td><td><code>3.402823466E38</code></td><td>Single precision float maximum</td></tr>
    <tr><td><code><b>T_FLOAT_MIN</b></code> {@cgen:index Constants!T_FLOAT_MIN} </td><td><code>-3.402823466E38</code></td><td>Single precision float minimum</td></tr>
    <tr><td><code><b>T_DOUBLE_MAX</b></code>{@cgen:index Constants!T_DOUBLE_MAX}</td><td><code>1.79769313486231E308</code></td><td>Double precision float maximum</td></tr>
    <tr><td><code><b>T_DOUBLE_MIN</b></code>{@cgen:index Constants!T_DOUBLE_MIN}</td><td><code>-1.79769313486231E308</code></td><td>Double precision float minimum</td></tr>
    <tr><td class="rowempty" colspan="3">&nbsp;</td></tr>

<!--
    <tr><td class="rowgroup" colspan="3">General</td></tr>
    <tr><td><code><b>...</b></code>{@cgen:index Constants!...}</td><td><code>...</code></td><td>...</td></tr>
    <tr><td class="rowempty" colspan="3">&nbsp;</td></tr>
-->
  </table>
  <p><sup>1)</sup>
    See <a href="#cfn"><code class="link">dlp_get_type_<em>xxx</em></code></a>,
    <a href="#cfn"><code class="link">dlp_is_<em>xxx</em>_type_code</code></a>,
    <a href="data.html">class <code class="link">data</code></a></p>
  <p><sup>2)</sup> Actual length not guaranteed for all platforms!</p>
END_MAN

NOTE:    Types
COMMENT: Global type definitions.
/html MAN:
  <table class="indent" cellpadding="3">
    <tr><th>Type name</th><th>Description</th><th>Details</th></tr>
    <tr>
      <td><code><b>BYTE</b></code></td>
      <td>8-bit word <sup>1)</sup></td>
      <td><code>typedef unsigned char BYTE;</code></td>
    </tr>
    <tr>
      <td><code><b>WORD</b></code></td>
      <td>16-bit word <sup>1)</sup></td>
      <td><code>typedef unsigned short WORD;</code></td>
    </tr>
    <tr>
      <td><code><b>DWORD<br>ULONG</b></code></td>
      <td>32-bit word <sup>1)</sup></td>
      <td><code>typedef INT32 DWORD;<br>typedef INT32 ULONG;</code></td>
    </tr>
    <tr>
      <td><code><b>string</b></code></td>
      <td>String pointer</td>
      <td><code>typedef char* string;</code></td>
    </tr>
    <tr>
      <td><code><b>BOOL</b></code></td>
      <td>Boolean</td>
      <td><code>typedef int BOOL;</code></td>
    </tr>
  </table>
  <p><sup>1)</sup> Actual length not guaranteed for all platforms!</p>
END_MAN

NOTE:    Macros
COMMENT: Global macros.
/html MAN:
  {@cgen:index Macros!Base library}
  <table class="indent" cellpadding="3">
    <tr><th>Macro</th><th>Description</th><th>Details</th></tr>

    <tr><td class="rowgroup" colspan="3">Error state handling</td></tr>
    <tr>
      <td><code><b>OK</b>(A)</code>{@cgen:index Macros!OK}</td>
      <td><code>TRUE</code> if <code>A</code> denotes <em>no</em> error state</td>
      <td><code>(A>0)</code></td>
    </tr>
    <tr>
      <td><code><b>NOK</b>(A)</code>{@cgen:index Macros!NOK}</td>
      <td><code>TRUE</code> if <code>A</code> denotes an error state</td>
      <td><code>(A<=0)</code></td>
    </tr>
    <tr>
      <td><code><b>IF_OK</b>(A)</code>{@cgen:index Macros!IF_OK}</td>
      <td>Conditional expression if <code>A</code> denotes <em>no</em> error state</td>
      <td><code>if (A>0)</code></td>
    </tr>
    <tr>
      <td><code><b>IF_NOK</b>(A)</code>{@cgen:index Macros!IF_NOK}</td>
      <td>Conditional expression if <code>A</code> denotes an error state</td>
      <td><code>if (A>=0)</code></td>
    </tr>
    <tr>
      <td><code><b>SWITCH_NOK</b>(A)</code>{@cgen:index Macros!SWITCH_NOK}</td>
      <td>Branch for error states</td>
      <td><code>switch (A>=0)</code></td>
    </tr>
    <tr><td class="rowempty" colspan="3">&nbsp;</td></tr>

    <tr><td class="rowgroup" colspan="3">String handling</td></tr>
    <tr>
      <td><code><b>CHARUPR</b>(A)</code>{@cgen:index Macros!CHARUPR}</td>
      <td>Converts one character to upper case</td>
      <td><code>if(A>='a' && A<='z') A-='a'-'A';</code></td>
    </tr>
    <tr>
      <td><code><b>CHARLWR</b>(A)</code>{@cgen:index Macros!CHARLWR}</td>
      <td>Converts one character to lower case</td>
      <td><code>if(A>='A' && A<='Z') A+='a'-'A';</code></td>
    </tr>
    <tr>
      <td><code><b>SCSTR</b>(A)</code>{@cgen:index Macros!SCSTR}</td>
      <td><code>NULL</code>-proof string pointer</td>
      <td><code>A?A:"(null)"</code></td>
    </tr>
    <tr><td class="rowempty" colspan="3">&nbsp;</td></tr>

    <tr><td class="rowgroup" colspan="3">Heap</td></tr>
    <tr>
      <td><code><b>dlp_calloc</b>(NUM,SIZE)</code></td>
      <td>Allocates zero-initialize memory</td>
      <td>{@link __dlp_calloc} <sup>1)</sup></td>
    </tr>
    <tr>
      <td><code><b>dlp_calloc</b>(SIZE)</code></td>
      <td>Allocates memory</td>
      <td>{@link __dlp_malloc} <sup>1)</sup></td>
    </tr>
    <tr>
      <td><code><b>dlp_realloc</b>(PTR,NUM,SIZE)</code></td>
      <td>Reallocates a memory block</td>
      <td>{@link __dlp_realloc} <sup>1)</sup></td>
    </tr>
    <tr>
      <td><code><b>dlp_free</b>(PTR)</code></td>
      <td>Frees a memory block</td>
      <td>{@link __dlp_free} <sup>1)</sup></td>
    </tr>
    <tr><td class="rowempty" colspan="3">&nbsp;</td></tr>

    <tr><td class="rowgroup" colspan="3">Debugging</td></tr>
    <tr>
      <td><code><b>DLPASSERT</b>(EXPR)</code>{@cgen:index Macros!DLPASSERT}</td>
      <td>Debug assertion failure if <code>EXPR</code> evaluates to 0</td>
      <td> </td>
    </tr>
    <tr>
      <td><code><b>FMSG</b>(MSG)</code>{@cgen:index Macros!FMSG}</td>
      <td>Message text for unconditional <code>DLPASSERT</code>, evaluates to 0</td>
      <td> </td>
    </tr>

<!--
    <tr>
      <td><code><b>...</b>(...)</code></td>
      <td>...</td>
      <td>...</td>
    </tr>
--> 
  </table>
  <p><sup>1)</sup> It is <em>mandatory</em> to use these macros
  for heap allocations.</p>
END_MAN

## Generate files
-cgen
quit

## EOF
