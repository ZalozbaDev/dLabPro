## dLabPro mathematics library
## - Definition file
##
## AUTHOR : Matthias Wolff
## PACKAGE: dLabPro/base
## 
## Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
## - Chair of System Theory and Speech Technology, TU Dresden
## - Chair of Communications Engineering, BTU Cottbus
## 
## This file is part of dLabPro.
## 
## dLabPro is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
## 
## dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
## 
## You should have received a copy of the GNU Lesser General Public License
## along with dLabPro. If not, see <http://www.gnu.org/licenses/>.

/cLib PROJECT: dlpmath
COMMENT:  dLabPro mathematics library
AUTHOR:   Matthias Wolff

## Source files
FILE: dlm_arith.c
FILE: dlm_fba.c                                                                 # Frame based analysis stuff
FILE: dlm_cep.c                                                                 # Cepstrum calculation
FILE: dlm_chf.c                                                                 # Cholesky factorization of matrices
FILE: dlm_crc32.c                                                               # CRC32 hash
FILE: dlm_comb.c                                                                # Combinatorics
FILE: dlm_dft.c
FILE: dlm_dtw.c                                                                 # DTW stuff
FILE: dlm_eigen.c
FILE: dlm_filter.c                                                              # Filter stuff
FILE: dlm_gcep.c                                                                # Generalized cepstrum stuff
FILE: dlm_gel.c
FILE: dlm_lpc.c                                                                 # Linear Predictive Coding
FILE: dlm_lsf.c                                                                 # Line Spectrum Frequencies
FILE: dlm_lcq.c                                                                 # Line Cepstrum Quefrencies
FILE: dlm_lud.c                                                                 # LU-Decomposition and solving linear system of eq.
FILE: dlm_melfilter.c                                                           # Mel-Filter
FILE: dlm_mlt.c                                                                 # Modulated Lapped Transform
FILE: dlm_noiserdc.c                                                            # Noise Reduction
FILE: dlm_ftt.c                                                                 # Fourier-t-transform
FILE: dlm_pitch.c                                                               # Pitch marker related functions
FILE: dlm_pow.c                                                                 # Approximation of x^y
FILE: dlm_rand.c                                                                # Random functions
FILE: dlm_roots.c                                                               # Roots of a polynomial
FILE: dlm_sig.c                                                                 # Signal processing algorithms
FILE: dlm_stat.c                                                                # Statistics
FILE: dlm_trig.c                                                                # Fast trigonometric functions
FILE: dlm_xft.c                                                                 # Discrete and fast Fourier transform
FILE: dlm_ldl.c                                                                 # LDL-Factorization
FILE: dlm_fwt.c                                                                 # fast wavelet transform
FILE: dlm_vq.c                                                                  # Scalar Vector Quantization

## Additional manual sections
NOTE: Memory structure of matrices
COMMENT: Describes how matrices are represented in memory.
/html MAN:
  <p>Matrices are stored as arrays of <code>double</code>s. The array is
  interpreted as sequence of <i>columns</i>:</p>
  <p><code>
  &nbsp;&nbsp;A = { a11, a21, a31, ..., a12, a22, a32, ... }
  </code></p>
  <p>The respective matrix is:</p>
  <pre>
   A = { a11, a12, a13, ...
         a21, a22, a23, ...
         ...
       }</pre>
  <p>The array index of matrix element <code>A[r,c]</code> may be computed
  as</p>
  <pre>
   i = c*rowlengh + r</code>.</pre>
END_MAN

NOTE: 32/64-Bit difference in feature extraction
COMMENT: Describes where the difference in feature extraction on 32/64-Bit occurs.
/html MAN:
  <p>The function dlm_mf_convolve in dlm_melfilter produces
  different results whether it runs on 32-Bit or on
  64-Bit Processor. This is caused by the calculation
  of the following code-line:</p>
  <code>
      z += *aptr++ * (lpIn[MLP_ABS(i-j)] + lpIn[i+j]);
  </code>
  <p>Here the compiler uses a processor function which
  doesnt produce the same results on 32- and 64-Bit
  processors.</p>
  <p>If you compile and run the following short programm
  without compilier optimization on 32-Bit machine you
  get two different results, whether on 64-Bit they are
  equal. (If you use compiler optimization on 32-Bit
  both results are wrong.)</p>
  <pre class="code">
int main(){
    FLOAT32 a,in1,in2,tmp,erg1,erg2;
    a=0.9549295902252197265625;
    in1=-3.823668956756591796875;
    in2=-3.6192710399627685546875;

    tmp=in1+in2;
    erg1=a*tmp;
    erg2=a*(in1+in2);

    printf("%6.3f *      %6.3f         = %15.12f\n",(double)a,(double)tmp,(double)erg1);
    printf("%6.3f * ( %6.3f + %6.3f ) = %15.12f\n",(double)a,(double)in1,(double)in2,(double)erg2);
}
  </pre>
END_MAN

## Generate files
-cgen
quit

## EOF
