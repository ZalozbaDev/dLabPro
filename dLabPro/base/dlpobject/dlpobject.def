## dLabPro class CDlpObject (object)
## - Definition file
##
## AUTHOR : Matthias Wolff
## PACKAGE: dLabPro/base
## 
## Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
## - Chair of System Theory and Speech Technology, TU Dresden
## - Chair of Communications Engineering, BTU Cottbus
## 
## This file is part of dLabPro.
## 
## dLabPro is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
## 
## dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
## 
## You should have received a copy of the GNU Lesser General Public License
## along with dLabPro. If not, see <http://www.gnu.org/licenses/>.

/cLib PROJECT: dlpobject
COMMENT: dLabPro class CDlpObject (object)
AUTHOR:  Matthias Wolff

## Source files
FILE: dlpo_dict.c
FILE: dlpo_dn3.c
FILE: dlpo_memb.c
FILE: dlpo_mic.c
FILE: dlpo_prt.c
FILE: dlpo_stat.c
FILE: dlpo_stm.c
FILE: dlpo_xml.c
FILE: dlpobject.c

## Additional manual sections
NOTE:    Macros
COMMENT: This section describes macros defined in dlpbase.h.
/html MAN:
  <h3>Alphabetical index of macros</h3>
  <table class="indent" cellpadding="3">
    <tr><th>Macro</th><th>Description</th><th>For details see section</th></tr>
    <tr>
      <td><code><b>CHECK_IPTR</b>(INST)</code></td>
      <td>Checks instance pointer and sets it to <code>NULL</code> on error</td>
      <td>{@link -- CHECK_THIS, CHECK_THIS_RV and CHECK_IPTR}</td>
    </tr>
    <tr>
      <td><code><b>CHECK_THIS</b></code></td>
      <td>Checks this pointer and returns on error</td>
      <td>{@link -- CHECK_THIS, CHECK_THIS_RV and CHECK_IPTR}</td>
    </tr>
    <tr>
      <td><code><b>CHECK_THIS_RV</b>(RETVAL)</code></td>
      <td>Checks this pointer and returns specified value on error</td>
      <td>{@link -- CHECK_THIS, CHECK_THIS_RV and CHECK_IPTR}</td>
    </tr>
    <tr>
      <td><code><b>CREATEVIRTUAL</b>(CLASS,IN,OUT)</code></td>
      <td>Ensures separate instances <code>IN</code> and <code>OUT</code></td>
      <td>{@link -- CREATEVIRTUAL and DESTROYVIRTUAL}</td>
    </tr>
    <tr>
      <td><code><b>DESTROYVIRTUAL</b>(IN,OUT)</code></td>
      <td>Destroys temporary instance possibly created <code>CREATEVIRTUAL</code></code></td>
      <td>{@link -- CREATEVIRTUAL and DESTROYVIRTUAL}</td>
    </tr>
    <tr>
      <td><code><b>ICREATE</b>(CLASS,INST)</code></td>
      <td>Creates an instance of a dLabPro class</td>
      <td>{@link -- ICREATE, ICREATEEX and IDESTROY}</td>
    </tr>
    <tr>
      <td><code><b>ICREATEEX</b>(CLASS,INST,NAME)</code></td>
      <td>Creates an instance of a dLabPro class</td>
      <td>{@link -- ICREATE, ICREATEEX and IDESTROY}</td>
    </tr>
    <tr>
      <td><code><b>IDESTROY</b>(INST)</code></td>
      <td>Destroys an instance of a dLabPro class</td>
      <td>{@link -- ICREATE, ICREATEEX and IDESTROY}</td>
    </tr>
    <tr>
      <td><code><b>IERROR</b>(INST,ERR,A,B,C)</code></td>
      <td>Destroys an instance of a dLabPro class</td>
      <td>{@link -- IERROR, IERRORAT and CERROR}</td>
    </tr>
    <tr>
      <td><code><b>IERRORAT</b>(INST,FILE,LINE,ERR,A,B,C)</code></td>
      <td>Destroys an instance of a dLabPro class</td>
      <td>{@link -- IERROR, IERRORAT and CERROR}</td>
    </tr>
    <tr>
      <td><code><b>IERROR</b>(CLASS,ERR,A,B,C)</code></td>
      <td>Destroys an instance of a dLabPro class</td>
      <td>{@link -- IERROR, IERRORAT and CERROR}</td>
    </tr>
    <tr>
      <td><code><b>IFCHECK</b></code></td>
      <td>Conditional expression depending on verbose level</td>
      <td>{@link -- IFCHECK, IFCHECKEX and MSG}</td>
    </tr>
    <tr>
      <td><code><b>IFCHECKEX</b>(LVL)</code></td>
      <td>Conditional expression depending on verbose level</td>
      <td>{@link -- IFCHECK, IFCHECKEX and MSG}</td>
    </tr>
    <tr>
      <td><code><b>IFIELD_RESET</b>(INST,FID)</code></td>
      <td>Resets a field to the default value</td>
      <td>{@link -- ISETFIELD and IFIELD_RESET}</td>
    </tr>
    <tr>
      <td><code><b>IRESETOPTIONS</b>(INST)</code></td>
      <td>Resets all options</td>
      <td>{@link -- ISETOPTION and IRESETOPTIONS}</td>
    </tr>
    <tr>
      <td><code><b>ISETFIELD</b>(INST,FID,VAL)</code></td>
      <td>Sets a field</td>
      <td>{@link -- ISETFIELD and IFIELD_RESET}</td>
    </tr>
    <tr>
      <td><code><b>ISETOPTION</b>(INST,OID)</code></td>
      <td>Sets an option</td>
      <td>{@link -- ISETOPTION and IRESETOPTIONS}</td>
    </tr>
    <tr>
      <td><code><b>MSG</b>(A,B,C,D)</code></td>
      <td>Prints a message</td>
      <td>{@link -- IFCHECK, IFCHECKEX and MSG}</td>
    </tr>
  </table>
  <p>For more macros, see description of <a href="dlpbase.html">base library<a>.
END_MAN

NOTE:    -- IFCHECK, IFCHECKEX and MSG
COMMENT: Describes universal message macros.
/html MAN:
  <p>TODO: write it! link it!</p>
END_MAN

NOTE:    -- IERROR, IERRORAT and CERROR
COMMENT: Describes universal error handling macros.
/html MAN:
  <p>All these macros call the dLabPro error handling function
  {@link CDlpObject_Error}. This is the <em>only</em> allowed way to
  display error and warning messages.</p>

  <h4><code>IERROR(INST,ERR,A,B,C)</code></h4>
  <p>Displays and counts error or warning messages for a specified instance.
  The location of the error (in a dLabPro script or a C/C++ source file) is
  determined automatically. This is the preferred error and warning macro.</p>

  <h4><code>IERRORAT(INST,FILE,LINE,ERR,A,B,C)</code></h4>
  <p>Displays and counts error or warning messages for a specified instance.
  The location of the error (in a dLabPro script or a C/C++ source file) my be
  specified (<code>FILE</code> and <code>LINE</code>).</p>

  <h4><code>CERROR(CLASS,ERR,A,B,C)</code></h4>
  <p>Displays and counts error or warning messages for a specified class.
  The location of the error (in a dLabPro script or a C/C++ source file) is
  determined automatically. This macro must only be used of there is no
  pointer to the instance causing the error available.</p>

  <h4>Parameters</h4>
  <p><table>
    <tr>
      <td class="hidden">&nbsp;&nbsp;&nbsp;</td>
      <td class="hidden"><code><b>INST</b></code></td>
      <td class="hidden">&nbsp;&nbsp;&nbsp;</td>
      <td class="hidden">Pointer to instance causing the error (must
        <em>not</code> be <code>NULL</code>)</td>
    </tr>
    <tr>
      <td class="hidden">&nbsp;&nbsp;&nbsp;</td>
      <td class="hidden"><code><b>ERR</b></code></td>
      <td class="hidden">&nbsp;&nbsp;&nbsp;</td>
      <td class="hidden">The error code (the displayed error message depends
        on the class specified through <code>INST</code> or
        <code>CLASS</code>!)</td>
    </tr>
    <tr>
      <td class="hidden">&nbsp;&nbsp;&nbsp;</td>
      <td class="hidden"><code><b>A</b></code>, <code><b>B</b></code>,
        <code><b>C</b></code></td>
      <td class="hidden">&nbsp;&nbsp;&nbsp;</td>
      <td class="hidden">Arguments according to the error messages
        format control characters (see C function <code>printf</code>)</td>
    </tr>
    <tr>
      <td class="hidden">&nbsp;&nbsp;&nbsp;</td>
      <td class="hidden"><code><b>FILE</b></code></td>
      <td class="hidden">&nbsp;&nbsp;&nbsp;</td>
      <td class="hidden">Pointer to string containing the source file name
        (may be <code>__FILE__</code>)</td>
    </tr>
    <tr>
      <td class="hidden">&nbsp;&nbsp;&nbsp;</td>
      <td class="hidden"><code><b>FILE</b></code></td>
      <td class="hidden">&nbsp;&nbsp;&nbsp;</td>
      <td class="hidden">Line number in source file (may be
        <code>__LINE__</code>)</td>
    </tr>
    <tr>
      <td class="hidden">&nbsp;&nbsp;&nbsp;</td>
      <td class="hidden"><code><b>CLASS</b></code></td>
      <td class="hidden">&nbsp;&nbsp;&nbsp;</td>
      <td class="hidden">Identifier of class causing the error</td>
    </tr>
  </table></p>

  <h4>Remarks</h4>
  <ul>
    <li>The macros are defined in <code>dlp_object.h</code>.</li>
    <li><code>IERROR</code> "returns" the error code, so you can use it
      like this:<pre class="code">

  return IERROR(_this,ERR_NOMEM,0,0,0);
      </pre></li>
  </ul>
END_MAN

NOTE:    -- ICREATE, ICREATEEX and IDESTROY
COMMENT: Describes universal instanciation and deinstanciation macros.
/html MAN:
  <p>TODO: write it! link it!</p>
END_MAN

NOTE:    -- CHECK_THIS, CHECK_THIS_RV and CHECK_IPTR
COMMENT: Describes universal instance pointer validation macros.
/html MAN:
  <p>TODO: write it! link it!</p>
END_MAN

NOTE:    -- CREATEVIRTUAL and DESTROYVIRTUAL
COMMENT: Describes the proper handling identical input and output instances of methods.
/html MAN:
  <p>TODO: write it! link it!</p>
END_MAN

NOTE:    -- DLPTRHOW and DLPCATCH
COMMENT: Exception mimicking macros.
/html MAN:
  <h4><code>DLPTRHOW(A)</code></h4>
  <p>Jumps to a label defined by the macro <code>DLPCATCH(A)</code> (same
  argument <code>A</code>!). <code>A</code> is usually an error code. The
  macro displays an exception error (<code>ERR_EXCEPTION</code>) unless
  <code>A</code> is <code>NOT_EXEC</code>. The latter case is a "silent"
  exception.</p>

  <h4><code>DLPCATCH(A)</code></h4>
  <p>Defines a jump label (<code>L_##A</code>) to which program may jump
  using the <code>DLPTHROW(A)</code> macro.</p>

  <h4>Parameters</h4>
  <p><table>
    <tr>
      <td class="hidden">&nbsp;&nbsp;&nbsp;</td>
      <td class="hidden"><code><b>A</b></code></td>
      <td class="hidden">&nbsp;&nbsp;&nbsp;</td>
      <td class="hidden">Exception code, usually an error code.</td>
    </tr>
  </table></p>

  <h4>Remarks</h4>
  <ul>
    <li>Because of the implementation as
    <code>label</code>/<code>goto</code>, <code>DLPTHROW</code> and
    <code>DLPCATCH</code> may only be used <em>within</em> a function
    or method.</li>
  </ul>
END_MAN

NOTE:    -- ISETFIELD and IFIELD_RESET
COMMENT: Describes universal field setting mecros.
/html MAN:
  <p>TODO: write it! link it!</p>
END_MAN

NOTE:    -- ISETOPTION and IRESETOPTIONS
COMMENT: Describes universal option setting mecros.
/html MAN:
  <p>TODO: write it! link it!</p>
END_MAN

## Generate files
-cgen
quit

## EOF
