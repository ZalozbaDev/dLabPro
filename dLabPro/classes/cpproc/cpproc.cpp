// dLabPro class CCPproc (CPproc)
// - Cepstrum class based on FBAproc
//
// AUTHOR : Matthias Eichner
// PACKAGE: dLabPro/classes
//
// This file was generated by dcg. DO NOT MODIFY! Modify cpproc.def instead.
// 
// Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
// - Chair of System Theory and Speech Technology, TU Dresden
// - Chair of Communications Engineering, BTU Cottbus
// 
// This file is part of dLabPro.
// 
// dLabPro is free software: you can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License as published by the Free
// Software Foundation, either version 3 of the License, or (at your option)
// any later version.
// 
// dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
// details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with dLabPro. If not, see <http://www.gnu.org/licenses/>.


//{{CGEN_INCLUDE
//}}CGEN_END
#include "dlp_cpproc.h"

// Class CCPproc

CCPproc::CCPproc(const char* lpInstanceName, BOOL bCallVirtual) : inherited(lpInstanceName,0)
{
	DEBUGMSG(-1,"CCPproc::CCPproc; (bCallVirtual=%d)",(int)bCallVirtual,0,0);
	dlp_strcpy(m_lpClassName,"CPproc");
	dlp_strcpy(m_lpObsoleteName,"");
	dlp_strcpy(m_lpProjectName,"CPproc");
	dlp_strcpy(m_version.no,"1.0 DLP");
	dlp_strcpy(m_version.date,"");
	m_nClStyle = CS_AUTOACTIVATE;

	if (bCallVirtual)
	{
		DLPASSERT(OK(AutoRegisterWords()));
		Init(TRUE);
	}
}

CCPproc::~CCPproc()
{
  //{{CGEN_DONECODE
  DONE;
  //}}CGEN_DONECODE
}

INT16 CCPproc::AutoRegisterWords()
{
	DEBUGMSG(-1,"CCPproc::AutoRegisterWords",0,0,0);
	IF_NOK(inherited::AutoRegisterWords()) return NOT_EXEC;

	//{{CGEN_REGISTERWORDS
	REGISTER_METHOD("-analyze","",LPMF(CCPproc,OnAnalyze),"Run cepstral analysis.",0,"<data idSignal> <data idPitch> <data idReal> <data idImag> <CPproc this>","")
	REGISTER_METHOD("-dequantize","",LPMF(CCPproc,Dequantize),"This is the inverse of -quantize.",0,"<data idFea> <int first> <int count> <int bitwidth> <CPproc this>","")
	REGISTER_METHOD("-quantize","",LPMF(CCPproc,Quantize),"Feature dependent quantization for (lossy) converting to fixpoint type of specified bit width.",0,"<data idFea> <int first> <int count> <int bitwidth> <CPproc this>","")
	REGISTER_METHOD("-status","",LPMF(CCPproc,Status),"Display status information.",0,"<CPproc this>","")
	REGISTER_FIELD("warptype","",LPMV(m_lpsWarptype),NULL,"Type of cepstral warping.",0,255,255,"char[255]","none")
	REGISTER_ERROR("~e8_1_0__1",EL_ERROR,CP_WARPTYPE,"Warp type %s is not applicable to the desired analysis type.")
	//}}CGEN_REGISTERWORDS

	return O_K;
}

INT16 CCPproc::Init(BOOL bCallVirtual)
{
	DEBUGMSG(-1,"CCPproc::Init, (bCallVirtual=%d)",(int)bCallVirtual,0,0);
	//{{CGEN_INITCODE
  INIT;
	//}}CGEN_INITCODE

	// If last derivation call reset (do not reset members; already done by Init())
	if (bCallVirtual) return Reset(FALSE);
	else              return O_K;
}

INT16 CCPproc::Reset(BOOL bResetMembers)
{
	DEBUGMSG(-1,"CCPproc::Reset; (bResetMembers=%d)",(int)bResetMembers,0,0);
	//{{CGEN_RESETCODE
  return RESET;
	//}}CGEN_RESETCODE

	return O_K;
}

INT16 CCPproc::ClassProc()
{
	//{{CGEN_CLASSCODE
  return CLASSPROC;
	//}}CGEN_CLASSCODE

	return O_K;
}

#define CODE_DN3 /* check this for xml specific save code */
#define SAVE  SAVE_DN3
INT16 CCPproc::Serialize(CDN3Stream* lpDest)
{
	//{{CGEN_SAVECODE
  return SAVE;
	//}}CGEN_SAVECODE

	return O_K;
}
#undef  SAVE
#undef  CODE_DN3

#define CODE_XML /* check this for xml specific save code */
#define SAVE  SAVE_XML
INT16 CCPproc::SerializeXml(CXmlStream* lpDest)
{
	//{{CGEN_SAVECODE
  return SAVE;
	//}}CGEN_SAVECODE

	return O_K;
}
#undef  SAVE
#undef  CODE_XML

#define CODE_DN3 /* check this for dn3 specific restore code */
#define RESTORE  RESTORE_DN3
INT16 CCPproc::Deserialize(CDN3Stream* lpSrc)
{
	//{{CGEN_RESTORECODE
  return RESTORE;
	//}}CGEN_RESTORECODE

	return O_K;
}
#undef  RESTORE
#undef  CODE_DN3

#define CODE_XML /* check this for xml specific restore code */
#define RESTORE  RESTORE_XML
INT16 CCPproc::DeserializeXml(CXmlStream* lpSrc)
{
	//{{CGEN_RESTORECODE
  return RESTORE;
	//}}CGEN_RESTORECODE

	return O_K;
}
#undef  RESTORE
#undef  CODE_XML

INT16 CCPproc::Copy(CDlpObject* __iSrc)
{
	//{{CGEN_COPYCODE
  return COPY;
	//}}CGEN_COPYCODE

	return O_K;
}

// Runtime class type information and class factory
INT16 CCPproc::InstallProc(void* lpItp)
{
	//{{CGEN_INSTALLCODE
  return INSTALL;
	//}}CGEN_INSTALLCODE

	return O_K;
}

CCPproc* CCPproc::CreateInstance(const char* lpName)
{
	CCPproc* lpNewInstance;
	ICREATEEX(CCPproc,lpNewInstance,lpName,NULL);
	return lpNewInstance;
}

INT16 CCPproc::GetClassInfo(SWord* lpClassWord)
{
	if (!lpClassWord) return NOT_EXEC;
	dlp_memset(lpClassWord,0,sizeof(SWord));

	lpClassWord->nWordType          = WL_TYPE_FACTORY;
	lpClassWord->nFlags             = CS_AUTOACTIVATE;
	lpClassWord->ex.fct.lpfFactory  = (LP_FACTORY_PROC)CCPproc::CreateInstance;
	lpClassWord->ex.fct.lpfInstall  = CCPproc::InstallProc;
	lpClassWord->ex.fct.lpProject   = "CPproc";
	lpClassWord->ex.fct.lpBaseClass = "MELproc";
	lpClassWord->lpComment          = "Cepstrum class based on FBAproc";
	lpClassWord->ex.fct.lpAutoname  = "";
	lpClassWord->ex.fct.lpCname     = "CCPproc";
	lpClassWord->ex.fct.lpAuthor    = "Matthias Eichner";

	dlp_strcpy(lpClassWord->lpName             ,"CPproc");
	dlp_strcpy(lpClassWord->lpObsname          ,"");
	dlp_strcpy(lpClassWord->ex.fct.version.no  ,"1.0 DLP");

	return O_K;
}

INT16 CCPproc::GetInstanceInfo(SWord* lpClassWord)
{
	return CCPproc::GetClassInfo(lpClassWord);
}

BOOL CCPproc::IsKindOf(const char* lpClassName)
{
  if (dlp_strncmp(lpClassName,"CPproc",L_NAMES) == 0) return TRUE;
  else return inherited::IsKindOf(lpClassName);
}

INT16 CCPproc::ResetAllOptions(BOOL bInit)
{
	DEBUGMSG(-1,"CCPproc::ResetAllOptions;",0,0,0);
	//{{CGEN_RESETALLOPTIONS
	//}}CGEN_RESETALLOPTIONS

	return inherited::ResetAllOptions(bInit);
}

// Generated primary method invocation functions

#ifndef __NOITP
//{{CGEN_PMIC
INT16 CCPproc::OnAnalyze()
/* DO NOT CALL THIS FUNCTION FROM C++ SCOPE.     */
/* IT MAY INTERFERE WITH THE INTERPRETER SESSION */
{
	INT16 __nErr    = O_K;
	INT32  __nErrCnt = 0;
	MIC_CHECK;
	__nErrCnt = CDlpObject_GetErrorCount();
	data* idImag = MIC_GET_I_EX(idImag,data,1,1);
	data* idReal = MIC_GET_I_EX(idReal,data,2,2);
	data* idPitch = MIC_GET_I_EX(idPitch,data,3,3);
	data* idSignal = MIC_GET_I_EX(idSignal,data,4,4);
	if (CDlpObject_GetErrorCount()>__nErrCnt) return NOT_EXEC;
	__nErr = Analyze(idSignal, idPitch, idReal, idImag);
	return __nErr;
}

//}}CGEN_PMIC
#endif /* #ifndef __NOITP */


// Generated secondary method invocation functions

//{{CGEN_SMIC
INT16 CCPproc::Dequantize()
{
    INT16 __nErr = O_K;
    INT32 nQuant;
    INT32 nFirst;
    INT32 nCount;
    CData* idFea;
    CData* idRes;
    MIC_CHECK;
    nQuant = (INT32)MIC_GET_N(1,0);
    nCount = (INT32)MIC_GET_N(2,1);
    nFirst = (INT32)MIC_GET_N(3,2);
    idFea =  (CData*)MIC_GET_I_EX(idFea,data,4,3);
    ICREATEEX(CData,idRes,"#TMP#-dequantize",NULL);
    __nErr = DequantizeImpl(idFea, nFirst, nCount, nQuant, idRes);
    MIC_PUT_I(BASEINST(idRes));
    return __nErr;
	return O_K;
}

INT16 CCPproc::Quantize()
{
    INT16 __nErr = O_K;
    INT32 nQuant;
    INT32 nFirst;
    INT32 nCount;
    CData* idFea;
    CData* idRes;
    MIC_CHECK;
    nQuant = (INT32)MIC_GET_N(1,0);
    nCount = (INT32)MIC_GET_N(2,1);
    nFirst = (INT32)MIC_GET_N(3,2);
    idFea =  (CData*)MIC_GET_I_EX(idFea,data,4,3);
    ICREATEEX(CData,idRes,"#TMP#-quantize",NULL);
    __nErr = QuantizeImpl(idFea, nFirst, nCount, nQuant, idRes);
    MIC_PUT_I(BASEINST(idRes));
    return __nErr;
	return O_K;
}

//}}CGEN_SMIC


// Generated option change callback functions

//{{CGEN_OCCF
//}}CGEN_OCCF


// Generated field change callback functions

//{{CGEN_FCCF
//}}CGEN_FCCF


// EOF
