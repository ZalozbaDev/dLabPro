## dLabPro class CLCQproc (LCQproc)
## - Definition script
##
## AUTHOR : Guntram Strecha
## PACKAGE: dLabPro/classes
## 
## Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
## - Chair of System Theory and Speech Technology, TU Dresden
## - Chair of Communications Engineering, BTU Cottbus
## 
## This file is part of dLabPro.
## 
## dLabPro is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
## 
## dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
## 
## You should have received a copy of the GNU Lesser General Public License
## along with dLabPro. If not, see <http://www.gnu.org/licenses/>.

PLATFORM: GNUC++
COMPILER: gcc
AR:       ar

PROJECT:  LCQproc
COMMENT:  Line cepstral quefrencies (LCQ) analysis and synthesis
AUTHOR:   Guntram Strecha
VERSION:  1.0 DLP

CLASS:    LCQproc
SUPERCLASS: ../cpproc/cpproc.def
/cxx_nconv

/html MAN:
      <p>This class is derived from class CPproc.<p>
      <p>LCQproc is for converting (Mel-)Cepstrum to Line Cepstral Quenfrencies (LCQ)<p>
END_MAN

######################################################################
# Files and locations

INCLUDE: "dlp_data.h"

FILE:     lcq_work.cpp
FILE:     lcq_synt.cpp
FILE:     lcq_stat.cpp

######################################################################
## Header Code

######################################################################
# ERROR codes

ERROR:   ERR_N_ROOTS_UNSTABLE
COMMENT: %d roots were stabilised.
LEVEL:   EL_WARNING

ERROR:   ERR_POLY_UNSTABLE
COMMENT: Polynome is unstable.
LEVEL:   EL_WARNING

########################################################################
# Fields

######################################################################
# Options

OPTION:  /syn_lcq
COMMENT: Synthesis chronology: (m)lcq->signal.

OPTION:  /syn_cep_lcq
COMMENT: Synthesis chronology: lcq->(via expand)->cepstrum->signal

OPTION:  /syn_cep_lcq_filt
COMMENT: Synthesis chronology: lcq->(via filter)->cepstrum->signal.

OPTION:  /syn_cep_mlcq
COMMENT: Synthesis chronology: mlcq->(via expand)->mcepstrum->cepstrum->signal.

OPTION:  /syn_cep_mlcq_filt
COMMENT: Synthesis chronology: mlcq->(via filter)->cepstrum->signal.

OPTION:  /syn_mcep_mlcq
COMMENT: Synthesis chronology: mlcq->(via expand)->mcepstrum->signal.

OPTION:  /syn_mcep_mlcq_filt
COMMENT: Synthesis chronology: mlcq->(via filter)->mcepstrum->signal.

######################################################################
# Methods

METHOD:  -analyze
COMMENT: Run LCQ analysis.
SYNTAX:  (data idSignal, data idPitch, data idReal, data idImag)
MAN:
         Runs the analysis. Instance dSignal contains the signal
         to analyse in the first component. The first alpha numeric
         component (if exist) is used as label component. In case 
         of pitch synchronuous analysis dPitch contains the pitch 
         information. dPitch must have two numeric components. The
         and as many records as signal periods in dSignal. The first
         component contains the lenght of the period in samples, the 
         second contains the voiced/unvoiced information 
         (1-voiced/0-unvoiced).
         If dPitch is omitted pitch asynchronuous analysis is performed.
END_MAN

METHOD:  -status
COMMENT: Display status information.
SYNTAX:  ()

######################################################################
# System functions

## Generate files
-cgen
quit

## EOF
