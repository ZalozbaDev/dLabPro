## dLabPro class CVar (var)
## - Definition file
##
## AUTHOR : Christian-M. Westendorf, Matthias Wolff
## PACKAGE: dLabPro/classes
## 
## Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
## - Chair of System Theory and Speech Technology, TU Dresden
## - Chair of Communications Engineering, BTU Cottbus
## 
## This file is part of dLabPro.
## 
## dLabPro is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
## 
## dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
## 
## You should have received a copy of the GNU Lesser General Public License
## along with dLabPro. If not, see <http://www.gnu.org/licenses/>.

PLATFORM: GNUC++
COMPILER: gcc
AR:       ar
CFLAGS:   -Wno-trigraphs

/cxx_nconv
/no_idcheck
/cProject
PROJECT: var
COMMENT: Variable
AUTHOR:  Christian-M. Westendorf, Matthias Wolff
VERSION: 2.5.1

CLASS: var
FLAGS: /secondary

/html MAN:
  <p>Instances of the class <code>var</code> hold variable values of different types. The type of a variable depends on
  the set operation ({@link =}, {@link -bset}, {@link -vset}, {@link -sset}, {@link -iset}) which was used to assign
  the variable value. A special type are random variables which may be of numeric or symbolic type. Interpretation of
  the variable's identifier leaves its current value on the stack:</p>
  <ul>
    <li>numeric determinstic or random variables leave a double value on the stack</li>
  <li>symbolic determinstic or random variables leave a string on the stack</li>
  </ul>

  <h4>Example:</h4>
  <pre class="code">

  var i;                      <span class="c-cmt"># Create a variable</span>
  42 var j;                   <span class="c-cmt"># Create and initialize a numeric variable</span>
  var s1;                     <span class="c-cmt"># Create a variable</span>
  "foo" var s2;               <span class="c-cmt"># Create and initialize a string variable</span>

  5 i {@link -vset};                  <span class="c-cmt"># Set i to 2</span>
  i j {@link -=};                     <span class="c-cmt"># Subtract i from j</span>
  j 3 + j {@link =};                  <span class="c-cmt"># Calculate j+3 and store result in j</span>  
  j {@link ++=};                      <span class="c-cmt"># Increment j</span>

  "bar" s1 {@link =};                 <span class="c-cmt"># Set s1 to "bar"</span>
  s1 s2 {@link +=};                   <span class="c-cmt"># Concatenate s1 to s2</span>

  s2 {@link -status};                 <span class="c-cmt"># Display s2 (should be "foobar")</span>
  "\nj+1 = \${j+1}" <a href="function.html#mth_-echo"><code class="link">-echo</code></a>;     <span class="c-cmt"># Display j+1 (should be 42)</span>
  </pre>
END_MAN

INCLUDE:  "dlp_data.h"
PINCLUDE: <time.h>
FILE:     var_impl.c

## Defines
DEFINE:  T_RDOUBLE 13008
DEFINE:  T_RDDATA  20000
DEFINE:  T_RSDATA  20001

## Errors
ERROR:   VAR_NOTSUPPORTED
COMMENT: %s not supported%s.
/html MAN:
  <h4>"Polymorphic signatures not supported by method caller."</h4>
  <p>Some methods (like {@link =}, {@link ++=}, {@link +=}, etc.) are not supported in dLabPro 2.4 compatibility mode.</p>
  <h4>"Operator XXX not supported for this variable type."</h4>
  <p>Some methods (like {@link ++=}, {@link *=}, etc.) are not supported for all variable types.</p>
END_MAN

## Hidden fields - variable contents
FIELD:   b_val
TYPE:    short                                                                  # bool will not serialize to DN3!
CNAME:   m_bBVal
FLAGS:   /hidden /noset

FIELD:   n_val
TYPE:    complex
FLAGS:   /hidden /noset

FIELD:   s_val
TYPE:    string
FLAGS:   /hidden /noset

## Hidden fields - Randomized numeric variables defined as intervals
FIELD:   low
TYPE:    double
FLAGS:   /hidden /noset

FIELD:   hi
TYPE:    double
FLAGS:   /hidden /noset

FIELD:   delta
TYPE:    double
FLAGS:   /hidden /noset

## Hidden fields - Randomized selections from sets
FIELD:   rnd_set
TYPE:    data
FLAGS:   /hidden /noset

FIELD:   icomp
TYPE:    int
FLAGS:   /hidden /noset

FIELD:   ind
TYPE:    int
FLAGS:   /hidden /noset

FIELD:   set_size
TYPE:    int
FLAGS:   /hidden /noset

FIELD:   type
TYPE:    short
INIT:    T_COMPLEX
FLAGS:   /hidden /noset

FIELD:   norm
TYPE:    double
FLAGS:   /hidden /noset

## Methods
METHOD:  =
CNAME:   Set
COMMENT: Set variable value
SYNTAX:  "<value> <var this>"
/html MAN:
  <p>Stores <code>value</code> in the variable.</p>
  <h4>Applies to</h4>
  <p class="indent"><table>
    <tr><td>Logic (Boolean) variables</td><td>yes</td></tr>
    <tr><td>Numeric         variables</td><td>yes</td></tr>
    <tr><td>String          variables</td><td>yes</td></tr>
    <tr><td>Instance        variables</td><td>yes</td></tr>
  </table></p>
END_MAN
CODE:
  MIC_CHECK;
  CVar_PopOwnValue(_this);
  return CVar_SetOp(_this,"=");
END_CODE

METHOD:  +=
CNAME:   AddSet
COMMENT: Add value to variable
SYNTAX:  "<value> <var this>"
/html MAN:
  <p>Adds <code>value</code> to the variable.</p>
  <h4>Applies to</h4>
  <p class="indent"><table>
    <tr><td>Logic (Boolean) variables</td><td>yes (logical or)</td></tr>
    <tr><td>Numeric         variables</td><td>yes</td></tr>
    <tr><td>String          variables</td><td>yes (string concatenation)</td></tr>
    <tr><td>Instance        variables</td><td>no </td></tr>
  </table></p>
END_MAN
CODE:
  MIC_CHECK;
  CVar_PopOwnValue(_this);
  return CVar_SetOp(_this,"+=");
END_CODE

METHOD:  -=
CNAME:   SubtractSet
COMMENT: Subtract value from variable
SYNTAX:  "<value> <var this>"
/html MAN:
  <p>Subtracts <code>value</code> from the variable.</p>
  <h4>Applies to</h4>
  <p class="indent"><table>
    <tr><td>Logic (Boolean) variables</td><td>no </td></tr>
    <tr><td>Numeric         variables</td><td>yes</td></tr>
    <tr><td>String          variables</td><td>no </td></tr>
    <tr><td>Instance        variables</td><td>no </td></tr>
  </table></p>
END_MAN
CODE:
  MIC_CHECK;
  CVar_PopOwnValue(_this);
  return CVar_SetOp(_this,"-=");
END_CODE

METHOD:  *=
CNAME:   MultiplySet
COMMENT: Multiply variable with value
SYNTAX:  "<value> <var this>"
/html MAN:
  <p>Multiples the variable with <code>value</code>.</p>
  <h4>Applies to</h4>
  <p class="indent"><table>
    <tr><td>Logic (Boolean) variables</td><td>yes (logical and)</td></tr>
    <tr><td>Numeric         variables</td><td>yes</td></tr>
    <tr><td>String          variables</td><td>no </td></tr>
    <tr><td>Instance        variables</td><td>no </td></tr>
  </table></p>
END_MAN
CODE:
  MIC_CHECK;
  CVar_PopOwnValue(_this);
  return CVar_SetOp(_this,"*=");
END_CODE

METHOD:  /=
CNAME:   DivideSet
COMMENT: Divide variable by value
SYNTAX:  "<value> <var this>"
/html MAN:
  <p>Divides the variable by <code>value</code>.</p>
  <h4>Applies to</h4>
  <p class="indent"><table>
    <tr><td>Logic (Boolean) variables</td><td>no </td></tr>
    <tr><td>Numeric         variables</td><td>yes</td></tr>
    <tr><td>String          variables</td><td>no </td></tr>
    <tr><td>Instance        variables</td><td>no </td></tr>
  </table></p>
END_MAN
CODE:
  MIC_CHECK;
  CVar_PopOwnValue(_this);
  return CVar_SetOp(_this,"/=");
END_CODE

METHOD:  ++=
CNAME:   IncrementSet
COMMENT: Increment variable
SYNTAX:  "<var this>"
/html MAN:
  <p>Increments the variable.</p>
  <h4>Applies to</h4>
  <p class="indent"><table>
    <tr><td>Logic (Boolean) variables</td><td>no </td></tr>
    <tr><td>Numeric         variables</td><td>yes</td></tr>
    <tr><td>String          variables</td><td>no </td></tr>
    <tr><td>Instance        variables</td><td>no </td></tr>
  </table></p>
END_MAN
CODE:
  MIC_CHECK;
  CVar_PopOwnValue(_this);
  return CVar_SetOp(_this,"++=");
END_CODE

METHOD:  --=
CNAME:   DecrementSet
COMMENT: Decrement variable
SYNTAX:  "<var this>"
/html MAN:
  <p>Decrements the variable.</p>
  <h4>Applies to</h4>
  <p class="indent"><table>
    <tr><td>Logic (Boolean) variables</td><td>no </td></tr>
    <tr><td>Numeric         variables</td><td>yes</td></tr>
    <tr><td>String          variables</td><td>no </td></tr>
    <tr><td>Instance        variables</td><td>no </td></tr>
  </table></p>
END_MAN
CODE:
  MIC_CHECK;
  CVar_PopOwnValue(_this);
  return CVar_SetOp(_this,"--=");
END_CODE

METHOD:  -bset
COMMENT: Set boolean value
SYNTAX:  (boolean bVal)
/html MAN:
  <p>This method sets the variable to the boolean value <code>bVal</code>.
  After this operation the type of the variable will be boolean. <code
  >bVal</code> is stored as double number and removed from the stack.</p>

  <h4>Example:</h4>
  <pre class="code">

  var bErr;
  <a href="function.html#mth__error"><code class="link">?error</code></a> bErr -bset;
  </pre>

  @see -vset
  @see -sset
  @see -iset
END_MAN
/primary CODE:
	GET_THIS_VIRTUAL_RV(CVar,NOT_EXEC);
  MIC_CHECK;
  CVar_PopOwnValue(_this);
  BOOL bVal = MIC_GET_B(1,0);
  return CVar_Bset(_this,bVal);
END_CODE
CODE:
  dlp_free(_this->m_lpsSVal);
  _this->m_lpsSVal    = NULL;
  BASEINST(_this)->m_iAliasInst = NULL;
  _this->m_nType      = T_BOOL;
  _this->m_bBVal      = bVal;
END_CODE

METHOD:   -vset
OBSOLETE: vset
COMMENT:  Set numeric value
SYNTAX:   (complex nVal)
/html MAN:
  <p>This method sets the variable to the numeric value <code>nVal</code>.
  After this operation the type of the variable will be numeric. <code
  >bVal</code> is stored as double number and removed from the stack.</p>

  <h4>Example:</h4>
  <pre class="code">

  var d1;
  -42. d1 -vset;
  </pre>

  <p><code>d1</code> will have the numeric value -42. If the identifier
  <code>d1</code> is interpreted by dLabPro, it will leave its value on
  the stack.</p>

  @see -bset
  @see -sset
  @see -iset
END_MAN
/primary CODE:
	GET_THIS_VIRTUAL_RV(CVar,NOT_EXEC);
  MIC_CHECK;
  CVar_PopOwnValue(_this);
  COMPLEX64 nVal = MIC_GET_C(1,0);
  return CVar_Vset(_this,nVal);
END_CODE
CODE:
  dlp_free(_this->m_lpsSVal);
  _this->m_lpsSVal    = NULL;
  BASEINST(_this)->m_iAliasInst = NULL;
  _this->m_nType      = T_COMPLEX;
  _this->m_nNVal      = nVal;
END_CODE

METHOD:   -sset
OBSOLETE: sset
COMMENT:  Set string value
SYNTAX:   (string sVal)
/html MAN:
  <p>This method stores the string <code>sVal</code> into the variable.
  After this operation the variable will be of type string.</p>

  <h4>Example:</h4>
  <pre class="code">

  var s1;
  "foo" s1 -sset;
  </pre>
  
  If the identifier <code>s1</code> is interpreted by dLabPro, it
  will leave its value on the stack.</p>

  @see -bset
  @see -vset
  @see -iset
END_MAN
/primary CODE:
	GET_THIS_VIRTUAL_RV(CVar,NOT_EXEC);
  MIC_CHECK;
  CVar_PopOwnValue(_this);
  char* sVal = MIC_GET_S(1,0);
  return CVar_Sset(_this,sVal);
END_CODE
CODE:  
  dlp_free(_this->m_lpsSVal);
  BASEINST(_this)->m_iAliasInst = NULL;
  _this->m_nType      = T_STRING;
  _this->m_lpsSVal    = (char*)dlp_calloc(dlp_strlen(sVal)+1,sizeof(char));
  dlp_strcpy(_this->m_lpsSVal,sVal);
END_CODE

METHOD:   -iset
OBSOLETE: iset
COMMENT:  Set instance value
SYNTAX:   (INSTANCE() iVal)
/html MAN:
  <p>This method stores a reference to the instance <code>iVal</code> into the
  variable. After this operation the variable will be of type instance.</p>

  <h4>Example:</h4>
  <pre class="code">

  data x;
  var i;
  x i -iset;
  </pre>
  
  If the identifier <code>i</code> is interpreted by dLabPro, it
  will leave its value on the stack.</p>

  @see -bset
  @see -vset
  @see -sset
END_MAN
/primary CODE:
	GET_THIS_VIRTUAL_RV(CVar,NOT_EXEC);
  MIC_CHECK;
  CVar_PopOwnValue(_this);
  CDlpObject* iVal = MIC_GET_I(1,1);
  return CVar_Iset(_this,iVal);
END_CODE
CODE:  
  dlp_free(_this->m_lpsSVal);
  _this->m_lpsSVal    = NULL;
  _this->m_nType      = T_INSTANCE;
  BASEINST(_this)->m_iAliasInst = iVal;
END_CODE

METHOD:  -intv
COMMENT: Define interval for randomized selection.
SYNTAX:  (double nLow, double nHi, double nDelta)
/html MAN:
  <p>This method assigns an interval (<code>nLow</code>,<code>nHi</code>) with stepsize <code>nDelta</code>  to the
  variable. If the variable's identifier is interpreted, a randomized selection of a value from this interval
  (including the borders) takes place. The selected value is pushed to the stack.</p>

  <h4>Example:</h4>
  <pre class="code">

  var r1;
  0 10 0.25 r1 {@link -intv};

  0 var i; i 10 < <a href="function.html#mth_while"><code class="link">while</code></a>
    r1 <a href="function.html#mth_-echo"><code class="link">-echo</code></a>;
    "\n" <a href="function.html#mth_-echo"><code class="link">-echo</code></a>;
    i {@link ++=};
  <a href="function.html#mth_end"><code class="link">end</code></a>
  </pre>

  <p><code>r1</code> represents the random interval 0 .. 10 (including the
  borders). If <code>r1</code> is interpreted, one of the numbers 0 through
  10 is selected and left on the stack.</p>
END_MAN 
/primary CODE:
	GET_THIS_VIRTUAL_RV(CVar,NOT_EXEC);
  MIC_CHECK;
  CVar_PopOwnValue(_this);
  FLOAT64 nDelta = MIC_GET_N(1,0);
  FLOAT64 nHi = MIC_GET_N(2,1);
  FLOAT64 nLow = MIC_GET_N(3,2);
  return CVar_Intv(_this,nLow, nHi, nDelta);
END_CODE
CODE:
  dlp_free(_this->m_lpsSVal);
  _this->m_lpsSVal  = NULL;
  _this->m_nLow     = nLow;
  _this->m_nHi      = nHi;
  _this->m_nDelta   = nDelta;
  _this->m_nType    = T_RDOUBLE;
  _this->m_nSetSize = (INT32)((nHi-nLow)/nDelta)+1;
  _this->m_nNorm    = (FLOAT64)RAND_MAX/(FLOAT64)_this->m_nSetSize;
END_CODE

METHOD:  -rset
COMMENT: Assign data instance for randomized selection
SYNTAX:  (data idRndSet, int nIc)
/html MAN:
  <p>This command assigns a data instance <code>idRndSet</code> and a component index <code>nIc</code> to the variable.
  If the variable identifier is interpreted, a randomized selection of a value from this component takes place. The
  value is left on the stack.</p>

  <h4>Example:</h4>
  <pre class="code">  

  <a href="data.html"><code class="link">data</code></a> idRndSet;
  <a href="function.html#mth_-type"><code class="link">-type</code></a> long 1 5 idRndSet <a href="data.html#mth_-array"><code class="link">-array</code></a> <a href="data.html#mth_{"><code class="link">{</code></a> 11 22 33 44 55 };

  var s1;
  idRndSet 0 s1 {@link -rset};

  0 var i; i 10 < <a href="function.html#mth_while"><code class="link">while</code></a>
    s1 <a href="function.html#mth_-echo"><code class="link">-echo</code></a>;
    "\n" <a href="function.html#mth_-echo"><code class="link">-echo</code></a>;
    i {@link ++=};
  <a href="function.html#mth_end"><code class="link">end</code></a>
  </pre>

  <p>If <code>s1</code> is interpreted, a rondomized selection from the number set 11, 22, 33, 44, 55 takes place. One
  of this values is left on the stack.</p>
END_MAN
/primary CODE:
	GET_THIS_VIRTUAL_RV(CVar,NOT_EXEC);
  MIC_CHECK;
  CVar_PopOwnValue(_this);
  INT32 nIc = (INT32)MIC_GET_N(1,0);
  data* idRndSet = MIC_GET_I_EX(idRndSet,data,2,1);
  return CVar_Rset(_this,idRndSet, nIc);
END_CODE
CODE:
  if (!idRndSet) return NOT_EXEC;
  if (nIc>=CData_GetNComps(idRndSet)) return NOT_EXEC;
  dlp_free(_this->m_lpsSVal);
  _this->m_lpsSVal  = NULL;
  _this->m_nIcomp   = nIc;
  _this->m_idRndSet = BASEINST(idRndSet);
  _this->m_nSetSize = CData_GetNRecs(idRndSet);
  _this->m_nNorm    = (FLOAT64)RAND_MAX/(FLOAT64)_this->m_nSetSize;
  _this->m_nType    = T_RDDATA;
  if (CData_GetCompType(idRndSet,nIc)<256) _this->m_nType = T_RSDATA;
END_CODE

METHOD:  -status
COMMENT: Print status of var
SYNTAX:  ()
MAN:
  Print a status information of variable.
END_MAN

## dLabPro interface code
CLASSCODE:
  CVar_Exec(_this);
  CLASSPROC;
END_CODE

SAVECODE:
  SAVE;
  if (_this->m_nType==T_INSTANCE)
  {
    char sBuf[255];
    sprintf(sBuf,"Cannot serialize instance variables (%s).",BASEINST(_this)->m_lpInstanceName);
    IERROR(_this,ERR_GENERIC,sBuf,0,0);
  }
END_CODE

RESTORECODE:
  RESTORE;
  if (_this->m_nType==T_INSTANCE)
  {
    char sBuf[255];
    sprintf(sBuf,"Cannot deserialize instance variables (%s).",BASEINST(_this)->m_lpInstanceName);
    IERROR(_this,ERR_GENERIC,sBuf,0,0);
  }
END_CODE

RESETCODE:
  RESET;
END_CODE
## Generate and quit
-cgen
quit

## EOF
