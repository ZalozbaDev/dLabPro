## dLabPro class CData (data)
## - Manual pages
##
## AUTHOR : Guntram Strecha, Matthias Wolff
## PACKAGE: dLabPro/classes
## 
## Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
## - Chair of System Theory and Speech Technology, TU Dresden
## - Chair of Communications Engineering, BTU Cottbus
## 
## This file is part of dLabPro.
## 
## dLabPro is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
## 
## dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
## 
## You should have received a copy of the GNU Lesser General Public License
## along with dLabPro. If not, see <http://www.gnu.org/licenses/>.

## Methods
/append METHOD: -addcomp
/html MAN:     
  <p>Adds a component named <code>sName</code> of type <code>nType</code> to component list. The type of a component
  may be specified trough the <a href="itp.html#mth_type"><code class="link">type</code></a> method of class <a
  href="itp.html"><code>itp</code></a> as follows:</p>

<pre class="code">

  <a href="itp.html#mth_type"><code class="link">type</code></a> bool      <span class="c-cmt"># boolean</span>
  <a href="itp.html#mth_type"><code class="link">type</code></a> char      <span class="c-cmt"># signed character</span>
  <a href="itp.html#mth_type"><code class="link">type</code></a> uchar     <span class="c-cmt"># unsigned character</span>
  <a href="itp.html#mth_type"><code class="link">type</code></a> short     <span class="c-cmt"># signed short</span>
  <a href="itp.html#mth_type"><code class="link">type</code></a> ushort    <span class="c-cmt"># unsigned short</span>
  <a href="itp.html#mth_type"><code class="link">type</code></a> int       <span class="c-cmt"># (signed) int</span>
  <a href="itp.html#mth_type"><code class="link">type</code></a> long      <span class="c-cmt"># signed long</span>
  <a href="itp.html#mth_type"><code class="link">type</code></a> ulong     <span class="c-cmt"># unsigned long</span>
  <a href="itp.html#mth_type"><code class="link">type</code></a> float     <span class="c-cmt"># float</span>
  <a href="itp.html#mth_type"><code class="link">type</code></a> double    <span class="c-cmt"># double</span>
  <a href="itp.html#mth_type"><code class="link">type</code></a> char[n]   <span class="c-cmt"># string of length n (1 &le; n &le; 256)</span>

</pre>

  <p>If a number 1 &le; <code>nType</code> &le; 256 is used as type specification, a (string) record component of length
  <code>nType</code> is created.</p>
  <p>If there are records allocated <code>-addcomp</code> re-allocates records for the new component and leave old
  components untouched.</p>

  <h3 style="color:red">Important Note</h3>
  <p>The component name may consist of maximal 4 characters.</p>

  <h3>Example</h3>
<pre class="code">

  <span class="c-key">data</span> x
  "s1" <a href="itp.html#mth_type"><code class="link">type</code></a> short  x <span class="c-key">-addcomp</span>
  "f1" <a href="itp.html#mth_type"><code class="link">type</code></a> double x <span class="c-key">-addcomp</span>
  "c1" 4           x <span class="c-key">-addcomp</span>
  100 x {@link -allocate}
  "ld" <a href="itp.html#mth_type"><code class="link">type</code></a> long   x <span class="c-key">-addcomp</span>

</pre>

  <p>The result will be a data instance <code>x</code> with 4 components named "s1" (type short), "f1" (type double),
  "c1" (type char[4]), "ld" (type long) and 100 allocated records.</p>

  @param sName Name of the component to add (maximal 4 characters)
  @param nType Variable type of the component to add
  @see <a href="itp.html#mth_type"><code class="link">type</code></a>
  @see -insertcomp
  @see -addncomps
  @see -allocate
  @see -set_cname
END_MAN

/append METHOD: -addncomps
/html MAN:     
  <p>Adds <code>nCount</code> unnamed record components all having the same type <code>nType</code>. The component
  type is specified as described in {@link -addcomp}.</p>
  <p>Existing records will be re-allocated after adding the  new components.</p>

  <h3>Example</h3>
<pre class="code">

  <span class="c-key">data</span> x
  <a href="itp.html#mth_type"><code class="link">type</code></a> 10 x <span class="c-key">-addncomps</span>
  100 x {@link -allocate}
  4 3 x <span class="c-key">-addncomps</span>

</pre>

  <p>defines 10 unnamed record components of type short and  3 symbolic componts having 4 characters each. The data
  instance x contains 100 allocated records.</p>

  @param nType  Variable type of the component to add
  @param nCount Number of components to add
  @see <a href="itp.html#mth_type"><code class="link">type</code></a>
  @see -addcomp
  @see -insertcomp
  @see -allocate
  @see -set_cname
END_MAN

/append METHOD: -dmark
/html MAN:
  <p>
    Depending on the mark table <code>idMark</code> the following operation is
    performed:
  </p>
  <ul>
    <li>
      Component mode: <br>
      If <code>idMark</code> has exactly one record, the <i>component j</i>
      will be marked if <code>idMark[0,j]</code> is not equal to zero.
      Otherwise the component <i>j</i> will be unmarked.
    </li>
    <li>
      Record mode:<br>
      If <code>idMark</code> has exactly one component and more than one
      record, the <i>record i</i> will be marked if <code>idMark[i,0]</code>
      is not equal to zero. Otherwise the record <i>i</i> will be unmarked.
    </li>
    <li>
      Matrix mode: <br>
      If <code>idMark</code> has more than one record and more than one
      component, the <i>cell [i,j]</i> will be marked if
      <code>idMark[i,j]</code> is not equal to zero. Otherwise the cell
      <i>[i,j]</i> will be unmarked.
    </li>
    <li>
      The method does nothing if <code>idMark</code> is <code>NULL</code> or
      empty.
    </li>
  </ul>
  <p>
    If <code>idMark</code> contains fewer components/records/cells than this
    instance, the mark status of the first <code>idMark.dim</code>/
    <code>idMark.nrec</code>/ <code>idMark.dim</code> <i>and</i>
    <code>idMark.nrec</code> components/records/cells in this instance will be
    set as described above, the remaining elements will be <i>unmarked</i>.
  </p>
  <p>
    Supernumeral components/records/cells in <code>idMark</code> will be
    ignored.
  </p>
  
  @cgen:option /comp   Force record mode (Marking according to first component)
  @cgen:option /rec    Force component mode (Marking according to first record)
  @param idMark The mark table
END_MAN

/append METHOD: -get_comp_type
/html MAN:
  <p>Returns the variable type of component <code>nComp</code>.</p>

  @param  nComp Component index
  @return A type code (<code>T_XXX</code> or 1..255), or 0 in case of errors
  @see <a href="itp.html#mth_type"><code class="link">type</code></a>
  @see -addcomp
END_MAN

/append METHOD: -insertcomp
/html MAN:
  Inserts one component of type <code>nType</code> and named <code>sName</code> at position <code>nInsertAt</code> into
  the record structure. The component type is specified as described in {@link -addcomp}. Component indices start
  counting at 0. To insert a component at the end of the record structure, set <code>nInsertAt</code> to -1 or use
  {@link -addcomp}.</p>

  <p>Existing records will be re-allocated after inserting a new component.</p>

  <h3>Example</h3>
<pre class="code">

  <span class="c-key">data</span> x
  <a href="function.html#mth_-type"><code class="link">-type</code></a> 10 x {@link -addncomps}
  100 x {@link -allocate}
  "newc" <a href="itp.html#mth_type"><code class="link">type</code></a> long 0 <span class="c-key">-insertcomp</span>

</pre>
      
  <p>Defines 10 unnamed record components of type short and  allocates 100 records. Then a new component named "newc" of
  type long is inserted as first component of the record structure.</p>

  @param sName     Name of component to add
  @param nType     Variable type of component to add
  @param nInsertAt Zero-based index of component to add
  @see <a href="function.html#mth_-type"><code class="link">-type</code></a>  
  @see -addcomp
  @see -addncomps
  @see -allocate
  @see -set_cname
END_MAN

/append METHOD: -repmat
/html MAN:
  <p>Replicates and tiles the matrix <code>idSrc</code> to produce an <code>nRecs</code>-by-<code>nComps</code> block
  matrix.<p>

  <h3>Example</h3>
<pre class="code">

  <span class="c-key">data</span> x
  <span class="c-key">data</span> y
  <a href="itp.html#mth_type"><code class="link">type</code></a> short 2 2 x {@link -array}
  { 1 2
    3 4 }

  x 2 2 y <span class="c-key">-repmat</span>

  <span class="c-cmt"># y =
  # { 1 2 1 2
  #   3 4 3 4
  #   1 2 1 2
  #   3 4 3 4 }</span>

</pre>

  @param idSrc  Source matrix
  @param nRecs  Number of records in destrination matrix
  @param nComps Number of components in destrination matrix
  @see -array
  @see -reshape
  @see -resample
END_MAN

/append METHOD: -reshape
/html MAN:
  <p>Generates a <code>nRecs</code>-by-<code>nComps</code> matrix with the elements taken componentwise from
  <code>idSrc</code>. The resulting matrix is stored as one block. The types of the components must be either all
  numerical or all symbolic, otherwise an error will occur. The number of cells in source and destination must be
  identical (<code>idSrc.nrec*iSrc.dim==nRec*nComp</code>).</p>

  <h3>Example 1</h3>
  <p class="indent">The code snippet</p>
<pre class="code">

  data x;                                <span class="c-cmt"># Create a data instance</span>
  { { 11 12 } { 21 22 } { 31 32 } } x =; <span class="c-cmt"># Create some data</span>
  x {@link -print};                              <span class="c-cmt"># Print before reshaping</span>
  x 2 3 x {@link -reshape};                      <span class="c-cmt"># Reshape</span>
  x {@link -print};                              <span class="c-cmt"># Print after reshaping</span>
  </pre>
  <p class="indent">produces the following screen protocol:</p>
<pre class="code">

   data x
  -----------------------------------------------
        0  1  2 
       .. .. .. 
   0 : 11 21 31 
   1 : 12 22 32 
  -----------------------------------------------

   data x
  -----------------------------------------------
        0  1 
       .. .. 
   0 : 11 21 
   1 : 31 12 
   2 : 22 32 
  -----------------------------------------------
  </pre>

  <h3>Example 2</h3>
  <p class="indent">{@link -reshape} may also be used to separate interlaced
  audio channels. In the following code snippet, the even numbers represent
  samples in the left audio channel and the odd numbers samples in the right
  audio channel.</p>
<pre class="code">

  data x;                                      <span class="c-cmt"># Create a data instance</span>
  { { 0 } { 1 } { 2 } { 3 } { 4 } { 5 } } x =; <span class="c-cmt"># Create some data</span>
  x {@link -print};                                    <span class="c-cmt"># Print before reshaping</span>
  x 2 :x.nrec/2: x {@link -reshape}; x ' x =;          <span class="c-cmt"># Reshape and transpose</span>
  x {@link -print};                                    <span class="c-cmt"># Print after reshaping</span>
  </pre>
  <p class="indent">produces the following screen protocol:</p>
<pre class="code">

   data x
  -----------------------------------------------
       0 1 2 3 4 5 
       . . . . . . 
   0 : 0 1 2 3 4 5 
  -----------------------------------------------

   data x
  -----------------------------------------------
       0 1 2 
       . . . 
   0 : 0 2 4 
   1 : 1 3 5 
  -----------------------------------------------
  </pre>
  @param idSrc  Source matrix
  @param nRecs  Number of records in destrination matrix
  @param nComps Number of components in destrination matrix
  @see -array
  @see -repmat
  @see -resample
END_MAN

/append METHOD: -scopy
/html MAN:     
  <p>Copies the components from instance <code>idSrc</code> to this instance. The method frees possibly allocated
  records of this instance.</p>

  <h3>Example</h3>
<pre class="code">

  <span class="c-key">data</span> x
  <span class="c-key">data</span> y
  <a href="itp.html#mth_type"><code class="link">type</code></a> 10 x {@link -addncomps}
  100 x {@link -allocate}
  "s1" 4 x {@link -addcomp}
  x y <span class="c-key">-scopy</span>

</pre>

  <p>After this the data instance <code>y</code> consists of 11 components (10 unnamed components of type
  <code>short</code> and 1 component of type <code>char[4]</code> (4 character string) named "s1". <code>y</code>
  does not have allocated records.</p>

  @see <a href="itp.html#mth_-copy"><code class="link">-copy</code></a>
  @see -copy_cnames
  @see -addcomp
END_MAN


/append METHOD: -select
/html MAN:
  <p>Copies components, records, blocks or the marked elements
  from <code>idSrc</code> to this instance. By default the method
  copies components. Use one of the options {@link /rec},
  {@link /block} or {@link /mark} to copy other elements.</p>

  <h3>Example</h3>
<pre class="code">

  <span class="c-key">data</span> x
  <span class="c-cmt"># ...</span>
  <span class="c-key">data</span> xs
  x 100 60 xs {@link /rec} <span class="c-key">-select</span>

  <span class="c-cmt"># Selects the records 100 ... 159 from data instance x 
  # and stores them into data instance xs.</span>

</pre>

  @param       idSrc   The source instance
  @param       nFirst  First element to select (ignored if option {@link /mark} is used)
  @param       nCount  Number of elements to select (ignored if option {@link /mark} is used)
  @cgen:option /block  Selects blocks (default is components)
  @cgen:option /mark   Selects marked elements (entire components <i>or</i> records only)
  @cgen:option /rec    Selects records (default is components)
  @see         -delete
END_MAN

## EOF
