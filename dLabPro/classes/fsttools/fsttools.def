## dLabPro class CFsttools (fsttools)
## - Definition script
##
## AUTHOR : Frank Duckhorn
## PACKAGE: dLabPro/classes
## 
## Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
## - Chair of System Theory and Speech Technology, TU Dresden
## - Chair of Communications Engineering, BTU Cottbus
## 
## This file is part of dLabPro.
## 
## dLabPro is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
## 
## dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
## 
## You should have received a copy of the GNU Lesser General Public License
## along with dLabPro. If not, see <http://www.gnu.org/licenses/>.

PLATFORM: GNUC++
COMPILER: gcc
AR:       ar

PROJECT:  fsttools
COMMENT:  Tools for FST modification
AUTHOR:   frank.duckhorn
VERSION:  1.00 DLC22

CLASS:    fsttools
/cProject                                                                      # Generate ANSI C compatible code
/cxx_nconv                                                                     # Use strict C++ naming conventions


######################################################################
## Files and locations

FILE:    fstt_topo.c
FILE:    fstt_misc.c
FILE:    fstt_smooth.c
FILE:    fstt_nmg.c

INCLUDE: "dlp_obsolete.h"
INCLUDE: "dlp_data.h"
INCLUDE: "dlp_fst.h"

######################################################################
## Error definition

ERROR:   FSTTOOLS_NOMEM
COMMENT: Not enough memory available.

ERROR:   FSTTOOLS_ARGUMENT
COMMENT: Wrong type of argument '%s'.

ERROR:   FSTTOOLS_NULL
COMMENT: Argument '%s' must not be NULL.

ERROR:   FSTTOOLS_EMPTY
COMMENT: Argument '%s' must not be empty.

ERROR:   FSTTOOLS_MISSCOMP
COMMENT: Component %d not found in '%s'.

ERROR:   FSTTOOLS_COMPTYPE
COMMENT: Component %d in '%s' is not of %s type.

ERROR:   FSTTOOLS_STAT
COMMENT: Mean and covariances do not fit.

ERROR:   FSTTOOLS_MAPPING_FAILED
COMMENT: Mapping of state index for record %d failed.


######################################################################
## Parameter definition


######################################################################
## Option definition

OPTION:  /wb
COMMENT: Witten-Bell-Smoothing
/html MAN:
  <p> This algorithm follows the idea, that each unseen <i>N</i>-gram can be estimated by the number of singletons. Singletons are <i>N</i>-grams which occure exactly once. The calculation is shown in the following equations: 
  <table class="indent">
    <tr>
      <td rowspan="2" style="vertical-align:middle; border:none"><i>c<sub>n</sub><sup>*</sup>=&nbsp;</i></td>
      <td style="border:none; border-bottom:1px solid black; text-align:center;">
        <i>T(w<sub>n-N+1</sub>...w<sub>n-1</sub>)&middot;N(w<sub>n-N+1</sub>...w<sub>n</sub>)</i></td>
      <td rowspan="2" style="vertical-align:middle; border:none">&nbsp;&nbsp;, for <i>c(w<sub>n-N+1</sub>...w<sub>n</sub>)=0</i></td>
    </tr>
    <tr><td style="border:none; text-align:center;"><i>Z(w<sub>n-N+1</sub>...w<sub>n-1</sub>)&middot;(N(w<sub>n-N+1</sub>...w<sub>n</sub>)+T(w<sub>n-N+1</sub>...w<sub>n-1</sub>))</i>
    </td></tr>
  </table>
  Where <i>T</i> denotes the number of types with the given history, <i>N</i> denotes the number of tokens with given history and <i>Z</i> denotes the number of zerograms with the given history.<br>
  Next thing shown is the equation for the discounted counts with <i>c(w<sub>n-N+1</sub>w<sub>...n</sub>)&gt;0</i>:
  <table class="indent">
    <tr>
      <td rowspan="2" style="vertical-align:middle; border:none"><i>c<sub>n</sub><sup>*</sup>=&nbsp;</i></td>
      <td style="border:none; border-bottom:1px solid black; text-align:center;">
        <i>c(w<sub>n-N+1</sub>...w<sub>n</sub>)&middot;N(w<sub>n-N+1</sub>...w<sub>n</sub>)</i></td>
      <td rowspan="2" style="vertical-align:middle; border:none">&nbsp;&nbsp;, for <i>c(w<sub>n-N+1</sub>...w<sub>n</sub>)&gt;0</i></td>
    </tr>
    <tr><td style="border:none; text-align:center;"><i>N(w<sub>n-N+1</sub>...w<sub>n</sub>)+T(w<sub>n-N+1</sub>...w<sub>n-1</sub>)</i>
    </td></tr>
  </table>
  Except of unigrams, <i>N</i>-grams which did not occure will not be smoothed, because of using backoff (see {@link -smooth}).
</p>
  @see -smooth
  @see /add
  @see /gt
END_MAN

OPTION:  /gt
COMMENT: Good-Turing-Smoothing
/html MAN:
  <p> This algorithm uses the idea, that each unseen <i>N</i>-gram is estimated by higher order <i>N</i>-grams. In addition the assumption is made, that counts higher than a certain threshold <i>k</i> are reliable and needn't to be adjusted. This threshold is set by parameter <code>nKGt</code> in function {@link -smooth}.
  <table class="indent">
    <tr>
      <td rowspan="2" style="vertical-align:middle; border:none"><i>c<sup>*</sup>=&nbsp;</i></td>
      <td style="border:none; border-bottom:1px solid black; text-align:center;">
        <table>
          <tr>
            <td rowspan="2" style="vertical-align:middle; border:none"><i>(c+1)</i></td>
            <td style="border:none; border-bottom:1px solid black; text-align:center;">
              <i>N<sub>c+1</sub></i></td>
            <td rowspan="2" style="vertical-align:middle; border:none">+c</i></td>
            <td style="border: none; border-bottom:1px solid black;"><i>(k+1)&middot;N<sub>k+1</sub></i></td>
          </tr>
          <tr><td style="border:none;text-align:center;"><i>N<sub>c</sub></i></td><i><td style="border:none;text-align:center;">N<sub>1</sub></td></i></tr>
        </table>
      </td>
      <td style="border:none; vertical-align:middle;" rowspan="2"> &nbsp; &nbsp;, for <i>0&lt;c&le;k</i></td>
    </tr>
    <tr><td style="border:none; text-align:center;">
    <table width="100%">
      <tr style="text-align:center;">
         <td rowspan="2" style="vertical-align:middle; border:none"><i>1</i></td>
        <td rowspan="2" style="vertical-align:middle; border:none">-</i></td>
        <td style="border:none; border-bottom:1px solid black; text-align:center;"><i>(k+1)&middot;N<sub>k+1</sub></i></td>
       </tr>
      <tr style="text-align:center;"><i><td style="border:none;text-align:center;">N<sub>1</sub></td></i></tr>
    </table>
    </td></tr>
  </table>
  In this equation <i>N<sub>c</sub></i> is the number of <i>N</i>-grams, which occure <i>c</i> times. (It's called the frequency of frequncies.) The counts greater than <i>k</i> will not be changed so <i>c<sup>*</sup>=c</i>. Zero counts can easily be adjusted by:
  <table class="indent">
    <tr>
      <td rowspan="2" style="vertical-align:middle; border:none"><i>c<sup>*</sup>=&nbsp;</i></td>
      <td style="border:none; border-bottom:1px solid black; text-align:center;">
        <i>N<sub>1</sub></i></td>
      <td rowspan="2" style="vertical-align:middle; border:none">&nbsp;&nbsp;, for <i>c=0</i></td>
    </tr>
    <tr><td style="border:none; text-align:center;"><i>Z</i>
    </td></tr>
  </table>
  where <i>Z</i> represents the number of zerograms. In this implementation only unigrams with count zero will be adjusted, higher order <i>N</i>-grams will not be adjusted because of backoff (see {@link -smooth}). 
  </p>
  @see -smooth
  @see /wb
  @see /add
END_MAN

OPTION:  /add
COMMENT: Add-Delta-Smoothing
/html MAN:
  <p> This smoothing algorithm adjusts the counts <i>c</i> by adding &delta; to each and normalize it by some factor:
  <table class="indent">
    <tr>
      <td rowspan="2" style="vertical-align:middle; border:none"><i>c<sub>n</sub><sup>*</sup>=&nbsp;</i></td>
      <td style="border:none; border-bottom:1px solid black; text-align:center;">
        <i>(c<sub>n</sub> + &delta;)&middot;&sum;<sub>w<sub>n</sub></sub>c(w<sub>n-N+1</sub>...w<sub>n</sub>)</i></td>
    </tr>
    <tr><td style="border:none; text-align:center;"><i>&sum;<sub>w<sub>n</sub></sub>c(w<sub>n-N+1</sub>...w<sub>n</sub>)+&delta;&middot;|V|</i>
    </td></tr>
  </table>
  Where <i>|V|</i> is the vocabulary size. In this implementation zero counts of bi- and trigrams are not adjusted because of using backoff  (see: {@link -smooth}). In fact this smoothing algorithm performs quite poor.
  </p>
  @see -smooth
  @see /wb
  @see /gt
END_MAN

######################################################################
## Command definition

METHOD:  -remove_ex_loops
SYNTAX:  (long nUnit, INSTANCE(fst) itFst)
COMMENT: remove all follwing transitions with the same input symbol
/html MAN:
  Removes all transitions which follow a transition with the same input symbol (TIS).
  The terminal state of the previous transition is set the to the terminal state
  of this transition and the initial state of all transitions starting in between the
  two transitions is also set to the terminal state of the removed transition.
END_MAN

METHOD:  -one_tis_per_path
SYNTAX:  (long nUnit, INSTANCE(fst) itFst)
COMMENT: Each input symbol only once per path
/html MAN:
  Rearange transitions, so that each path has each input symbol only once.
  All paths should start at state zero. There should be no branches instead
  of that at state zero.
END_MAN

METHOD:  -restore_loops
SYNTAX:  (INSTANCE(fst) itSrc, long nUnit, INSTANCE(fst) itDst)
COMMENT: restores loops according to that in itSrc
/html MAN:
  Converts _this in a hmm. Finds for each state in _this the TIS
  of transitions terminating in that state. If a loop transitions
  for that TIS exists in itSrc, it is copied to the state in _this.
  Units in itSrc and _this should correspond according to thier index.
END_MAN

METHOD:  -compute_path
SYNTAX:  (data idTrans,long nIt,data idPath,INSTANCE(fst) itFst)
COMMENT: computes path weights for path length nIt
/html MAN:
  Computes path weights for paths in FST according to transition weights
  found in idTrans. The path weights are calculated up to a path length
  of nIt transitions.
  @param idTrans array with transition weights, should contain a
    component ~Nldavg with transition weights and a component "~RC"
    with reference counters for transitions
  @param nIt number of iterations / maximal path length
  @param idPath desitination for path weights,
    component 0 contains transition weights from idTrans,
    component 1..nIt contains path weights of paths with length 1..nIt,
    component nIt+1 contains transition id
END_MAN

METHOD:  -rc_by_used_path
SYNTAX:  (data idTransRC,double nPathWeight,long nUnit,boolean bReset,data idUnitTransCount,INSTANCE(fst) itFst)
COMMENT: Adds trans.RCs and pathweight to histroy or initializes new trans.RCs from history
/html MAN:
  If bReset is true then history for all units is reseted befor all other operations.
  If idTransRC is not NULL then trans.RCs and pathweight is added to history of unit nUnit.
  If idUnitTransCount is not NULL then new trans.RCs are calculated for all units from history
  and are saved to RC-component of transition table.
  @param idTransRC transition reference counters for path to add for all transitions of FST
  @param nPathWeight path weight for path to add
  @param nUnit unit index to add the new path to history
  @param bReset reset the history of all units befor doing anything
  @param idUnitTransCount number of transitions to remain, given for each unit
END_MAN

METHOD:  -sum_comp_id
SYNTAX:  (data Src,long Cid,long DstRecs,data Dst)
COMMENT: Sum component values according index comp. Cid (DstRecs = max index)

METHOD:  -lm_cluster_classes
SYNTAX:  (INSTANCE(fst) itLM, long nNClass, long nNLoops, data idClassMap)
COMMENT: Clusters words of a language model fst into classes
/html MAN:
  This function clusters the words of a language model given as
  fst into classes. The algorithm is that of HTK (see htk-book
  version 3.4 capter 14.2.1 Word exchange algorithm).
  @param itLM language model generated by NMG_evaluation.xtp (after lex conversion)
  @param nNClass number of classes to create
  @param nNLoops number of clustering loops (10 seems to be a good value)
  @param idClassMap created map from words to classes with unigram RC per word
END_MAN

METHOD: -getlogprob
SYNTAX: double(short nSeqLen, data idSeq, long nUnit, INSTANCE(fst) itFst)
COMMENT: Get logarithmic probability of N-gram
/html MAN:
END_MAN

METHOD:  -smooth
SYNTAX:  (short nKGt, double nDelta, long nUnit, INSTANCE(fst) itFst)
COMMENT: (Re-)Estimates transition propabilities, add fallback transitions
/html MAN:
  <p>This function applies a certain smoothing algorithm to a given language modell. There are three algorithms available: <ud class="indent"><li>Add-Delta-Smoothing, activated by option {@link /add}</li><li>Witten-Bell-Smoothing, activated by option {@link /wb}</li><li>Good-Turing-Smoothing, activated by option {@link /gt}</li></ud> <br>If you do not activate an algorithm, Good-Turing will be used. <br>
  Please notice, that for Add-Delta-Smoothing you have to set the variable <code>nDelta</code>, usually with a value in intervall (0,1]. If <code>nDelta</code> ist zero, the algorithm will use 1. Please also notice to set the variable <code>nKGt</code>, which is the threshold to adjust counts (see {@link /gt}); something arround <i>k=5</i> will be a good choice.<br> 
  To get better results, a fallback strategy named <i>Backoff</i> is implemented.
  </p>
  <h4>Backoff</h4>
  <p> This kind of fallback works as follows: Whenever you look for the probability of an <i>N</i>-gram, i.e. the trigram 
  <i>w<sub>n-2</sub>w<sub>n-1</sub>w<sub>n</sub></i>, and you have none, which means you never saw this trigram, so the count <i>c(w<sub>n-2</sub>w<sub>n-1</sub>w<sub>n</sub>)</i> equals <i>0</i>, you take the probability of the <i>N-1</i>-gram, if it exists; otherwise you take the <i>N-2</i>-gram and so on.<br>
  For the example of trigram you use the bigram <i>w<sub>n-1</sub>w<sub>n</sub></i>. More formal for the example of trigrams it looks like this: 
  <table class="indent" style="border: none;">
    <tr>
      <td style="border:0;"><i>P<sub>BO</sub>(w<sub>n-2</sub><sub>w-1</sub>w<sub>n</sub>)</i></td><td style="border:0;"><i>&nbsp; = &nbsp; P<sup>*</sup>(w<sub>n-2</sub>w<sub>n-1</sub>w<sub>n</sub>)</i></td><td style="border:0;">, &nbsp;if <i>c(w<sub>n-2</sub>w<sub>n-1</sub>w<sub>n</sub>)&nbsp; &gt; &nbsp;0</i></td>
    </tr>
    <tr style="border:0;">
      <td style="border:0;"></td><td style="border:0;"><i> &nbsp; = &nbsp; &alpha;(w<sub>n-2</sub>w<sub>n-1</sub>)&middot;P<sup>*</sup>(w<sub>n-1</sub>w<sub>n</sub>)</i></td><td style="border:0;">, &nbsp;if <i>c(w<sub>n-2</sub>w<sub>n-1</sub>w<sub>n</sub>)&nbsp;=&nbsp;0</i> and <i>c(w<sub>n-1</sub>w<sub>n</sub>)&nbsp; &gt; &nbsp; 0</i></td>
    </tr>
    <tr style="borde:0;">
      <td style="border:0;"></td><td style="border:0;"><i>&nbsp; = &nbsp; &alpha;(w<sub>n</sub>)&middot;P<sup>*</sup>(w<sub>n</sub>)</i></td><td style="border:0;">, &nbsp; otherwise</td>
    </tr>
  </table>
  In this equation &alpha; is a factor which assures that the probabilities sum up to 1. It is a function of the preceding string and is calculated as follows:
  <table class="indent">
    <tr>
      <td rowspan="2" style="vertical-align:middle; border:none"><i>&alpha;</i>(<i>w<sub>n-N+1</sub></i>...<i>w<sub>n-1</sub></i>) = &nbsp;</td>
      <td style="border:none; border-bottom:1px solid black; text-align:center;"><i>1-&sum;<sub>w<sub>n</sub>:c(w<sub>n-N+1</sub>...w<sub>n</sub>)&gt;0</sub> P<sup>*</sup>(w<sub>n</sub>|w<sub>n-N+1</sub>...w<sub>n-1</sub>)</i></td>
    </tr>
    <tr><td style="border:none; text-align:center;"><i>1-&sum;<sub>w<sub>n</sub>:c(w<sub>n-N+1</sub>...w<sub>n</sub>)&gt;0</sub> P<sup>*</sup>(w<sub>n</sub>|w<sub>n-N+2</sub>...w<sub>n-1</sub>)</i></td></tr>
  </table>
  </p>
  <i>P<sup>*</sup>(w<sub>n</sub>|w<sub>n-N+1</sub>...w<sub>n-1</sub>)</i> is the smoothed probability:
  <table class="indent">
    <tr>
      <td rowspan="2" style="vertical-align:middle; border:none"><i>P<sup>*</sup></i>(<i>w<sub>n</sub>|w<sub>n-N+1</sub>w<sub>n-1</sub></i>) = &nbsp;</td>
      <td style="border:none; border-bottom:1px solid black; text-align:center;">
        <i>c<sup>*</sup>(w<sub>n-N+1</sub>...<sub>n</sub>)</i>
      </td>
    </tr>
    <tr><td style="border:none; text-align:center;"><i>&sum;<sub>w<sub>n</sub></sub>c(w<sub>n-N+1</sub>w<sub>n</sub>)</i></td></tr>
  </table>
  where <i>c<sup>*</sup></i> is the new count adjusted by the chosen smoothing algorithm.
  @param nUnit The unit to process or -1 for all units. Please note that an eventual conversion of the weight type will
   affect all units and that in this case the weights of <i>all</i> units will be destroyed and reset to 1.
  @param nDelta It only needs to be set, when using Add-Delta-Smoothing. Should be in (0,1]
  @param nKGt Is the threshold for Good-Turing-Smoothing. Only used with option <code>/gt</code>
  @param itFst The language model to process.
  @cgen:option /wb
  @cgen:option /gt
  @cgen:option /add
END_MAN

METHOD:  -nmg2lm
SYNTAX:  (INSTANCE(fst) itSrc, long nUnit, long nNGram, INSTANCE(fst) itDst)
COMMENT: Convert n-multi-gram fst into language model fst (composable with lexicon, acoustic model)

METHOD:  -lm_add_input_trans
SYNTAX:  (INSTANCE(fst) itLM, long nUnit)
COMMENT: Insert input transitions into states for composition

METHOD:  -remove_ml2
SYNTAX:  (INSTANCE(fst) itR)
COMMENT: Remove ml2 compostion transitions

######################################################################
## Interface code snippets

#INITCODE:
#  INIT;
#END_CODE

#DONECODE:
#  DONE;
#END_CODE

RESETCODE:
  RESET;
END_CODE

## Generate files
-cgen
quit


## EOF ###############################################################







