## dLabPro class CFst (fst)
## - Additional manual pages
##
## AUTHOR : Matthias Wolff, Maximiliano Cuevas and Matthias Eichner
## PACKAGE: dLabPro/classes
## 
## Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
## - Chair of System Theory and Speech Technology, TU Dresden
## - Chair of Communications Engineering, BTU Cottbus
## 
## This file is part of dLabPro.
## 
## dLabPro is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
## 
## dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
## 
## You should have received a copy of the GNU Lesser General Public License
## along with dLabPro. If not, see <http://www.gnu.org/licenses/>.

## Additional manual pages
NOTE:    C/C++ Structs and Macros
COMMENT: Overview on internal types and macros
/html MAN:
  <ul>
    <li>{@link -- Variable types}</li>
    <li>{@link -- struct FST_SEQ_TYPE}</li>
    <li>{@link -- struct FST_TID_TYPE}</li>
  <li>{@link -- struct FST_WLR_TYPE}</li>
  <li>{@link -- struct FST_TOK_TYPE}</li>
    <li>{@link -- Symbols}</li>
    <li>{@link -- Macros}</li>
  </ul>
END_MAN

NOTE:    -- Variable types
COMMENT: Variable type definitions
/html MAN:
  <table class="indent">
    <tr><td class="hidden"><code><b>FST_ITYPE</b>&nbsp;&nbsp;</code></td><td class="hidden">Index type (for state and transition indices)</td></tr>
    <tr><td class="hidden"><code><b>FST_STYPE</b></code></td><td class="hidden">Symbol type (for input and output symbol indices)</td></tr>
    <tr><td class="hidden"><code><b>FST_WTYPE</b></code></td><td class="hidden">Weight type</td></tr>
  </table>
  @see ud Field <code>ud</code>
  @see sd Field <code>sd</code>
  @see td Field <code>td</code>
END_MAN

NOTE:    -- struct FST_SEQ_TYPE
COMMENT: Item sequence struct
/html MAN:
<pre class="code">
&nbsp;<br>
  typedef struct tag_FST_SEQ_TYPE
  {
    BYTE*    lpItm;
    INT32  nOfs;
    INT32  nCnt;
  } FST_SEQ_TYPE;

</pre>
  <h3>Fields</h3>
  <table class="indent">
    <tr><td class="hidden"><code><b>lpItm&nbsp;&nbsp;</b></code></td><td class="hidden">Pointer to first item of sequence</td></tr>
    <tr><td class="hidden"><code><b>nOfs</b></code></td><td class="hidden">Offset between items in sequence</td></tr>
    <tr><td class="hidden"><code><b>nCnt</b></code></td><td class="hidden">Number of items in sequence</td></tr>
  </table>

  @see Nmg_StoreSeq CFst_Nmg_StoreSeq
END_MAN

NOTE:    -- struct FST_WLR_TYPE
COMMENT: Linked list of Word Link Records - used for Token Passing Search
/html MAN:
<pre class="code">
&nbsp;<br>
  typedef struct tag_FST_WLR_TYPE
  {
  FST_WTYPE       nWeight;
  FST_WLR_TYPE*     lpNext;
  INT32         t;
  FST_STYPE       sTerminal;
  INT32        nPointers;
  } FST_WLR_TYPE;

</pre>
  <h3>Fields</h3>
  <table class="indent">
    <tr><td class="hidden"><code><b>nWeight&nbsp;&nbsp;</b></code></td><td class="hidden">Accumulated weight up to this point</td></tr>
    <tr><td class="hidden"><code><b>lpNext</b></code></td><td class="hidden">Pointer to next WordLinkRecord</td></tr>
    <tr><td class="hidden"><code><b>t</b></code></td><td class="hidden">Current time index</td></tr>
  <tr><td class="hidden"><code><b>sTerminal</b></code></td><td class="hidden">Terminal Symbol</td></tr>
  <tr><td class="hidden"><code><b>nPointers</b></code></td><td class="hidden">Number of entities pointing to this WLR (needed for memory management)</td></tr>
  </table>

  
END_MAN

NOTE:    -- struct FST_TOK_TYPE
COMMENT: Token to be passed by Token Passing Search
/html MAN:
<pre class="code">
&nbsp;<br>
  typedef struct tag_FST_TOK_TYPE
  {
  FST_WTYPE       nWeight;          /* Accumulated weight up to this point*/
  FST_STYPE      sTerminal;        /* Terminal Symbol collected while passing*/
  BOOL        bChanged;        /* Needed while passing over epsilon transitions*/
  FST_WLR_TYPE    *lpWLR;          /* Pointer to word link record*/
  } FST_TOK_TYPE;  

</pre>
  <h3>Fields</h3>
  <table class="indent">
    <tr><td class="hidden"><code><b>nWeight&nbsp;&nbsp;</b></code></td><td class="hidden">Accumulated weight up to this point</td></tr>
    <tr><td class="hidden"><code><b>sTerminal</b></code></td><td class="hidden">Terminal Symbol</td></tr>
   <tr><td class="hidden"><code><b>bChanged</b></code></td><td class="hidden">Needed while passing over epsilon transitions</td></tr>
  <tr><td class="hidden"><code><b>lpNext</b></code></td><td class="hidden">Pointer to WordLinkRecord</td></tr>
  </table>

  
END_MAN

NOTE:    -- struct FST_TID_TYPE
COMMENT: Transducer iterator data struct
/html MAN:
<pre class="code">
&nbsp;<br>
  typedef struct tag_FST_TID_TYPE
  {
    FST_CTYPE CFst* iFst;
    INT32         nOfTIni;
    INT32         nOfTTer;
    INT32         nOfTTis;
    INT32         nOfTTos;
    INT32         nOfTW;
    INT32         nOfTRc;
    INT32         nOfTData;
    INT32         nUnit;
    FST_ITYPE       nFS;
    FST_ITYPE       nXS;
    FST_ITYPE       nFT;
    FST_ITYPE       nXT;
    INT32         nRls;
    INT32         nRlt;
    BYTE*           lpFT;
    BYTE*           lpFTunsrtd;
  } FST_TID_TYPE;

</pre>
  <h3>Fields</h3>
  <table class="indent">
    <tr><td class="hidden"><code><b>iFst    </b></code></td><td class="hidden">Pointer to <code>CFst</code> instance to iterate</td></tr>
    <tr><td class="hidden"><code><b>nOfTIni </b></code></td><td class="hidden">Offset of initial state from transition pointer</td></tr>
    <tr><td class="hidden"><code><b>nOfTTer </b></code></td><td class="hidden">Offset of terminal state from transition pointer</td></tr>
    <tr><td class="hidden"><code><b>nOfTTis </b></code></td><td class="hidden">Offset of transducer input symbol from transition pointer</td></tr>
    <tr><td class="hidden"><code><b>nOfTTos </b></code></td><td class="hidden">Offset of transducer output symbol from transition pointer</td></tr>
    <tr><td class="hidden"><code><b>nOfTW   </b></code></td><td class="hidden">Offset of transition weight from transition pointer</td></tr>
    <tr><td class="hidden"><code><b>nOfTRc  </b></code></td><td class="hidden">Offset of transition reference counter from transition pointer</td></tr>
    <tr><td class="hidden"><code><b>nOfTData&nbsp;&nbsp;</b></code></td><td class="hidden">Offset of custom transition data from transition pointer</td></tr>
    <tr><td class="hidden"><code><b>nUnit   </b></code></td><td class="hidden">Unit processed by iterator</td></tr>
    <tr><td class="hidden"><code><b>nFS     </b></code></td><td class="hidden">First state of unit</td></tr>
    <tr><td class="hidden"><code><b>nXS     </b></code></td><td class="hidden">Number of states of unit</td></tr>
    <tr><td class="hidden"><code><b>nFT     </b></code></td><td class="hidden">First transition of unit</td></tr>
    <tr><td class="hidden"><code><b>nXT     </b></code></td><td class="hidden">Number of transitions of unit</td></tr>
    <tr><td class="hidden"><code><b>nRls    </b></code></td><td class="hidden">Record length of state table</td></tr>
    <tr><td class="hidden"><code><b>nRlt    </b></code></td><td class="hidden">Record length of transition table</td></tr>
    <tr><td class="hidden"><code><b>lpFT    </b></code></td><td class="hidden">Pointer to first transition of unit</td></tr>
    <tr><td class="hidden"><code><b>lpFTunsrtd</b></code></td><td class="hidden">Pointer to last sorted transition of unit</td></tr>
    <tr><td class="hidden"><code><b>nMode   </b></code></td><td class="hidden">Operation mode, combination of the FSTI_XXX constants</td></tr>
    <tr><td class="hidden"><code><b>nDepth  </b></code></td><td class="hidden">Recursion depth</td></tr>
  </table>

  @see -- Iterator Functions
END_MAN

NOTE:    -- Symbols
COMMENT: Defined symbols
/html MAN:
  <table class="indent">

    <tr><td class="rowgroup" colspan="2">Component indices</td></tr>
    <tr><td class="hidden"><code><b>IC_UD_NAME</b></code></td><td class="hidden">{@link ud}: unit name</td></tr>
    <tr><td class="hidden"><code><b>IC_UD_XS  </b></code></td><td class="hidden">{@link ud}: number of states</td></tr>
    <tr><td class="hidden"><code><b>IC_UD_XT  </b></code></td><td class="hidden">{@link ud}: number of transitions</td></tr>
    <tr><td class="hidden"><code><b>IC_UD_FS  </b></code></td><td class="hidden">{@link ud}: first state</td></tr>
    <tr><td class="hidden"><code><b>IC_UD_FT  </b></code></td><td class="hidden">{@link ud}: first transition</td></tr>
    <tr><td class="hidden"><code><b>IC_UD_DATA</b></code></td><td class="hidden">{@link ud}: first component for custom data</td></tr>
    <tr><td class="hidden"><code><b>IC_SD_FLAG</b></code></td><td class="hidden">{@link sd}: final state flag</td></tr>
    <tr><td class="hidden"><code><b>IC_SD_DATA</b></code></td><td class="hidden">{@link sd}: first component for custom data</td></tr>
    <tr><td class="hidden"><code><b>IC_TD_TER </b></code></td><td class="hidden">{@link td}: terminal state of transition</td></tr>
    <tr><td class="hidden"><code><b>IC_TD_INI </b></code></td><td class="hidden">{@link td}: initial state of transition</td></tr>
    <tr><td class="hidden"><code><b>IC_TD_DATA</b></code></td><td class="hidden">{@link td}: first component for custom data</td></tr>

    <tr><td class="hidden" colspan="2">&nbsp;</td></tr>

    <tr><td class="rowgroup" colspan="2">Component names</td></tr>
    <tr><td class="hidden"><code><b>NC_SD_RC </b></code></td><td class="hidden">{@link sd}: state reference counter</td></tr>
    <tr><td class="hidden"><code><b>NC_TD_RC </b></code></td><td class="hidden">{@link td}: transition reference counter</td></tr>
    <tr><td class="hidden"><code><b>NC_TD_PSR</b></code></td><td class="hidden">{@link td}: transition probability (prob. semiring)</td></tr>
    <tr><td class="hidden"><code><b>NC_TD_LSR</b></code></td><td class="hidden">{@link td}: negative log. trans. probability (log semiring)</td></tr>
    <tr><td class="hidden"><code><b>NC_TD_TSR</b></code></td><td class="hidden">{@link td}: transition weight (tropical semiring)</td></tr>
    <tr><td class="hidden"><code><b>NC_TD_TIS</b></code></td><td class="hidden">{@link td}: transducer input symbol</td></tr>
    <tr><td class="hidden"><code><b>NC_TD_TOS</b></code></td><td class="hidden">{@link td}: transducer output symbol</td></tr>

    <tr><td class="hidden" colspan="2">&nbsp;</td></tr>

    <tr><td class="rowgroup" colspan="2">FST property flags (see {@link Analyze CFst_Analyze})</td></tr>
    <tr><td class="hidden"><code><b>FST_FWDCONN   </b></code></td><td class="hidden">Forward connected</td></tr>
    <tr><td class="hidden"><code><b>FST_BKWCONN   </b></code></td><td class="hidden">Backward connected</td></tr>
    <tr><td class="hidden"><code><b>FST_FWDTREE   </b></code></td><td class="hidden">Forward tree</td></tr>
    <tr><td class="hidden"><code><b>FST_BKWTREE   </b></code></td><td class="hidden">Backward tree</td></tr>
    <tr><td class="hidden"><code><b>FST_LOOPS     </b></code></td><td class="hidden">Has loops (trivial cicles)</td></tr>
    <tr><td class="hidden"><code><b>FST_WEIGHTED  </b></code></td><td class="hidden">Is weighted</td></tr>
    <tr><td class="hidden"><code><b>FST_ACCEPTOR  </b></code></td><td class="hidden">Is acceptor</td></tr>
    <tr><td class="hidden"><code><b>FST_TRANSDUCER</b></code></td><td class="hidden">Is transducer (implies <code>FST_ACCEPTOR</code>)</td></tr>

    <tr><td class="hidden" colspan="2">&nbsp;</td></tr>

    <tr><td class="rowgroup" colspan="2">Graph iterator modes (see {@link STI_Init CFst_STI_Init})</td></tr>
    <tr><td class="hidden"><code><b>FSTI_SORTINI</b></code></td><td class="hidden">Sort transitions by initial state</td></tr>
    <tr><td class="hidden"><code><b>FSTI_SORTTER</b></code></td><td class="hidden">Sort transitions by terminal state</td></tr>
    <tr><td class="hidden"><code><b>FSTI_SLOPPY </b></code></td><td class="hidden">Partially sorted transition lists</td></tr>

    <tr><td class="hidden" colspan="2">&nbsp;</td></tr>

    <tr><td class="rowgroup" colspan="2">Unit change flags (see {@link STI_UnitChanged CFst_STI_UnitChanged})</td></tr>
    <tr><td class="hidden"><code><b>FSTI_CADD</b></code></td><td class="hidden">Added states and/or transitions</td></tr>
    <tr><td class="hidden"><code><b>FSTI_CANY</b></code></td><td class="hidden">Any other changes</td></tr>

    <tr><td class="hidden" colspan="2">&nbsp;</td></tr>

    <tr><td class="rowgroup" colspan="2">State flags (see {@link sd state table})</td></tr>
    <tr><td class="hidden"><code><b>SD_FLG_FINAL</b></code></td><td class="hidden">Final flag</td></tr>
    <tr><td class="hidden"><code><b>SD_FLG_USER1</b></code></td><td class="hidden">User 1 flag</td></tr>
    <tr><td class="hidden"><code><b>SD_FLG_USER2</b></code></td><td class="hidden">User 2 flag</td></tr>

    <tr><td class="hidden" colspan="2">&nbsp;</td></tr>

    <tr><td class="rowgroup" colspan="2">Weight semiring types</td></tr>
    <tr><td class="hidden"><code><b>FST_WSR_NONE</b></code></td><td class="hidden">Not weighted</td></tr>
    <tr><td class="hidden"><code><b>FST_WSR_PROB</b></code></td><td class="hidden">Probability semiring</td></tr>
    <tr><td class="hidden"><code><b>FST_WSR_LOG </b></code></td><td class="hidden">Log semiring</td></tr>
    <tr><td class="hidden"><code><b>FST_WSR_TROP</b></code></td><td class="hidden">Tropical semiring</td></tr>

    <tr><td class="hidden" colspan="2">&nbsp;</td></tr>

  </table>
END_MAN

NOTE:    -- Macros
COMMENT: Macro definitions
/html MAN:
  <table class="indent">
    <tr><td class="rowgroup" colspan="3">Descriptor table access</td></tr>
    <tr>
      <td class="hidden"><code><b>UD_XXU(A)</b></code></td>
      <td class="hidden">Number of units (r-value)</td>
      <td class="hidden"><code>A</code>: Pointer to automaton instance</td>
    </tr>
    <tr>
      <td class="hidden"><code><b>UD_XXS(A)</b></code></td>
      <td class="hidden">Total number of states (r-value)</td>
      <td class="hidden"><code>A</code>: Pointer to automaton instance</td>
    </tr>
    <tr>
      <td class="hidden"><code><b>UD_XXT(A)</b></code></td>
      <td class="hidden">Total number of transitions (r-value)</td>
      <td class="hidden"><code>A</code>: Pointer to automaton instance</td>
    </tr>
    <tr>
      <td class="hidden"><code><b>UD_FS(A,B)</b></code></td>
      <td class="hidden">First state of unit (r,l-value)</td>
      <td class="hidden"><code>A</code>: Pointer to automaton instance<br>
                         <code>B</code>: Unit index</td>
    </tr>
    <tr>
      <td class="hidden"><code><b>UD_XS(A,B)</b></code></td>
      <td class="hidden">Number of states of unit (r,l-value)</td>
      <td class="hidden"><code>A</code>: Pointer to automaton instance<br>
                         <code>B</code>: Unit index</td>
    </tr>
    <tr>
      <td class="hidden"><code><b>UD_FT(A,B)</b></code></td>
      <td class="hidden">First transition of unit (r,l-value)</td>
      <td class="hidden"><code>A</code>: Pointer to automaton instance<br>
                         <code>B</code>: Unit index</td>
    </tr>
    <tr>
      <td class="hidden"><code><b>UD_XT(A,B)</b></code></td>
      <td class="hidden">Number of transitions of unit (r,l-value)</td>
      <td class="hidden"><code>A</code>: Pointer to automaton instance<br>
                         <code>B</code>: Unit index</td>
    </tr>
    <tr>
      <td class="hidden"><code><b>SD_FLG(A,B)</b></code></td>
      <td class="hidden">Final state flag (r,l-value)</td>
      <td class="hidden"><code>A</code>: Pointer to automaton instance<br>
                         <code>B</code>: Absolute state index</td>
    </tr>
    <tr>
      <td class="hidden"><code><b>TD_INI(A,B)</b></code></td>
      <td class="hidden">Unit relative index of initial state of transition (r,l-value)</td>
      <td class="hidden"><code>A</code>: Pointer to automaton instance<br>
                         <code>B</code>: Absolute transition index</td>
    </tr>
    <tr>
      <td class="hidden"><code><b>TD_TER(A,B)</b></code></td>
      <td class="hidden">Unit relative index of terminal state of transition (r,l-value)</td>
      <td class="hidden"><code>A</code>: Pointer to automaton instance<br>
                         <code>B</code>: Absolute transition index</td>
    </tr>

    <tr><td class="hidden" colspan="3">&nbsp;</td></tr>

    <tr><td class="rowgroup" colspan="3">Variable type conversion</td></tr>
    <tr>
      <td class="hidden"><code><b>DLP_TYPE(A)</b></code></td>
      <td class="hidden">Determines the dLabPro type code for a C type<br>
                         (see <a href="dlpbase.html"><code class="link">dlp_get_type_code</code></a>)</td>
      <td class="hidden"><code>A</code>: C type</td>
    </tr>

    <tr><td class="hidden" colspan="3">&nbsp;</td></tr>

  </table>
END_MAN

NOTE:    Iterating graphs in C/C++
COMMENT: Describes how to traverse a graph
/html MAN:
  <ul>
    <li>{@link -- Traversing units, states and transitions}</li>
    <li>{@link -- Iterator Functions}</li>
  </ul>
END_MAN

NOTE:    -- Traversing units, states and transitions
COMMENT: Describes simple graph traversal
/html MAN:
END_MAN

NOTE:    -- Iterator Functions
COMMENT: Describes the usage of graph iterator functions
/html MAN:
  <p>Initializing, finalizing and sorting</p>
  <ul>
    <li>{@link STI_Init CFst_STI_Init}</li>
    <li>{@link STI_Done CFst_STI_Done}</li>
    <li>{@link STI_UnitChanged CFst_STI_UnitChanged}</li>
    <li>{@link STI_IsSorted CFst_STI_IsSorted}</li>
    <li>{@link STI_Sort CFst_STI_Sort}</li>
  </ul>
  <p>States and transitions</p>
  <ul>
    <li>{@link STI_GetTransPtr CFst_STI_GetTransPtr}</li>
    <li>{@link STI_GetTransId CFst_STI_GetTransId}</li>
    <li>{@link STI_TIni CFst_STI_TIni}</li>
    <li>{@link STI_TTer CFst_STI_TTer}</li>
    <li>{@link STI_TTis CFst_STI_TTis}</li>
    <li>{@link STI_TTos CFst_STI_TTos}</li>
    <li>{@link STI_TW   CFst_STI_TW}</li>
  </ul>
  <p>Iteration</p>
  <ul>
    <li>{@link STI_TfromS CFst_STI_TfromS}</li>
    <li>{@link STI_TtoS CFst_STI_TtoS}</li>
  </ul>
END_MAN

## EOF


