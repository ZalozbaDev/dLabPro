## dLabPro class CHFAproc (HFAproc)
## - Definition file
##
## AUTHOR : Mike Lorenz, Rico Petrick
## PACKAGE: dLabPro/classes
## 
## Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
## - Chair of System Theory and Speech Technology, TU Dresden
## - Chair of Communications Engineering, BTU Cottbus
## 
## This file is part of dLabPro.
## 
## dLabPro is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
## 
## dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
## 
## You should have received a copy of the GNU Lesser General Public License
## along with dLabPro. If not, see <http://www.gnu.org/licenses/>.

PLATFORM: GNUC++
COMPILER: gcc
AR:       ar
CFLAGS:   -Wno-trigraphs

PROJECT:  HFAproc
COMMENT:  Harmonicity based feature analysis
AUTHOR:   Rico Petrick, Mike Lorenz
VERSION:  1.0

CLASS:    HFAproc
SUPERCLASS: ../fbaproc/fbaproc.def
/cxx_nconv                                                   # Use strict C++ naming conventions

/html MAN: 
       <p>Class HFAproc</p>
END_MAN


## C/C++ files
INCLUDE: "dlp_data.h"
INCLUDE: "dlp_math.h"

FILE: hfa_work.cpp
FILE: hfa_alg.cpp

HEADERCODE:
/* ----- Limits ----- */

/*! @brief  maximum for unsigned 1 Byte data types */
#define U1_MAX          UCHAR_MAX
/*! @brief maximum for unsigned 2 Byte data types  */
#define U2_MAX          USHRT_MAX
/*! @brief maximum for unsigned 4 Byte data types  */
#define U4_MAX          ULONG_MAX
/*! @brief maximum for unsigned 8 Byte data types  */
#define U8_MAX          ULONG_MAX
/*! @brief minimum for unsigned 1 Byte data types  */
#define U1_MIN          0
/*! @brief minimum for unsigned 2 Byte data types   */
#define U2_MIN          0
/*! @brief minimum for unsigned 4 Byte data types  */
#define U4_MIN          0
/*! @brief minimum for unsigned 8 Byte data types  */
#define U8_MIN          0
/*! @brief maximum for signed 1 Byte data types  */
#define I1_MAX          CHAR_MAX
/*! @brief maximum for signed 2 Byte data types   */
#define I2_MAX          SHRT_MAX
/*! @brief maximum for signed 4 Byte data types  */
#define I4_MAX          LONG_MAX
/*! @brief maximum for signed 8 Byte data types */
#define I8_MAX          LONG_MAX
/*! @brief minimum for signed 1 Byte data types */
#define I1_MIN          CHAR_MIN
/*! @brief minimum for signed 2 Byte data types */
#define I2_MIN          SHRT_MIN
/*! @brief minimum for signed 4 Byte data types */
#define I4_MIN          LONG_MIN
/*! @brief minimum for signed 8 Byte data types */
#define I8_MIN          LONG_MIN
/*! @brief  maximum for float 4 Byte data types*/
#define R4_MAX          FLT_MAX
/*! @brief minimum for float 4 Byte data types  */
#define R4_MIN          (-FLT_MAX)
/*! @brief maximum for float 8 Byte data types */
#define R8_MAX          DBL_MAX
/*! @brief minimum for float 8 Byte data types  */
#define R8_MIN          (-DBL_MAX)
/*! @brief maximum for float 8 Byte data types (synonym) */
#define D8_MAX          R8_MAX
/*! @brief minimum for float 8 Byte data types (synonym) */
#define D8_MIN          R8_MIN


/*-------------------------------------------------------------------------
 *  Vectors
 * ------------------------------------------------------------------------*/
/*! @brief Vector is saved as one dimensional array*/
typedef struct str_i2arr {                                                        
        INT16 *pi2;    
        UINT32  len;
} str_i2arr;                 

typedef struct str_r4arr {                                                        //
        FLOAT32 *pr4;               
        UINT32  len;          
} str_r4arr;                            

typedef struct str_r8arr {                                                        //
        FLOAT64 *pr8;               
        UINT32  len;          
} str_r8arr;         

/*-------------------------------------------------------------------------
 *  Matrix
 * ------------------------------------------------------------------------*/
/*! @brief Matrix is saved as a one dimensional array
           the parameter width and length describe the matrix
           the length of the array is stored in the subarray*/

typedef struct tMXr {
    INT16        u2MxLen;           /*!< length of Featurematrix;*/
    INT16        u2MxHig;           /*!< hight of Featurematrix;*/
    str_r4arr   strMx;             /*!< Matrix of feature-vectors */
} tMXr;

typedef struct tMXi {
    INT16        u2MxLen;           /*!< length of Featurematrix;*/
    INT16        u2MxHig;           /*!< hight of Featurematrix;*/
    str_i2arr   strMx;             /*!< Matrix of feature-vectors */
} tMXi;
                   

/*! @brief defines error rejection for can not exec app. */ 
#define NOT_EXEC     -1

/*! @brief defines error rejection for can exec app. */ 
#define OKAY          0

/*! @brief defines a FALSE, if not available */
#define FALSE                     0
/*! @brief defines TRUE the complement of FALSE */
// #define TRUE                      !FALSE



/*! @brief Definition of max Makro */
// #define MAX(a,b) (((a)>(b))?(a):(b))

/*! @brief Definition of min Makro  */
// #define MIN(a,b) (((a)<(b))?(a):(b))


/*! @brief VAD-states (VOIced UNVoiced) */ 
#define VOICE   1
#define UNVOI   0

/*! @brief SPD-states (SPEECH PAUSE) */ 
#define SPEECH   1
#define PAUSE    0

#define N_FFT_MAX (16*512)


/* -----------------------------------------------------------------------
 *  HFA
 * -----------------------------------------------------------------------*/

/*!
 * @brief structure for noise reduction unit
 */
             
/*! @brief structure with*/
typedef struct tGPAR {

  UINT32   u4f_s;               /*!< Sampling frequency in Herz*/
  FLOAT32  r4T_s;               /*!< Sampling frequency in Herz*/
  UINT16   u2F_rate;            /*!< frame rate / continue rate in samples */
  UINT16   u2F_width;           /*!< frame width in samples */
  UINT16   u2fft_length;        /*!< fft width in samples */
  FLOAT32  r4win_fft[N_FFT_MAX];/*!< window for fft in samples */
  BYTE     u1wtypefft;        /*!< window type for fft */

} tGPAR;


typedef struct tCPAR {

   UINT16 exp;
   UINT16 v_offset;
   UINT16 v_width;
   UINT16 p_offset;
   UINT16 p_width;
   FLOAT32  r4F0_max;
   FLOAT32  r4F0_min;
   FLOAT32  r4VADmean_fac;
   FLOAT32  r4Thresh;
   UINT16 hfaswitch;
   UINT16 dctswitch;
   BYTE  atype;
   UINT16 idftswitch;
    
} tCPAR;                    


typedef struct tF0E {

  FLOAT32      r4akf[N_FFT_MAX];
  UINT16       u2akf_len;
  UINT16       u2T0_max;
  UINT16       u2T0_min;
  FLOAT32      r4F0_max;
  FLOAT32      r4F0_min;
  FLOAT32      r4Thresh;

} tF0E;                    


typedef struct tHAR {

  UINT16       N_HarmMax; 
  FLOAT32      r4CutFreq;

} tHAR;                    


typedef struct tVAD {

    FLOAT32 r4MeanFaktor;

} tVAD;                    



typedef struct tFade {

  UINT16  u2wBinSta;
  UINT16  u2wBinSto;
  UINT16  u2wlen;
  FLOAT32 *pr4win;
  
} tFade;                    



#define MAX_WIDTH 20


typedef struct tSYN {

  INT16  exp;
  FLOAT32  r4win[MAX_WIDTH][2*MAX_WIDTH -   1];
  tFade strFad[2];

} tSYN;                    


typedef struct tHFA {

  UINT16 u4A;

  FLOAT64     r4x_in[N_FFT_MAX];
  tCPAR       strCPAR;
  tGPAR       strGPAR;
  tF0E        strF0E;
  tHAR        strHAR;
  tVAD        strVAD;
  tSYN        strSYN;
  MLP_CNVC_TYPE strMF;
} tHFA;           

END_CODE

## Hidden Fields

FIELD:   coeff                              # Number of mel coefficients
TYPE:    short
INIT:    30
FLAGS:   /hidden /noset

FIELD:   limit                                                      # Max. absolute value of features
TYPE:    float
INIT:    127.
FLAGS:   /hidden /noset

FIELD:   strHFA                            # HFA data struct
TYPE:    tHFA*
COMMENT: HFA structure for parameters

FIELD:   wtypefft                          # window type for matrix analysis
COMMENT: Window type
TYPE:    50

FIELD:   atype                            # post filter type
COMMENT: Filter type after HFA
TYPE:    50

FIELD:   DCTswitch                          # DCT switch
COMMENT: DCT on/off
TYPE:    short
INIT:   0

FIELD:   HFAswitch                          # HFA switch
COMMENT: HFA on/off
TYPE:    short

FIELD:   exp                            # exponent for HFA
COMMENT: exponent for hfa
TYPE:    short

FIELD:   v_offset                          # voiced offset for HFA
COMMENT: voiced frame fade window offset in Hz
TYPE:    short

FIELD:   v_width                          # voiced width for HFA
COMMENT: voiced frame fade window width
TYPE:    short

FIELD:   p_offset                          # paused/unvoiced offset for HFA
COMMENT: unvoiced frame fade window offset in Hz
TYPE:    short

FIELD:   p_width                          # paused/unvoiced width for HFA
COMMENT: unvoiced frame fade window width
TYPE:    short

FIELD:   f0max                            # F0 max frequency for HFA
COMMENT: fundamental frequency range in Hz (max)
TYPE:    short

FIELD:   f0min                            # F0 min frequency for HFA
COMMENT: fundamental frequency range in Hz (min)
TYPE:    short

FIELD:   VAD                            # Voice Activity Detection switch
COMMENT: VAD on/off
TYPE:    short

FIELD:   VADmean_fac                        # VAD decision factor
COMMENT: VAD decision factor
TYPE:    float

FIELD:   VADthresh                          # VAD decision threshold
COMMENT: VAD decision threshold
TYPE:    short

FIELD:   VADtype                          # VAD type
COMMENT: VAD type
TYPE:   50

FIELD:   par1
COMMENT: dummy parameter
TYPE:    float

FIELD:   par2
COMMENT: dummy parameter
TYPE:    float

FIELD:   par3
COMMENT: dummy parameter
TYPE:    float

FIELD:   par4
COMMENT: dummy parameter
TYPE:    float

FIELD:   par5
COMMENT: dummy parameter
TYPE:    float

FIELD:   par6
COMMENT: dummy parameter
TYPE:    float

FIELD:   par7
COMMENT: dummy parameter
TYPE:    float

FIELD:   par8
COMMENT: dummy parameter
TYPE:    float

FIELD:   par9
COMMENT: dummy parameter
TYPE:    float

FIELD:   par10
COMMENT: dummy parameter
TYPE:    float

## Methods

## Release notes

## System functions

INITCODE:
  INIT;
  m_lpStrHFA=(tHFA *)dlp_calloc(1,sizeof(tHFA));
END_CODE

DONECODE:
   hfa_done(m_lpStrHFA);
  DONE;
END_CODE

## make & build

-cgen
quit

## EOF


