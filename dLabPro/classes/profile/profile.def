## dLabPro class CProfile (profile)
## - Definition script
##
## AUTHOR : Matthias Eichner
## PACKAGE: dLabPro/classes
## 
## Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
## - Chair of System Theory and Speech Technology, TU Dresden
## - Chair of Communications Engineering, BTU Cottbus
## 
## This file is part of dLabPro.
## 
## dLabPro is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
## 
## dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
## 
## You should have received a copy of the GNU Lesser General Public License
## along with dLabPro. If not, see <http://www.gnu.org/licenses/>.

PLATFORM: GNUC++
COMPILER: gcc
AR:       ar

## ----------------------------------------------------------------------------
## Class declaration, files and symbols

/cProject                                                                       # Generate ANSI C compatible code
/cxx_nconv
PROJECT:      profile
CLASS:        profile
COMMENT:      Profiler and debugging tools.
AUTHOR:       M. Eichner
VERSION:      1.1
AUTOINSTANCE: stdprof
FLAGS:        /noautoactivate

PINCLUDE:     <time.h>

/html MAN:
  The <code>profile</code> class supplies methods for measuring the running
  time of scripts or methods and for debugging the dLabPro executable.
END_MAN


## ----------------------------------------------------------------------------
## Fields

FIELD:   time
COMMENT: Accumulated time im milliseconds.
TYPE:    long
FLAGS:   /noset
/html MAN:
  <p>Contains the time (in milliseconds) elapsed between calls to
    <a href="#mth_-start_timer"><code class="link">-start_timer</code></a>/<a
    href="#mth_-end_timer"><code class="link">-end_timer</code></a> or
    <a href="#mth_-cont_timer"><code class="link">-cont_timer</code></a>/<a
    href="#mth_-break_timer"><code class="link">-break_timer</code></a>,
    respectively. The accumulated time may be reset to zero using the <a
    href="#mth_-reset_timer"><code class="link">-reset_timer</code></a> method.</p>
  <h4>See also:</h4>
  <p>Fields 
    <a href="#fld_calls"><code class="link">calls</code></a>,
    Methods
    <a href="#mth_-break_timer"><code class="link">-break_timer</code></a>,
    <a href="#mth_-cont_timer"><code class="link">-cont_timer</code></a>,
    <a href="#mth_-end_timer"><code class="link">-end_timer</code></a>,
    <a href="#mth_-reset_timer"><code class="link">-reset_timer</code></a>,
    <a href="#mth_-show_timer"><code class="link">-show_timer</code></a>,
    <a href="#mth_-start_timer"><code class="link">-start_timer</code></a></p>
END_MAN

FIELD:   calls
COMMENT: Number of measured timer intervals.
TYPE:    int
FLAGS:   /noset
/html MAN:
  <p>Contains the number of calls to <a href="#mth_-end_timer"><code
    class="link">-end_timer</code></a> or <a href="#mth_-break_timer"><code
    class="link">-break_timer</code></a> since the instanciation or the
    last call to <a href="#mth_-reset_timer"><code class="link"
    >-reset_timer</code></a>.</p>
  <h4>See also:</h4>
  <p>Fields 
    <a href="#fld_time"><code class="link">ptime</code></a>,
    Methods
    <a href="#mth_-break_timer"><code class="link">-break_timer</code></a>,
    <a href="#mth_-cont_timer"><code class="link">-cont_timer</code></a>,
    <a href="#mth_-end_timer"><code class="link">-end_timer</code></a>,
    <a href="#mth_-reset_timer"><code class="link">-reset_timer</code></a>,
    <a href="#mth_-show_timer"><code class="link">-show_timer</code></a>,
    <a href="#mth_-start_timer"><code class="link">-start_timer</code></a></p>
END_MAN

FIELD:   tstamp
COMMENT: Stores the date, time or timestamp.
CNAME:   m_sTstamp
TYPE:    24
FLAGS:   /noset
/html MAN:
  <p>Stores the date, time or timestamp generated by the most recent call to
  <a href="#mth_-date"><code class="link">-date</code></a>,
  <a href="#mth_-time"><code class="link">-time</code></a> or
  <a href="#mth_-tstamp"><code class="link">-tstamp</code></a>.</p>
  <h4>See also:</h4>
  <p>Methods
    <a href="#mth_-date"><code class="link">-date</code></a>,
    <a href="#mth_-time"><code class="link">-time</code></a>,
    <a href="#mth_-tstamp"><code class="link">-tstamp</code></a></p>
END_MAN

FIELD:   time0
TYPE:    long
FLAGS:   /hidden /noset


## ----------------------------------------------------------------------------
## Options


## ----------------------------------------------------------------------------
## Methods

## Profiling timer

METHOD:  -begin_timer
COMMENT: Init and start timer.
SYNTAX:  ()
CODE:
  CProfile_ResetTimer(_this);
  CProfile_ContTimer(_this);
END_CODE
/html MAN:
  <p>(Re)starts measuring the time. The accumulated time buffer <a href="#fld_time"
    ><code class="link">time</code></a>and the reference counter <a href="#fld_calls"
    ><code class="link">calls</code></a> will be reset. Use <a
    href="#mth_-end_timer"><code class="link">-end_timer</code></a> to stop the
    timer or <a href="#mth_-break_timer"><code class="link">-break_timer</code
    ></a> to pause the timer.</p>
  <h4>See also:</h4>
  <p>Fields 
    <a href="#fld_calls"><code class="link">calls</code></a>,
    <a href="#fld_time"><code class="link">time</code></a>,
    Methods
    <a href="#mth_-break_timer"><code class="link">-break_timer</code></a>,
    <a href="#mth_-cont_timer"><code class="link">-cont_timer</code></a>,
    <a href="#mth_-end_timer"><code class="link">-end_timer</code></a>,
    <a href="#mth_-reset_timer"><code class="link">-reset_timer</code></a>,
    <a href="#mth_-show_timer"><code class="link">-show_timer</code></a>
END_MAN

METHOD:  -end_timer
COMMENT: Stop timer and display measured time.
SYNTAX:  (cstring sMsg)
CODE:
  CProfile_BreakTimer(_this);
  if (dlp_strlen(sMsg)) CProfile_ShowTimer(_this,sMsg);
END_CODE
/html MAN:
  <p>Stops measuring the time and displays the accumulated time in milliseconds.
    If <code>sMsg</code> is empty the timer is just stopped. The timer is not
    reset, thus you can resume time measuring using the <a href="#mth_-cont_timer"
    ><code class="link">-cont_timer</code></a> method. </p>
  <h4>See also:</h4>
  <p>Fields 
    <a href="#fld_calls"><code class="link">calls</code></a>,
    <a href="#fld_time"><code class="link">time</code></a>,
    Methods
    <a href="#mth_-break_timer"><code class="link">-break_timer</code></a>,
    <a href="#mth_-cont_timer"><code class="link">-cont_timer</code></a>,
    <a href="#mth_-reset_timer"><code class="link">-reset_timer</code></a>,
    <a href="#mth_-show_timer"><code class="link">-show_timer</code></a>,
    <a href="#mth_-start_timer"><code class="link">-start_timer</code></a>
END_MAN

METHOD:  -cont_timer
COMMENT: Continue timer.
SYNTAX:  ()
CODE:
  #if (defined __GNUC__ || defined _MSC_VER || defined __TMS)
  _this->m_nTime0 = (INT32)(clock()/(INT32)((FLOAT64)CLOCKS_PER_SEC/1000.));
  #else
    MMTIME rNow; timeGetSystemTime(&rNow,sizeof(MMTIME));
    _this->m_nTime0 = rNow.u.ms;
  #endif
END_CODE
/html MAN:
  <p>Resumes time measuring after <a href="#mth_-break_timer"><code
  class="link">-break_timer</code></a> or <a href="#mth_-end_timer"><code
  class="link">-end_timer</code></a>. This method may also be used instead
  of <a href="#mth_-start_timer"><code class="link">-start_timer</code></a>
  for the first start of the timer after instanciation.</p>
  <h4>See also:</h4>
  <p>Fields 
    <a href="#fld_calls"><code class="link">calls</code></a>,
    <a href="#fld_time"><code class="link">time</code></a><br>
    Methods
    <a href="#mth_-break_timer"><code class="link">-break_timer</code></a>,
    <a href="#mth_-end_timer"><code class="link">-end_timer</code></a>,
    <a href="#mth_-reset_timer"><code class="link">-reset_timer</code></a>,
    <a href="#mth_-show_timer"><code class="link">-show_timer</code></a>,
    <a href="#mth_-start_timer"><code class="link">-start_timer</code></a>
END_MAN

METHOD:  -break_timer
COMMENT: Break timer.
SYNTAX:  ()
CODE:
  #if (defined __GNUC__ || defined _MSC_VER || defined __TMS)
    if (_this->m_nTime0>0) _this->m_nTime += (INT32)(clock()/(INT32)((FLOAT64)CLOCKS_PER_SEC/1000.))-_this->m_nTime0;
  #else
    MMTIME rNow; timeGetSystemTime(&rNow,sizeof(MMTIME));
    if (_this->m_nTime0>0) _this->m_nTime += rNow.u.ms-_this->m_nTime0;
  #endif
  _this->m_nTime0=0;
  _this->m_nCalls++;
END_CODE
/html MAN:
  <p>Pauses time measuring. Use <a href="#mth_-cont_timer"><code
  class="link">-cont_timer</code></a> to resume.</p>
  <h4>See also:</h4>
  <p>Fields 
    <a href="#fld_calls"><code class="link">calls</code></a>,
    <a href="#fld_time"><code class="link">time</code></a><br>
    Methods
    <a href="#mth_-cont_timer"><code class="link">-cont_timer</code></a>,
    <a href="#mth_-end_timer"><code class="link">-end_timer</code></a>,
    <a href="#mth_-reset_timer"><code class="link">-reset_timer</code></a>,
    <a href="#mth_-show_timer"><code class="link">-show_timer</code></a>,
    <a href="#mth_-start_timer"><code class="link">-start_timer</code></a>
END_MAN

METHOD:  -reset_timer
COMMENT: Clear timer.
SYNTAX:  ()
CODE:
  CProfile_BreakTimer(_this);
  _this->m_nTime = 0;
  _this->m_nCalls = 0;
END_CODE
/html MAN:
  <p>Stops and resets time measuring by clearing the accumulated time buffer
    <a href="#fld_time"><code class="link">time</code></a> and the reference
    counter <a href="#fld_calls"><code class="link">calls</code></a>.</p>
  <h4>See also:</h4>
  <p>Fields 
    <a href="#fld_calls"><code class="link">calls</code></a>,
    <a href="#fld_time"><code class="link">time</code></a><br>
    Methods
    <a href="#mth_-break_timer"><code class="link">-break_timer</code></a>,
    <a href="#mth_-cont_timer"><code class="link">-cont_timer</code></a>,
    <a href="#mth_-end_timer"><code class="link">-end_timer</code></a>,
    <a href="#mth_-show_timer"><code class="link">-show_timer</code></a>,
    <a href="#mth_-start_timer"><code class="link">-start_timer</code></a>
END_MAN

METHOD:  -show_timer
COMMENT: Show timer.
SYNTAX:  (cstring sMsg)
CODE:
  char* lpsMsg = (char*)dlp_calloc(dlp_strlen(sMsg)+1,sizeof(char));
  dlp_strcpy(lpsMsg,sMsg);
  printf("%s%lu ms",(unsigned long)dlp_strlen(lpsMsg)?dlp_strconvert(SC_UNESCAPE,lpsMsg,lpsMsg):"",_this->m_nTime);
  dlp_free(lpsMsg);
END_CODE
/html MAN:
  <p>Displays the current accumulated time without stopping or taking into
    account a running timer. Use the <a
    href="#mth_-end_timer"><code class="link">-end_timer</code></a> method
    to stop a running timer before displaying the elapsed time.</p>
  <h4>See also:</h4>
  <p>Fields 
    <a href="#fld_calls"><code class="link">calls</code></a>,
    <a href="#fld_time"><code class="link">time</code></a><br>
    Methods
    <a href="#mth_-break_timer"><code class="link">-break_timer</code></a>,
    <a href="#mth_-cont_timer"><code class="link">-cont_timer</code></a>,
    <a href="#mth_-end_timer"><code class="link">-end_timer</code></a>,
    <a href="#mth_-reset_timer"><code class="link">-reset_timer</code></a>,
    <a href="#mth_-start_timer"><code class="link">-start_timer</code></a>
END_MAN

## dLabPro assertions

METHOD:  -assert
COMMENT: Assert if top of logic stack is FALSE
SYNTAX:  (boolean bCondition)
CODE:
  if (!bCondition) DLPASSERT(FMSG(dLabPro Script Assertion));
END_CODE
/html MAN:
  <p>If <code>bCondition</code> is <code>FALSE</code>, the dLabPro
    executable will be stopped and the system debugger will be started.</p>
  <p><b>Note:</b> This functionality is only available for dLabPro
    executables compiled in debug mode.</p>
END_MAN

## Heap check

METHOD:  -check_heap
COMMENT: Check heap integrity (only on windows platforms).
SYNTAX:  ()
CODE:
  #if (defined __MSVC && defined _DEBUG)
    DLPASSERT(_CrtCheckMemory());
  #else
    return IERROR(_this,ERR_NOTSUPPORTED,"-check_heap",0,0);
  #endif
END_CODE
/html MAN:
  <p>Checks the integrity of the debug heap. In case of heap errors
    the dLabPro executable will be halted and the system debugger
    will be started.</p>
  <p><b>Note:</b> This functionality is only available on Windows
    platforms for dLabPro executables compiled in debug mode.</p>
END_MAN

## Time and date

METHOD:  -time
COMMENT: Pushes the current time in the format 'hhmmss' on the string stack.
SYNTAX:  ()
CODE:
  time_t     tNow;
  struct tm* lpNow;
  time(&tNow);
  lpNow = localtime(&tNow);
  strftime(_this->m_sTstamp,23,"%H%M%S",lpNow);
  MIC_PUT_S(_this->m_sTstamp);  
END_CODE

METHOD:  -date
COMMENT: Pushes the current date in the format 'yyyy-mm-dd' on the string stack.
SYNTAX:  ()
CODE:
  time_t     tNow;
  struct tm* lpNow;
  time(&tNow);
  lpNow = localtime(&tNow);
  strftime(_this->m_sTstamp,23,"%Y-%m-%d",lpNow);
  MIC_PUT_S(_this->m_sTstamp);  
END_CODE

METHOD:  -tstamp
COMMENT: Pushes a time stamp in the format 'XXXXX-XXXXX' on the string stack.
SYNTAX:  ()
CODE:
  UINT64 nTime = dlp_time();
  sprintf(_this->m_sTstamp,"%015lX",(unsigned long)nTime);
  memmove(&_this->m_sTstamp[0],&_this->m_sTstamp[5],5);
  memmove(&_this->m_sTstamp[6],&_this->m_sTstamp[10],5);
  _this->m_sTstamp[5]='-';
  _this->m_sTstamp[11]='\0';
  MIC_PUT_S(_this->m_sTstamp);  
END_CODE


## ----------------------------------------------------------------------------
## dLabPro interface code

HEADERCODE:
  #if (defined __GNUC__ && !defined __MINGW32__)
    #include <sys/times.h>
  #elif !defined _MSC_VER && !defined __TMS
    #include <windows.h>
    #include <winuser.h>
  #endif
END_CODE


## Generate files
-cgen
quit

## EOF



