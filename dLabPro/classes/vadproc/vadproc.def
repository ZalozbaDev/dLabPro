## dLabPro class CVADproc (VADproc)
## - Definition file
##
## AUTHOR : Frank Duckhorn
## PACKAGE: dLabPro/classes
## 
## Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
## - Chair of System Theory and Speech Technology, TU Dresden
## - Chair of Communications Engineering, BTU Cottbus
## 
## This file is part of dLabPro.
## 
## dLabPro is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
## 
## dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
## 
## You should have received a copy of the GNU Lesser General Public License
## along with dLabPro. If not, see <http://www.gnu.org/licenses/>.

PLATFORM: GNUC++
COMPILER: gcc
AR:       ar
CFLAGS:   -Wno-trigraphs

PROJECT: VADproc
AUTHOR:  Frank Duckhorn
COMMENT: VAD implementation
VERSION: 1.0.0
CLASS:   VADproc
SUPERCLASS: ../fbaproc/fbaproc.def
/cxx_nconv                                                                      # Use strict C++ naming conventions

/html MAN:
END_MAN

## C/C++ files
INCLUDE: "dlp_data.h"
INCLUDE: "dlp_math.h"
INCLUDE: "dlp_gmm.h"
FILE:    vad_work.cpp

## Errors
ERROR:   VAD_UNKOWNMETH
COMMENT: Vad method is unkown: vad_prim = %s.

## Options

## Hidden fields

FIELD:   pre_sp
COMMENT: Maximal number of frames before speech to mark as speech
TYPE:    short
INIT:    3
CODE:
  return InitVAD();
END_CODE

FIELD:   post_sp
COMMENT: Number of frames after speech to mark as speech (must be less or equal nMinSi)
TYPE:    short
INIT:    4
CODE:
  return InitVAD();
END_CODE

FIELD:   min_sp
COMMENT: Minimal speech length
TYPE:    short
INIT:    4
CODE:
  return InitVAD();
END_CODE

FIELD:   min_si
COMMENT: Minimal silence length
TYPE:    short
INIT:    10
CODE:
  return InitVAD();
END_CODE

FIELD:   max_sp
COMMENT: Maximal speech length
TYPE:    short
INIT:    500
CODE:
  return InitVAD();
END_CODE

FIELD:   pow_thr
COMMENT: Threshold for energy with vad_type = pow
TYPE:    double
INIT:    1000000.

FIELD:   vad_type
COMMENT: Type of the primary Vad
TYPE:    255
INIT:    "pow"
/html MAN:
  This is the type of the primary VAD. It may have the values:
  <ul>
  <li><b>&quot;pow&quot;</b> - Use energy based threshold ({@link pow_thr})
  <li><b>&quot;gmm&quot;</b> - Use Gaussian based algorithm ({@link gmm}, {@link gmm_lab})
  <li><b>&quot;exists&quot;</b> - Use first component of frame as boolean for primary VAD
  <li><b>&quot;none&quot;</b> - Mark always as speech
  </ul>
END_MAN

FIELD:   gmm
COMMENT: Gaussian mixture models for vad_type = gmm
TYPE:    INSTANCE(gmm)
/html MAN:
  Should contain at least two mixture models for speech and silence.
  {@link gmm_lab} controls which mixture is for speech and which is for silence.
END_MAN

FIELD:   gmm_lab
COMMENT: Gaussian mixture model label (for vad_type = gmm)
TYPE:    INSTANCE(data)
/html MAN:
  Contains one label component for every mixture, which defines if the
  mixture is speech (value: 1) or silence (value: 0).
END_MAN

FIELD:   VadState
COMMENT: State of the Vad
TYPE:    void*
FLAGS:   /hidden /noset /nosave

## Methods

METHOD:  -vad
COMMENT: Add voice activity information to frame sequence
SYNTAX:  (data idFrames)
/html MAN:
  Parses frames in idFrames through voice activity detector.
  idFrames will be expanded with a boolean component named "VAD".
END_MAN

METHOD:  -vad_one
COMMENT: Return voice activity information for one frame
SYNTAX:  BOOL(data idFrame,long nR)
/html MAN:
  Parses the frame number nR in idFrame through voice activity detector.
  The voice activity information for that frame is returned, which is {@link -get_delay} frames in the past.
END_MAN

METHOD:  -get_delay
COMMENT: Get the VAD delay
SYNTAX:  long()
/html MAN:
  Returns the delay of the VAD.
END_MAN

METHOD:  -vad_primary
COMMENT: Do only primary vad decission (without state machine) for frame number nR in idFrames
SYNTAX:  BOOL(data idFrames,long nR)


INITCODE:

  // Call constructor of class CFBAproc
  INIT;

  // Extra initialization
  if(InitVAD() != O_K) return NOT_EXEC;
END_CODE

DONECODE:
  if(m_lpVadState) dlp_free(m_lpVadState);
  DONE;
END_CODE

## Generate and quit
-cgen
quit

## EOF

