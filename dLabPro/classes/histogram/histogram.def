## dLabPro class CHistogram (histogram)
## - Definition script
##
## AUTHOR : Christian-M. Westendorf, Matthias Wolff
## PACKAGE: dLabPro/classes
## 
## Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
## - Chair of System Theory and Speech Technology, TU Dresden
## - Chair of Communications Engineering, BTU Cottbus
## 
## This file is part of dLabPro.
## 
## dLabPro is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
## 
## dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
## 
## You should have received a copy of the GNU Lesser General Public License
## along with dLabPro. If not, see <http://www.gnu.org/licenses/>.

PLATFORM: GNUC++
COMPILER: gcc
AR:       ar
CFLAGS:   -Wno-trigraphs

PROJECT:  histogram
COMMENT:  Vector histogram
AUTHOR:   C.-M. Westendorf
VERSION:  2.20 SLC 1.3.98
CLASS:    histogram
MAN:
  Instances of the class histogram are containers and processors
  for building and using histograms from multivariate and classified
  data.

  A histogram of a class i is represented by a block of the histogramm
  array. The block contains <bins> records and <hdim> record compo-
  nents, where <bins> is the number of quantization steps and <hdim>
  is the number of numeric components of the data.

  The number of quantization steps and data components must be the 
  same for all classes, but the minimum and maximum values may be
  component and /or class specific.

  A lot of operations is available for histgram update and handling.
  Statistical data like mean and variance may be derived also from
  a histogram.

  RELEASED 26.3.98 c.m.w. V 2.10
END_MAN  

## C/C++ files
INCLUDE: "dlp_data.h"
INCLUDE: "dlp_obsolete.h"
FILE:    his_aux.cpp
FILE:    his_chi.cpp
FILE:    his_mod.cpp
FILE:    his_show.cpp
FILE:    his_stat.cpp
FILE:    his_upd.cpp
FILE:    his_err.cpp

## Defines
DEFINE:  HIS_STEPS (INT16)data_descr(m_hist,DESCR2)
DEFINE:  HIS_MODE  (INT16)data_descr(m_hist,DESCR1)

## Errors
ERROR:   HIS_ZERO
COMMENT: A data pointer is NULL.

ERROR:   HIS_INCONS
COMMENT: Used data are inconsistent.

ERROR:   HIS_EMPTY
COMMENT: Data are empty.

ERROR:   HIS_NOINP
COMMENT: Input data are empty.

ERROR:   HIS_TYPE
COMMENT: Called with data incorrect in type

ERROR:   HIS_TAB
COMMENT: Called with incorrect label table data.

ERROR:   HIS_NODAT
COMMENT: There is no numeric component in input data.

ERROR:   HIS_NOLAB
COMMENT: There is no label component in input data.
  
ERROR:   HIS_HISTO
COMMENT: Incorrect histogram data.

ERROR:   HIS_INDEX
COMMENT: Incorrect index data.
  
ERROR:   HIS_NOIC
COMMENT: Missing index component in data.
  
ERROR:   HIS_NOEXEC
COMMENT: Not executed by any reason.

ERROR:   HIS_NOSTEPS
COMMENT: To less bins (%d).

ERROR:   HIS_MINMAXERR
COMMENT: Parameter min=%g > max=%g ! Standard values used.

ERROR:   HIS_BINERR
COMMENT: Reset histogram before changing bins.

ERROR:   HIS_SHORTLIST
COMMENT: Index list is shorter than data ... only %d records

ERROR:   HIS_SHORTWEIGHT
COMMENT: Weighting sequence is shorter than data ... only %d records

ERROR:   HIS_POOLE
COMMENT: Sorry, pooling only for hmode = 1 or 2 possible ...

ERROR:   HIS_NODISP
COMMENT: No display instance available.

## Fields
FIELD:     bins
CNAME:     m_bins
COMMENT:   histogram quant. steps
TYPE:      int
INIT:      32
MAN:       
  <bins> defines the number of (linear) quantization steps of the
  processed input data. <bins> is the same for all classes and
  components.

  NOTE: Do not change <bins> during the update process.
END_MAN
CODE:
  if (data_empty(m_hist) != TRUE)
  {  if (m_bins != HIS_STEPS)
      IERROR(this,HIS_BINERR,0,0,0);
    m_bins=HIS_STEPS;
  }
END_CODE
   
FIELD:     nhist
CNAME:     m_nhist
COMMENT:   number of histograms
TYPE:      int
INIT:      1
MAN:       
  <nhist> is the number of histograms. The value of <nhist> is equal 1
  if an index independend update is performed.
  
  In the case of index or label dependend update the value of <nhist>
  is determined by the highest index.  
END_MAN
CODE:
  ReorgEx(NULL, m_nhist);
END_CODE

FIELD:     hdim
CNAME:     m_hdim
COMMENT:   numeric components
TYPE:      int
MAN:       
  <hdim> shows the number of numeric histogram components determined
  by the first data set used for update.

  NOTE:  number should not changed during the update process.
END_MAN
FLAGS:    /noset

FIELD:     hmode
CNAME:     m_hmode
COMMENT:   histogram mode
TYPE:      short
INIT:      1
MAN:       
  The histogram mode <hmode> may have the values 1,2 or 3:

  <hmode>=1: the upper and lower border of quantization interval is
             equal for all components and histograms. The borders are
             given by the parameters <min> and <max>.

  <hmode>=2: the upper and lower border of quantization interval may
             be different for the record components but is the same
             for all histograms.
             
             The borders are given by the data instance minmax.
             <hmode>=2 is assumed if minmax has two records.

  <hmode>=3: the upper and lower border of quantization interval may
             be specific as well as for the record components and for
             all histograms.
             
             The borders are given by the data instance <minmax>.
       <minmax> must habe two times as much records as there
                   are histograms (alternating minimum and maximum records).
           
  NOTE: The minimum/maximum data may be computed using the statistic
        toolbox.

  see also: min max minmax
END_MAN
FLAGS:    /noset

FIELD:     ssize
CNAME:     m_ssize    
COMMENT:   overall sample size
TYPE:      int
INIT:      0
MAN:       
  <sszize> counts the number of processed input vectors by the update
  operations cumulative, i.e. for all classes (sample size).
END_MAN
FLAGS:    /noset

FIELD:      count
CNAME:      m_count
COMMENT:    local sample size
TYPE:       int
INIT:       0
MAN:       
  <count> counts the number of processed input vectors used in the
  last update operation.
END_MAN
FLAGS:    /noset

FIELD:     calls
CNAME:     m_calls
COMMENT:   update calls
TYPE:      int
INIT:      0
MAN:       
  <calls> counts the number of calls of one of the update operations. 
END_MAN
FLAGS:    /noset

FIELD:     min 
CNAME:     m_min
COMMENT:   minimum in hmode 1
TYPE:      double
INIT:      0.
MAN:       
  <min> is the lower border of quantization intervalls of all histo-
  grams in <hmode> = 1. In  case all histograms have the same
  lower border.

  see also: hmode max
END_MAN
CODE:
  if (m_minmax && m_minmax!=m_minm) data_destroy(m_minmax);
  m_minmax=m_minm;
  SetDefMinmax();
END_CODE
  
FIELD:     max
CNAME:     m_max
COMMENT:   maximum in mode 1
TYPE:      double
INIT:      1.
MAN:       
  <max> is the upper border of quantization intervalls of all histo-
  gramms if <hmode> =1.

  see also: hmode min
END_MAN
CODE:
  if (m_minmax && m_minmax!=m_minm) data_destroy(m_minmax);
  m_minmax=m_minm;
  SetDefMinmax();
END_CODE
  
FIELD:     icomp
CNAME:     m_icomp
COMMENT:   index comp. in data
TYPE:      int
INIT:      -1L
MAN:       
  <icomp> is the index of an index component in the input data. In 
  the case <icomp> = -1 no index component is expected (default case). 

  An index component is a numeric data component which is not seen as
  part of the multivariate data but defines the index of the updated
  histogram block.

  If the index component is defined by setting up <cname> <icomp> is
  overwritten.

  see also: cname -update -update_i
END_MAN

FIELD:     cname
CNAME:     m_cname
COMMENT:   name of index comp. in data
TYPE:      5
MAN:       
  <cname> is the name of an index component in the input data. 
  
  An index component is a numeric data component which is not seen as
  part of the multivariate data but defines the index of the updated
  histogram block.

  If <cname> is empty no index component is expected. If a component
  named <cname> exists, <icomp> is set according to <cname>.
     
  see also: icomp
END_MAN

FIELD:     wflag
CNAME:     m_wflag
COMMENT:   flag for windowed update
TYPE:      short
FLAGS:    /hidden

FIELD:     pl
CNAME:     m_pl
COMMENT:   verbose level
TYPE:      short
INIT:      0
MAN:       
  <pl> controls the level of protocol output.

    pl=0 - no output
    pl=1 - protocol output
END_MAN

FIELD:     hist
CNAME:     m_hist
COMMENT:   histogram data
TYPE:      DATA
MAN:
   data instance contains the histogram data.

  It is build automatically during the histogram update.

  It is possible to overwrite the parameter by assigning an externally
  defined data instance, but it must fulfill the conditions for histo-
  gram data, otherwise it is rejected.
END_MAN
CODE:
  m_calls  = 0;
  m_count  = 0;
  m_ssize  = 0;
  m_hmode  = 1;
  if (data_empty(m_hist) != TRUE)
  {
    m_nhist   =data_nblock(m_hist);
    m_hdim =data_dim(m_hist);
  }
END_CODE
     
FIELD:     minm
CNAME:     m_minm
COMMENT:   predefined min-max data instance
TYPE:      DATA
FLAGS:    /hidden

FIELD:     minmax
CNAME:     m_minmax
COMMENT:   current min-max data
TYPE:      DATA
MAN:
  A data instance assigned to parameter <minmax> contains the component-
  or class-specific minimum/maximum values (upper/lower borders) for
  the quantization.

  If <minmax> contains 2 records of <hdim> numeric components, histo-
  gram mode <hmode>=2 is assumed. The quantization interval is compo-
  nent dependend, but not class dependend.

  If <minmax> contains 2*<nhist> records of <hdim> numeric components,
  histogram mode <hmode>=3 is assumed. The quantization interval is
  component dependend and class dependend.

  If nothing is assigned, <hmode>=1. In  case, the borders are
  taken from parameter <min> and <max>.

  All other cases yields to an error.

  see also: min max hmode
END_MAN
CODE:
  if ((m_hmode=CheckMinmax()) < 1)
  {
    if (m_minmax && m_minmax!=m_minm) data_destroy(m_minmax);
    m_minmax = m_minm;
    SetDefMinmax();
    return(O_K);
  }
  if (data_empty(m_hist) != TRUE)
  {
    if (CheckConsist() != O_K)
     {
      if (m_minmax && m_minmax!=m_minm) data_destroy(m_minmax);
      m_minmax = m_minm;
      SetDefMinmax();
      return (O_K);
    }
  }
  //printf ("\n o.k. - new minmax data assigned; hmode=%d", m_hmode);
END_CODE

FIELD:     labtab
CNAME:     m_labtab
COMMENT:   label table
TYPE:      DATA
MAN:
  If a label table was used in the update process to get the index
  of the data vectors table is preserved by parameter <labtab>.

  It may be copied to a data instance tab by

     <hist> get labtab tab -copy
END_MAN
FLAGS:    /noset

FIELD:     indexlist
CNAME:     m_indexlist
COMMENT:   index list
TYPE:      DATA
MAN:
  If an indexed update was performed in the update process the index
  list of the last update call is preserved by parameter <indexlist>.

  It may be copied to an external data instance ind by

    <hist> get indexlist ind -copy
END_MAN
FLAGS:    /noset

## Methods
METHOD:  -update
SYNTAX:  (data x)
COMMENT: Histogram update, index independent
MAN:         
  The numeric data from data <x> are used to update histogram .
  
  The update is performed index independend, that means all data of
  one vector component are cumulated in the same histogram. However,
  the vector components of the input data are processed separately.

  If an index component is specified - see <icomp> or <cname> - 
  component is not incluuded into the histogram data. Symbolic data
  components are not used alsoo.

  NOTE: Before updating the histogram, set up <bins>, <min>, <max> or
        <minmax>.

  see also: min max minmax icomp cname -update_i
END_MAN
CODE:
  FindIndexcomp (x);
  UpdateHist    (x,NULL);
  UpdateHdesc   (); 
END_CODE

METHOD:  -update_i
SYNTAX:  (data x, data itab)
COMMENT: Histogram update, index dependent
MAN:       
  The numeric data from data <x> are used to update histogram .
  
  The update is performed index dependent. The index may be defined
  by one of three methods:
  
  1. A component name is specified using paramter <icomp> or <cname>.
     In  case, an index component is expected in the data <x>
     assigning an index to the data vector (integer number). Parameter
     <itab> is ignored in  case (may be NULL).

  2. If <icomp> or <cname> is empty, the index is taken from the data
     instance <itab>.
     
     If the component 0 of <itab> is numeric, the content of  com-
     ponent is interpreted as index of the corresponding data vector
     in <x>.

  3. Further, the index may be defined by a symbolic (label) component
     in the records of the data instance <x>. In  case, <itab> has
     to be a label table.
     
     A label table is a data instance containing a list of symbolic
     label in the first component of the records.

     If a label from <x> is found in <itab>, the position in <itab> will
      be the index of the data vector.

  NOTE: Before updating the histogram, set up <bins>, <min>, <max> or
        <minmax>.

  see also: min max minmax
END_MAN
CODE:
  FindIndexcomp(x);
  GenIndexlist(x,itab);
  UpdateHist(x,NULL);
  UpdateHdesc();
END_CODE

METHOD:  -update_iw
SYNTAX:  (data x, data itab, data w)
COMMENT: Weighted histogram update, index dependent
MAN:
   command acts like -update_i, but additional a sequence of 
  weight factors <w> may be defined. Before updating the histogram
  the data vector t from data <x> is multiplied by w(t,0).

  see also: -update_i
END_MAN
CODE:
  FindIndexcomp (x);  
  GenIndexlist  (x,itab);
  UpdateHist    (x, w);
  UpdateHdesc ();
END_CODE

METHOD:  -update_w
SYNTAX:  (data x, data w)
COMMENT: Soft histogram update
MAN:      
  The numeric data from instance <x> are used to update .

  The records of <w> contain m weighting factors representing the
  memberships to the m histograms. That means, that the record x(t)
  is weigthed by m(t,i) if it is added to class i. So, a data record
  may belong to all of the m classes.

  see also: -update_i
END_MAN
CODE:
  FindIndexcomp   (x);
  UpdateHist      (x, w);
  UpdateHdesc     ();
END_CODE

METHOD:  -poole
SYNTAX:  (INSTANCE(histogram) hp)
COMMENT: Compute pooled (overall) histogram hp, unweighted
MAN:     
  From the index dependend histogram  a index independed histo-
  gram <hp> is computeted by adding all histogram blocks from .

  NOTE:  operation is possible only in <hmode> = 1 or <hmode> = 2.
END_MAN

METHOD:  -meanvar
SYNTAX:  (data mean, data var)
COMMENT: Mean/variance from histogram
MAN:     
  From histogram , means and variances are calculated for all
  classes i and components j.

  <mean> and <var> after executions contain <nhist> records each.
  
  mean(i,j) or var(i,j) is the mean or the variance of histogram
  component j of class i.
END_MAN
CODE:
      MeanVar ( mean, var );
END_CODE

METHOD:  -quantil
SYNTAX:  (data qlo, data qhi, data pql, double p)
COMMENT: Wuantil interval from histogram
MAN:     
  -quantil computes the p-quantil interval (qlo, qhi) from a histo-
  gram . 

  Parameter:

    <qlo>    - lower border of the quantil  (result)
    <qhi>    - upper border of the quantil  (result)
    <pql>    - prob. at lower border        (result)
        <p>      - probability, prob( 0<= p <= 1)
      
  A quantil is the value x_p with  prob( x <= x_p ) = p. Because of
  the quantization in a histogram, only an interval for the quantil
  may be computed:

      prob( x <= qlo ) <= p
      prob( x <= qhi ) >= p;

END_MAN
CODE:
       Pquantil (qlo, qhi, pql, p );
END_CODE

METHOD:  -chiqu_stat
SYNTAX:  (INSTANCE(histogram) h, data chi)
COMMENT: Chi-quadrat-statistic of two histogram sets
MAN: 
  The chi-quadrat-statistic of the corresponding histograms of two
  histogram sets is computed.
  
  The first histogram set is defined by <h>, the second by .

  The result is stored to data instance <chi>. Histogram <h> and 
  must have the same component number <hdim> and the same quantization,
  otherwise an error occurs.

  After execution, the instance <chi> contains <hdim> components and
  <nhist> records. The element chi(i,j) is the value of chi-quadrat
  computed from componten j of histogram i of <h> and .

  If the histogram number differs, <nhist> is taken from the smaller
  histogram. 
END_MAN
CODE:
  Chiqu (this, h, chi);
END_CODE

METHOD:  -chiqu_stat_a
SYNTAX:  (data chi, int ic)
COMMENT: Chi-quadrat-statistic inside one histogram set
MAN:     
  By  command, the chi-quadrat-statistic between all histograms
  of component <ic> from histogram H is computed.
  
  After execution, <chi> contains <nhist> components and <nhist>
  records. chi(i,j) is the chi-quadrat of the histogram component <ic>
  from histogram i and the same component of histogram j.

  If ic < 0, the mean value of chi-quadrat over all histogram
  components is computed.

  see also: -chiqu_stat
END_MAN
CODE:
  ChiquComp (chi, ic);
END_CODE

METHOD:  -reorg
SYNTAX:  (data ex)
COMMENT: Reorganize histograms
MAN:     
  -reorg reorganizes the histogram conmtrolled by the index data 
  instance <ex>.
  
  A histogram i is removed if ex(i,0) = 0.

  If ex(i,0) > 0, the histogram i is preserved, if i is less then the
  number <nhist> of histogramms. In the case i >= nhist a new empty
  histogram is opened and added to .
END_MAN
CODE:
  ReorgEx(ex, 0);
END_CODE

METHOD:  -clear
SYNTAX:  () 
COMMENT: Clear histogram(s)
MAN:     
  -clear clears the content of histogram buffers (set to 0).
END_MAN
CODE:  
    m_calls  =  0;
    m_count  =  0;
    m_ssize  =  0;
    data_clear (m_hist);
END_CODE

METHOD:  -reset
CNAME:   VhReset
SYNTAX:  () 
COMMENT: Reset histogram(s)
MAN:     
  The data array of histogram is reseted. All data are lost.

  NOTE: Use -reset if a the update function is started with completely
        new data.
END_MAN
CODE:
  m_calls  =  0;
  m_count  =  0;
  m_ssize  =  0;
  m_hdim   =  0;
        m_nhist  =  0;
        data_reset (m_hist);
END_CODE

METHOD:  -copy_hbl
SYNTAX:  (int i, int j)
COMMENT: Copy histogram block i to block j
MAN:      
  All components of  histogram block i are copied  to the correspon-
  ding components of histogram block j. If block i or j resp. does
  not exist no operation is performed.

  see alsoo: -mcopy_hbl
END_MAN
CODE:
      CopyBlock (i, j);
END_CODE

METHOD:  -mcopy_hbl
SYNTAX:  (int i)
COMMENT: Copy histogram block i to all blocks
MAN:     
  All components of  histogram block i are copied to to the correspon-
  ding components of all other histogram blocks.

  After  operation, all histogram blocks are equal.
END_MAN
CODE:
        CopyBlock (i, -1);
END_CODE

METHOD:  -select
SYNTAX:  (data h, int i)
COMMENT: Select histogram block i
MAN:      
  The histogram of class (index) i is selected from histogram  and
  stored into the data instance <h>.
END_MAN
CODE:
      SelectBlock (h, i, -1);
END_CODE

METHOD:  -show
SYNTAX:  (int i, data idOut)
COMMENT: Show histogram block i 
MAN:
  Prints a summary and copies the histogram of class <i> to <idOut>. Use
  the <-show> method of the interpreter to display the histogram.

  see also: -show_c
END_MAN
CODE:
  ShowEx(i,-1,"",idOut); 
END_CODE

METHOD:  -show_c
SYNTAX:  (int i, int ic, data idOut)
COMMENT: Show component ic of histogram block i
MAN:     
  Prints a summary and copies component <ic> of the histogram of class
  <i> to <idOut>. Use the <-show> method of the interpreter to display
  the histogram.

 see also: -show
END_MAN
CODE:
  ShowEx(i,ic,"",idOut);
END_CODE

METHOD:  -status
SYNTAX:  ()
COMMENT: Print status
MAN:      
  -status prints the status description of the histogram.
END_MAN
CODE:
  PrintStatus ();
END_CODE

METHOD:  -print_st
SYNTAX:  (int i)
COMMENT: Print statistic of histogram block i
MAN:      
  -print_st prints a statistic of histogram block i, containing

  -  assigned label, if available
  -  component name
  -  minimum of quant. range
  -  maximum of quuantization range
  -  sum of histogram values
  -  mean value, estimated from histogram
  -  standard deviation

END_MAN
CODE:
  PrintPar (i);
END_CODE

METHOD:  -print_minmax
SYNTAX:  ()
COMMENT: Print current minmax-data
MAN:      
  -print_minmax prints the current minmax data of the histogram.
END_MAN
CODE:
  data_print (m_minmax);
END_CODE

METHOD:  -print_index
SYNTAX:  ()
COMMENT: Print index list
MAN:      
  -print_index prints the current index data used for last update.
END_MAN
CODE:
  data_print (m_indexlist);
END_CODE

METHOD:  -print_labtab
SYNTAX:  ()
COMMENT: Print label table
MAN:      
  -print_index prints the current label table of the histogram.
END_MAN
CODE:
  data_print (m_labtab);
END_CODE

## Options
OPTION:  /window
COMMENT: Windowed update
MAN:      
  If the /window option is used before updating a histogram, only 
  data in the range given by the lower and upper border of the
  quantization interval are used. All other data values are ignored.
  
  If /window is not used (default), all data less the lower border
  of the first bin are included into the first bin. All data greater
  the upper border of last bin are included into the last bin.
END_MAN
CODE:
  m_wflag = 1;
END_CODE

## dLabPro interface code snippets
RESETCODE:
  RESET;
  IFIELD_RESET(CData,"hist");
  IFIELD_RESET(CData,"labtab");
  IFIELD_RESET(CData,"indexlist");
  SetDefMinmax();
END_CODE

DONECODE:
  if (m_minm==m_minmax) m_minmax=NULL;
  if (m_minm) { data_destroy(m_minm); m_minm=NULL; }
  DONE;
END_CODE;

## Generate and quit
-cgen
#quit

## EOF
