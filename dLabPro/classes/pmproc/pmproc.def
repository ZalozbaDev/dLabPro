## dLabPro class CPMproc (PMproc)
## - Definition script
##
## AUTHOR : Guntram Strecha
## PACKAGE: dLabPro/classes
## 
## Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
## - Chair of System Theory and Speech Technology, TU Dresden
## - Chair of Communications Engineering, BTU Cottbus
## 
## This file is part of dLabPro.
## 
## dLabPro is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
## 
## dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
## 
## You should have received a copy of the GNU Lesser General Public License
## along with dLabPro. If not, see <http://www.gnu.org/licenses/>.

PLATFORM: GNUC++
COMPILER: gcc
AR:       ar

PROJECT:  PMproc
COMMENT:  Base class for pitch calculation.
AUTHOR:   Guntram Strecha
VERSION:  1.0 DLP

CLASS:    PMproc
/cxx_nconv                                                                      # Use strict C++ naming conventions

/html MAN: 
       <p>This is the class for all pitch calculation methods:</p>
       <p>Currently implemented algorithms:<p>
       <p>    - CHFA<p>
END_MAN

## Files
INCLUDE: "kzl_list.h"
INCLUDE: "dlp_data.h"
INCLUDE: "dlp_math.h"

FILE:    pm_work.cpp
FILE:    pm_epochdetect.cpp
FILE:    pm_chfa.cpp
FILE:    pm_gcida.cpp
FILE:    pm_hybrid.cpp


## Defines

######################################################################
# ERROR codes

ERROR:   PM_SIGLENGTH
COMMENT: To many voiced segments (%d). Reduce the length of speech signal.

ERROR:   PM_FFTSIZE
COMMENT: Precomputed trig tables are not big enough in fft (%d < %d).

######################################################################

## Fields

FIELD:   srate
COMMENT: Sample rate.
TYPE:    int
INIT:    16000

FIELD:   mean
COMMENT: Mean base F0.
TYPE:    short
INIT:    100

FIELD:   min
COMMENT: Minimum base F0.
TYPE:    short
INIT:    50
CODE:
         ChfaFreeTables();
         ChfaAllocTables();
END_CODE

FIELD:   max
COMMENT: Maximum base F0.
TYPE:    short
INIT:    400
CODE:
         ChfaFreeTables();
         ChfaAllocTables();
END_CODE

FIELD:   level
COMMENT: Adjust voiceless/voiced decision. Higher values produce more voiceless periods.
TYPE:    double
INIT:    2.0

FIELD:   filt_b_r
COMMENT: Internal filter table.
TYPE:    double**
FLAGS:   /hidden /noset /nonautomatic

FIELD:   filt_b_i
COMMENT: Internal filter table.
TYPE:    double**
FLAGS:   /hidden /noset /nonautomatic

## Options

OPTION:  /epochdetect
COMMENT: Compute pitch markers using EpochDetect method.

OPTION:  /chfa
COMMENT: Compute pitch markers using Complex Harmonic Filter Analysis (CHFA).

OPTION:  /gcida
COMMENT: Compute pitch markers using GCIDA.

OPTION:  /hybrid
COMMENT: Compute pitch markers using hybrid method.


## Methods

METHOD:  -analyze
COMMENT: Run pitch marking.
SYNTAX:  (data idSignal, data idPitch)
/html MAN:
         <p>Run pitch marking of signal <CODE>idSignal</CODE> using the desired method. Default method is <CODE>/chfa</CODE>.</p>

         @param idSignal Input signal
         @param idPitch  Ouput pitch information
         @see /chfa
END_MAN

METHOD:  -expand_pm
COMMENT: Expand/reduce number of pitch markers to fit new target sum of period length.
SYNTAX:  (data idSrc, data idDst, int n)
/html MAN:
  <p>The number of pitch markers in <code>idSrc</code> were expanded/reduced to
  new pitch markers <code>idDst</code>. The sum of period length of the new
  pitch markers fit the target sum given by <code>n</code>.</p>
  <p>This is the inverse of function {@link-compress_pm}.</p>

  @param idSrc Input pitch markers
  @param idDst Output pitch markers
  @param n     Target sum of period lengths of <code>idDst</code>
  @see -compres_pm
END_MAN

METHOD:  -compress_pm
COMMENT: Expand/reduce number of pitch markers to new number.
SYNTAX:  (data idSrc, data idDst, int n)
/html MAN:
  <p>The number of pitch markers in <code>idSrc</code> were expanded/reduced to
  new number <code>n</code>.</p>
  <p>This is the inverse of function {@link-compress_pm}.</p>

  @param idSrc Input pitch markers
  @param idDst Output pitch markers
  @param n     Target number of pitch markers
  @see -expand_pm
END_MAN

METHOD:  -fill
COMMENT: Add periods to reach desired sum od periods.
SYNTAX:  (data idSrc, data idDst, int n, cstring method)
/html MAN:
  <p>Fill the data object <code>idSrc</code>, that holds the pitch markers, with
  pitch marks according to <code>method</code> so that their sum is <code>n</code>.
  If the sum is greater than <code>n</code> pitch markers were cut. The result
  is stored in <code>idDst</code>.</p>
  <p><code>method</code> is on of the following:</p>
  <ul>
    <li>"mean": The length of the added pitch markers is the mean of the existing
                pitch markers, the v/uv is set to voiceless.
    </li>
  </ul>
END_MAN

METHOD:  -pm2f0
COMMENT: Convert (unequal spaced) pitch markers to f0-contour with equal spaced sampling points.
SYNTAX:  (data idSrc, data idDst, int n, int srate)
/html MAN:
  <p> Convert (unequal spaced) pitch markers to f0-contour with <code>n</code> equal
  spaced sampling points.</p>
END_MAN

METHOD:  -f02pm
COMMENT: Convert f0-contour with equal spaced sampling points to pitch markers.
SYNTAX:  (data idSrc, data idDst, int n, int srate)
/html MAN:
  <p>Convert f0-contour with equal spaced sampling points to pitch markers. The sum of period
  length will match <code>n</code>.</p>
END_MAN

## Release notes

## System functions

INITCODE:
  INIT;
END_CODE

RESETCODE:
  RESET;
END_CODE

DONECODE:
  ChfaFreeTables();
  DONE;
END_CODE

## Generate files
-cgen
quit

## EOF
