## dLabPro class CFTTproc (FTTproc)
## - Definition file
##
## AUTHOR : Steffen Kuerbis
## PACKAGE: dLabPro/classes
## 
## Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
## - Chair of System Theory and Speech Technology, TU Dresden
## - Chair of Communications Engineering, BTU Cottbus
## 
## This file is part of dLabPro.
## 
## dLabPro is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
## 
## dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
## 
## You should have received a copy of the GNU Lesser General Public License
## along with dLabPro. If not, see <http://www.gnu.org/licenses/>.

PLATFORM: GNUC++
COMPILER: gcc
AR:       ar
CFLAGS:   -Wno-trigraphs

PROJECT: FTTproc
AUTHOR:  Steffen Kuerbis
COMMENT: Fourier-t-transform
VERSION: 1.0.0
CLASS:   FTTproc
SUPERCLASS: ../fbaproc/fbaproc.def
/cxx_nconv                                                                      # Use strict C++ naming conventions

/html MAN:

  <p>The instances of class are signal processors which perform the
  Fourier-t-transform (FTT).
  </p>
  <p>
  The FTT calculates ...
  <p>

<b><a name="mel">Mel-Scale</a></b><br/>
The mel-scale describes the pitch perception of human being by using the unit <i>Bark</i>. 
It equals a linear scaling of frequency range below about <i>1kHz</i> and a logarithmic scaling above <i>1kHz</i>.
The relation between frequency- and mel-scale is shown by (according to <a href="#literature">[Zwicker]</a>):<br/>
<span style="font-size:25px">&nbsp;&nbsp;<img src="../resources/melproc/bark_calc_14pt.gif" border="0" align="absmiddle" alt="z_{Bark}=13\arctan{(0.76f/kHz)}+3.5\arctan{(f/7.5kHz)^2)}\quad [Bark]"></span><br/>
The implemented filter bank has a resolution of about <i>0.7Bark</i>, that causes <i>30</i> channels up to a 
cut-off-frequency of <i>16kHz</i>. The critical band width is specified by following equation (according to <a href="#literature">[Zwicker]</a>):<br/>
<span style="font-size:25px">&nbsp;&nbsp;<img src="../resources/melproc/critical_band_width.gif"  border="0" align="absmiddle" alt="b=25+75(1+1.4(f/kHz))^{0.69}\quad [Hz]"></span><br/>
The really implemented parameters of the filter bank are listed in <a href="#table1">Table 1</a>.<br/>
The transformation of the linear frequency line into the mel-scale is done by a <a href="#cepstral">cepstral smoothing</a>, that is specified in next section.   
  </p>
  <p>

  <b>Table 2:</b> Description of mathematic symbols
  <table>
    <tr>
      <th>Symbol</th>
      <th>Description</th> 
    </tr>
    <tr>
      <td>
        <img src="../resources/melproc/tab_1_column_1_head.gif"  border="0" align="absmiddle"
        alt="k">
      </td>
      <td>
        Channel index
      </td>
    </tr>
    <tr>
      <td>
        <img src="../resources/melproc/tab_1_column_2_head.gif" border="0" align="absmiddle"
        alt="k">
      </td>
      <td>Index of FFT-pin at channel centre frequency</td>
    </tr>
    <tr>
      <td>
        <img src="../resources/melproc/tab_1_column_3_head.gif" border="0" align="absmiddle"
        alt="k">
      </td>
      <td>
        Freguency in <i>Hz</i> corresponding  to <img src="../resources/melproc/tab_1_column_2_head.gif" border="0" align="absmiddle" alt="k">
      </td>
    </tr>
    <tr>
      <td>
        <img src="../resources/melproc/tab_1_column_4_head.gif" border="0" align="absmiddle"
        alt="k">
      </td>
      <td>Channel centre frequency in <i>Bark</i></td>
    </tr>
    <tr>
      <td>
        <img src="../resources/melproc/tab_1_column_5_head.gif" border="0" align="absmiddle"
        alt="k">
      </td>
      <td>Theoretical width of the critical band</td>
    </tr>
    <tr>
      <td>
        <img src="../resources/melproc/tab_1_column_6_head.gif" border="0" align="absmiddle"
        alt="k">
      </td>
      <td>Max. number of FFT-pins for which the upper half of the convolution core is calculated</td>
    </tr>
    <tr>
      <td>
        <img src="../resources/melproc/tab_1_column_7_head.gif" border="0" align="absmiddle"
        alt="k">
      </td>
      <td>
        Frequency in <i>Hz</i> corresponding to <img src="../resources/melproc/tab_1_column_7_head.gif" border="0" align="absmiddle" alt="k">
      </td>
    </tr>
    <tr>
      <td>
        <img src="../resources/melproc/tab_1_column_8_head.gif" border="0" align="absmiddle"
        alt="k">
      </td>
      <td>Scale factor</td>
    </tr>
  </table>
  </p>

  <p>

    <b><a name="smoothing">Smoothing</a></b></br>
    .... *TODO*
  </p>

  <p>
    <b><a name="literature">Literature:</a></b></br>
    <table border="0">
      <tr>
        <td>
          [Heinbach]&#160&#160   
        </td>
        <td>
          Heinbach, W.: <i>Geh&ouml;rgerechte Repr&auml;sentation von Audiosignalen durch das Teiltonzeitmuster</i> Dissertation TU M&uumlnchen 1982
        </td>
      </tr>
    </table>
  </p>

END_MAN



## C/C++ files
INCLUDE: "dlp_data.h"
INCLUDE: "dlp_math.h"
FILE:    ftt_work.cpp
FILE:    ftt_stat.cpp

## Hidden fields


FIELD:   coeff
COMMENT: number of frequency channels .
TYPE:    int
INIT:    20

CODE:
  InitFTT(FALSE);
END_CODE

MAN:

  <coeff> is the number of frequency channels calculated.

END_MAN


FIELD:   startfreq
COMMENT: start frequency [Hz].
TYPE:    float
INIT:    100.

CODE:
  return InitFTT(FALSE);
END_CODE

MAN:
  <startfreq> is the mid frequency of the first channel (measured in [Hz]).
END_MAN


FIELD:   bandwidth
COMMENT: bandwidth [Bark].
TYPE:    float
INIT:    0.8
CODE:
  return InitFTT(FALSE);
END_CODE

MAN:
  <bandwidth> is a factor to 1 Bark bandwidth at the given frequency.
END_MAN


FIELD:   finc
COMMENT: frequency increment [Bark].
TYPE:    float
INIT:    0.8

CODE:
  return InitFTT(FALSE);
END_CODE

MAN:

  <finc> is the frequency increment to the next mid frequency (measured in [Bark]).

END_MAN


FIELD:   sm_coeff
COMMENT: smooth coefficient
TYPE:    float
INIT:    0.7
CODE:
  return InitFTT(FALSE);
END_CODE

MAN:

  <sm_coeff> is the coefficient for smoothing the spectral components in time direction.

END_MAN


FIELD:   norm_coeff
COMMENT: normalize factor
TYPE:    float
INIT:    1.0

CODE:
  return InitFTT(FALSE);
END_CODE

FIELD:   log
COMMENT: range of logarithm in compatibility mode [dB]
TYPE:    float
INIT:    90.0

CODE:
  return InitFTT(FALSE);
END_CODE

FIELD:   maxval
COMMENT: maximum value of samples in compatibility mode
TYPE:    float
INIT:    32767.0

CODE:
  return InitFTT(FALSE);
END_CODE

MAN:

  <norm_coeff>is the coefficient for normalizing the magnitude of the spectrum).

END_MAN


FIELD:   ftt_type
COMMENT: type of ftt.
TYPE:    255
INIT:    "M"

CODE:
  return InitFTT(FALSE);
END_CODE

MAN:

     Sets the type of melfilter.
     Possible values are: "M"
       - "M" = Center frequencies according to the mel scale
       - "C" = like "M", but different algorithm for scaling and log

END_MAN


FIELD:   ftt
TYPE:    MLP_FTT_TYPE*
FLAGS:   /hidden /noset

## Errors

ERROR:   FTT_LEN
COMMENT: Parameters len, wlen and crate not equal. wlen is used!
LEVEL:   EL_WARNING

ERROR:   FTT_WINDOW
COMMENT: Window type is '%s'. FTT sets wtype to '%s'!
LEVEL:   EL_WARNING

ERROR:   FTT_WTYPE
COMMENT: FTT type is '%s'. FTT needs ftt_type '%s'.


## Options

OPTION:  /noreset
COMMENT: Do not reset filter states on -analyze.
# if (m_bNoreset) ...


## Methods

METHOD:  -analyze
COMMENT: Run ftt filtering.
SYNTAX:  (data dSignal, data dPitch, data dReal, data dImag)
CODE:
  /* Check parameters for FTT */
  if((m_nWlen!=m_nLen)||(m_nWlen!=m_nCrate))
  {  IERROR(this, FTT_LEN,"wlen",0,0);                                  //  Error in Paramters
     m_nLen=m_nCrate=m_nWlen;
  }
  if(dlp_strncmp(dlp_strlwr(m_lpsWtype),"rectangle",255))
  {  IERROR(this, FTT_WINDOW, m_lpsWtype, "rectangle",0);          //  Error in Paramters
     dlp_strcpy(m_lpsWtype,"rectangle");
  }
  if(dlp_strncmp(m_lpsFttType,"M",255) && dlp_strncmp(m_lpsFttType,"C",255))
    return IERROR(this, FTT_WTYPE, m_lpsFttType,"M or C",0);                 //  Error in Paramters
  
  if(InitFTT(m_bNoreset) != O_K) return NOT_EXEC;

  return CFBAproc::Analyze(dSignal,dPitch,dReal,dImag);
END_CODE
MAN:

END_MAN

METHOD:  -status
COMMENT: Display status information.
SYNTAX:  ()


#INITCODE:

#  // Call one-time initialization of class CFBAproc

#  INIT;

#END_CODE

RESETCODE:

  // Call reset of class CFBAproc
  RESET;
  // Extra reset

    m_nSrate = 8000.;
    m_nLen = 4;
    m_nCrate = m_nLen;
    m_nWlen = m_nLen;
    m_nCoeff = 20;
    m_nOutDim = m_nCoeff;
    dlp_strcpy(m_lpsWtype,"rectangle");
  if(InitFTT(FALSE) != O_K) return NOT_EXEC;

END_CODE

DONECODE:

  dlm_ftt_done(m_lpFtt,FALSE);

  DONE;

END_CODE


## Generate and quit
-cgen
quit

## EOF

