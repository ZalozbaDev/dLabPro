## dLabPro class CMELproc (MELproc)
## - Definition file
##
## AUTHOR : Soeren Wittenberg, Christian-M. Westendorf
## PACKAGE: dLabPro/classes
## 
## Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
## - Chair of System Theory and Speech Technology, TU Dresden
## - Chair of Communications Engineering, BTU Cottbus
## 
## This file is part of dLabPro.
## 
## dLabPro is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
## 
## dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
## 
## You should have received a copy of the GNU Lesser General Public License
## along with dLabPro. If not, see <http://www.gnu.org/licenses/>.

PLATFORM: GNUC++
COMPILER: gcc
AR:       ar
CFLAGS:   -Wno-trigraphs

PROJECT:  MELproc
AUTHOR:   Soeren Wittenberg, Christian-M. Westendorf
COMMENT:  Mel-scaled filter bank
VERSION:  1.0.2
CLASS:    MELproc
SUPERCLASS: ../fbaproc/fbaproc.def
/cxx_nconv                                                                      # Use strict C++ naming conventions

/html MAN:
  <p>The instances of class are signal processors which perform the
  mel-scaled analysis from VERBMOBIL I.</p>

  <p>The signals must be 16 kHz sampled.</p>
  <p>
    <b>Processing steps</b></br>
    <ol>
      <li>
        FFT-Analysis</br>
        This step includes frame grabing, preemphasis, windowing and a Fast-Fourier-Transformation. 
        It is completely done by the parent class <a href="fbaproc.html">FBAproc</a>.
      </li>
      <li>
        Magnitude spectrum</br>
        The real and imaginary part of the complex spectrum are squared and added up. The preserved 
        power spectrum is taken to calculate the logarithm to base 10. 
        It is also done by the parent class <a href="fbaproc.html">FBAproc</a>.
      </li>
      <li>
        Convolution</br>
        Transformation of the linear frequency line into the mel-scale. For further information take 
        a look at section <a href="#mel">Mel-Scale</a> and <a href="#cepstral">Cepstral Smoothing</a>.
      </li>
      <li>
        Limitation of output data</br>
        Limits the value of each feature to a maximum value of <i>+/-127</i>.
      </li>
    </ol>
  <p>
<b><a name="mel">Mel-Scale</a></b><br/>
The mel-scale describes the pitch perception of human being by using the unit <i>Bark</i>. 
It equals a linear scaling of frequency range below about <i>1kHz</i> and a logarithmic scaling above <i>1kHz</i>.
The relation between frequency- and mel-scale is shown by (according to <a href="#literature">[Zwicker]</a>):<br/>
<span style="font-size:25px">&nbsp;&nbsp;<img src="../resources/melproc/bark_calc_14pt.gif" border="0" align="absmiddle" alt="z_{Bark}=13\arctan{(0.76f/kHz)}+3.5\arctan{(f/7.5kHz)^2)}\quad [Bark]"></span><br/>
The implemented filter bank has a resolution of about <i>0.7Bark</i>, that causes <i>30</i> channels up to a 
cut-off-frequency of <i>16kHz</i>. The critical band width is specified by following equation (according to <a href="#literature">[Zwicker]</a>):<br/>
<span style="font-size:25px">&nbsp;&nbsp;<img src="../resources/melproc/critical_band_width.gif"  border="0" align="absmiddle" alt="b=25+75(1+1.4(f/kHz))^{0.69}\quad [Hz]"></span><br/>
The really implemented parameters of the filter bank are listed in <a href="#table1">Table 1</a>.<br/>
The transformation of the linear frequency line into the mel-scale is done by a <a href="#cepstral">cepstral smoothing</a>, that is specified in next section.   
  </p>


  <p>
    <b><a name="table1">Table 1:</a></b> Parameter of the filter bank channels   
  <table cellpadding="3">
    <tr>
      <th>
        <img src="../resources/melproc/tab_1_column_1_head.gif"  border="0" align="absmiddle"
        alt="k">
      </th>
      <th>
        <img src="../resources/melproc/tab_1_column_2_head.gif" border="0" align="absmiddle"
        alt="k">
      </th>
      <th>
        <img src="../resources/melproc/tab_1_column_3_head.gif" border="0" align="absmiddle"
        alt="k">
      </th>
      <th>
        <img src="../resources/melproc/tab_1_column_4_head.gif" border="0" align="absmiddle"
        alt="k">
      </th>
      <th>
        <img src="../resources/melproc/tab_1_column_5_head.gif" border="0" align="absmiddle"
        alt="k">
      </th>
      <th>
        <img src="../resources/melproc/tab_1_column_6_head.gif" border="0" align="absmiddle"
        alt="k">
      </th>
      <th>
        <img src="../resources/melproc/tab_1_column_7_head.gif" border="0" align="absmiddle"
        alt="k">
      </th>
      <th>
        <img src="../resources/melproc/tab_1_column_8_head.gif" border="0" align="absmiddle"
        alt="k">
      </th>
    </tr>
    <tr  align="right">
      <td>0</td>  <td>6</td>   <td>187.50</td>  <td>1.84</td>  <td>102.53</td>  <td>24</td>  <td>750</td>  <td>5.707</td>
    </tr>
    <tr  align="right">
      <td>1</td>  <td>9</td>   <td>281.25</td>  <td>2.74</td>  <td>105.64</td>  <td>24</td>  <td>750</td>  <td>5.707</td>
    </tr>
    <tr  align="right">
      <td>2</td>  <td>12</td>  <td>375.00</td>  <td>3.62</td>  <td>109.95</td>  <td>24</td>  <td>750</td>  <td>5.707</td>
    </tr>
    <tr  align="right">
      <td>3</td>  <td>15</td>  <td>468.75</td>  <td>4.46</td>  <td>115.25</td>  <td>24</td>  <td>750</td>  <td>5.707</td>
    </tr>
    <tr  align="right">
      <td>4</td>  <td>18</td>  <td>562.50</td>  <td>5.27</td>  <td>121.59</td>  <td>24</td>  <td>750</td>  <td>5.707</td>
    </tr>
    <tr  align="right">
      <td>5</td>  <td>21</td>  <td>656.25</td>  <td>6.04</td>  <td>128.86</td>  <td>24</td>  <td>750</td>  <td>5.707</td>
    </tr>
    <tr  align="right">
      <td>6</td>  <td>24</td>  <td>750.00</td>  <td>6.77</td>  <td>136.97</td>  <td>24</td>  <td>750</td>  <td>5.707</td>
    </tr>
    <tr  align="right">
      <td>7</td>  <td>27</td>  <td>843.75</td>  <td>7.46</td>  <td>145.86</td>  <td>24</td>  <td>750</td>  <td>5.707</td>
    </tr>
    <tr  align="right">
      <td>8</td>  <td>30</td>  <td>937.50</td>  <td>8.10</td>  <td>155.45</td>  <td>24</td>  <td>750</td>  <td>5.707</td>
    </tr>
    <tr  align="right">
      <td>9</td>  <td>33</td>  <td>1031.25</td> <td>8.71</td>  <td>165.70</td>  <td>24</td>  <td>750</td>  <td>5.707</td>
    </tr>
    <tr  align="right">
      <td>10</td> <td>37</td>  <td>1156.25</td> <td>9.45</td>  <td>180.30</td>  <td>32</td>  <td>1000</td> <td>7.605</td>
    </tr>
    <tr  align="right">
      <td>11</td> <td>41</td>  <td>1281.25</td> <td>10.14</td> <td>195.87</td>  <td>32</td>  <td>1000</td> <td>7.605</td>
    </tr>
    <tr  align="right">
      <td>12</td> <td>45</td>  <td>1406.25</td> <td>10.77</td> <td>212.34</td>  <td>32</td>  <td>1000</td> <td>7.605</td>
    </tr>
    <tr  align="right">
      <td>13</td> <td>49</td>  <td>1531.25</td> <td>11.34</td> <td>229.62</td>  <td>32</td>  <td>1000</td> <td>7.605</td>
    </tr>
    <tr  align="right">
      <td>14</td> <td>53</td>  <td>1656.25</td> <td>11.86</td> <td>247.65</td>  <td>32</td>  <td>1000</td> <td>7.605</td>
    </tr>
    <tr  align="right">
      <td>15</td> <td>57</td>  <td>1781.25</td> <td>12.35</td> <td>266.40</td>  <td>32</td>  <td>1000</td> <td>7.605</td>
    </tr>
    <tr  align="right">
      <td>16</td> <td>61</td>  <td>1906.25</td> <td>12.79</td> <td>285.80</td>  <td>32</td>  <td>1000</td> <td>7.605</td>
    </tr>
    <tr  align="right">
      <td>17</td> <td>65</td>  <td>2031.25</td> <td>13.20</td> <td>305.83</td>  <td>32</td>  <td>1000</td> <td>7.605</td>
    </tr>
    <tr  align="right">
      <td>18</td> <td>69</td>  <td>2156.25</td> <td>13.59</td> <td>326.45</td>  <td>32</td>  <td>1000</td> <td>7.605</td>
    </tr>
    <tr  align="right">
      <td>19</td> <td>73</td>  <td>2281.25</td> <td>13.94</td> <td>347.63</td>  <td>32</td>  <td>1000</td> <td>7.605</td>
    </tr>
    <tr  align="right">
      <td>20</td> <td>77</td>  <td>2406.25</td> <td>14.27</td> <td>369.35</td>  <td>32</td>  <td>1000</td> <td>7.605</td>
    </tr>
    <tr  align="right">
      <td>21</td> <td>83</td>  <td>2593.75</td> <td>14.73</td> <td>402.88</td>  <td>48</td>  <td>1500</td> <td>11.403</td>
    </tr>
    <tr  align="right">
      <td>22</td> <td>91</td>  <td>2843.75</td> <td>15.29</td> <td>449.25</td>  <td>64</td>  <td>2000</td> <td>15.202</td>
    </tr>
    <tr  align="right">
      <td>23</td> <td>101</td> <td>3156.25</td> <td>15.90</td> <td>509.73</td>  <td>80</td>  <td>2500</td> <td>19.001</td>
    </tr>
    <tr  align="right">
      <td>24</td> <td>113</td> <td>3531.25</td> <td>16.55</td> <td>585.69</td>  <td>96</td>  <td>3000</td> <td>22.800</td>
    </tr>
    <tr  align="right">
      <td>25</td> <td>127</td> <td>3968.75</td> <td>17.21</td> <td>678.61</td>  <td>112</td> <td>3500</td> <td>26.600</td>
    </tr>
    <tr  align="right">
      <td>26</td> <td>143</td> <td>4468.75</td> <td>17.89</td> <td>790.03</td>  <td>128</td> <td>4000</td> <td>30.399</td>
    </tr>
    <tr  align="right">
      <td>27</td> <td>161</td> <td>5031.25</td> <td>18.58</td> <td>921.48</td>  <td>144</td> <td>4500</td> <td>34.199</td>
    </tr>
    <tr  align="right">
      <td>28</td> <td>181</td> <td>5656.25</td> <td>19.26</td> <td>1074.53</td>  <td>160</td> <td>5000</td> <td>37.999</td>
    </tr>
    <tr  align="right">
      <td>29</td> <td>203</td> <td>6343.75</td> <td>19.94</td> <td>1250.74</td>  <td>176</td> <td>5500</td> <td>41.798</td>
    </tr>
  </table>
  </p>  
  <p>
    <b>Table 2:</b> Description of mathematic symbols
  <table>
    <tr>
      <th>Symbol</th>
      <th>Description</th> 
    </tr>
    <tr>
      <td>
        <img src="../resources/melproc/tab_1_column_1_head.gif"  border="0" align="absmiddle"
        alt="k">
      </td>
      <td>
        Channel index
      </td>
    </tr>
    <tr>
      <td>
        <img src="../resources/melproc/tab_1_column_2_head.gif" border="0" align="absmiddle"
        alt="k">
      </td>
      <td>Index of FFT-pin at channel centre frequency</td>
    </tr>
    <tr>
      <td>
        <img src="../resources/melproc/tab_1_column_3_head.gif" border="0" align="absmiddle"
        alt="k">
      </td>
      <td>
        Freguency in <i>Hz</i> corresponding  to <img src="../resources/melproc/tab_1_column_2_head.gif" border="0" align="absmiddle" alt="k">
      </td>
    </tr>
    <tr>
      <td>
        <img src="../resources/melproc/tab_1_column_4_head.gif" border="0" align="absmiddle"
        alt="k">
      </td>
      <td>Channel centre frequency in <i>Bark</i></td>
    </tr>
    <tr>
      <td>
        <img src="../resources/melproc/tab_1_column_5_head.gif" border="0" align="absmiddle"
        alt="k">
      </td>
      <td>Theoretical width of the critical band</td>
    </tr>
    <tr>
      <td>
        <img src="../resources/melproc/tab_1_column_6_head.gif" border="0" align="absmiddle"
        alt="k">
      </td>
      <td>Max. number of FFT-pins for which the upper half of the convolution core is calculated</td>
    </tr>
    <tr>
      <td>
        <img src="../resources/melproc/tab_1_column_7_head.gif" border="0" align="absmiddle"
        alt="k">
      </td>
      <td>
        Frequency in <i>Hz</i> corresponding to <img src="../resources/melproc/tab_1_column_7_head.gif" border="0" align="absmiddle" alt="k">
      </td>
    </tr>
    <tr>
      <td>
        <img src="../resources/melproc/tab_1_column_8_head.gif" border="0" align="absmiddle"
        alt="k">
      </td>
      <td>Scale factor</td>
    </tr>
  </table>
  </p>
  
  <p>
    <b><a name="cepstral">Cepstral Smoothing</a></b></br>
    The aim of cepstral smoothing is to reduce changes on the spectrum caused by the influence of speaker fundamental frequency.
    One possible way to reach this aim is to filter the spectrum with a low-pass filter. This can be done by transfer the spectrum into cepstral domain 
    and multiplication with the transfer function of a low-pass filter. The usage of a rectangle function leads to zero values at the 
    higher cepstral coefficients.<br/>


    Instead of changing into the cepstral domain, it is also possible to convolve the inverse Fourier transform of the cepstral low-pass with the signal spectrum 
    in frequency domain.<br/>

    The inverse Fourier transform of a low-pass filter with rectangle characteristic (equation ??? ... *TODO*) is the sinc-function:<br/>
<span style="font-size:25px">&nbsp;&nbsp;</span>... *TODO*</br>
    The parameters of the low-pass filter are so designed that variations of the spectrum with a higher frequency as the width of the filter become suppressed.
<br/>
    .... *TODO*
  </p>

  <p>
    <b><a name="literature">Literature:</a></b></br>
    <table border="0">
      <tr>
        <td>
          [Zwicker]&#160&#160   
        </td>
        <td>
          Zwicker, E.; Fastl, H.: <i>Psychoacoustics</i> Springer, Berlin Heidelberg New York. 1990
        </td>
      </tr>
    </table>
  </p>

END_MAN

## C/C++ files
INCLUDE: "dlp_data.h"
INCLUDE: "dlp_math.h"
FILE:    mel_synt.cpp
FILE:    mel_work.cpp
FILE:    mel_stat.cpp

## Options

OPTION:  /syn_mlsadf
COMMENT: Use MLSADF cepstral synthesis filter for synthesis.

OPTION:  /syn_mcep
COMMENT: Use mel-cepstral synthesis filter for synthesis.

OPTION:  /syn_cep
COMMENT: Use mel-cepstrum to cepstrum transformation and cepstral synthesis filter for synthesis.

## Hidden fields

FIELD:   mf_type
COMMENT: Type of melfilter.
TYPE:    255
INIT:    "MT"
CODE:
  return InitMF();
END_CODE
MAN:     Sets the type of melfilter.
         Possible values are: "MS", "MT", "BS", "BT", "MSN", "MTN", "BSN", "BTN"
            - "M" = Center frequencies according to the mel scale
            - "B" = Center frequencies accroding to Bilinear warping scale
            - "S" = Sinc function as transfer function of the filters (cepstral smoothing)
            - "T" = Triangular function as transfer function of ther filters
            - "N" = Enable noise reduction (spectral subtraction) - see FBAproc.nse_len
END_MAN

FIELD:   coeff                                                                  # Number of mel coefficients
COMMENT: size of feature vector.
TYPE:    short
INIT:    30
CODE:
  return InitMF();
END_CODE

FIELD:   cnvc                                                                   # Convolution core data struct
TYPE:    MLP_CNVC_TYPE*
FLAGS:   /hidden /noset /nosave

FIELD:   mem
COMMENT: synthesis filter states
TYPE:    double*
FLAGS:   /hidden /nosave

FIELD:   pade_order
COMMENT: Pade order for cepstral synthesis filter
TYPE:    short
INIT:    7
MAN:     Pade order for the cepstral synthesis filter.
         The order must be 1 <= pade_order <= 7.
END_MAN
 
## Methods

METHOD:  -analyze
COMMENT: Run mel filtering.
SYNTAX:  (data dSignal, data dPitch, data dReal, data dImag)
MAN:

END_MAN

METHOD:  -mf2mcep
COMMENT: Converts mel-filter coefficients to mel-cepstrum.
SYNTAX:  (data dMel, data dCep, int nCepCoeff)
/html MAN:
          <p>Converts mel-filter coefficients to mel-cepstrum.
          According to <code>m_nPfaLambda</code> the cepstrum is warped
          to mel-cepstrum.

          dMel      - Mel Filter Coefficients
          dCep      - Resulting Cepstrum
          nCepCoeff - Number of cepstral coefficients to calculate

          @see m_nPfaLambda
END_MAN

METHOD:  -quantize
COMMENT: Feature dependent quantization for (lossy) converting to fixpoint type of specified bit width.
SYNTAX:  "<data idFea> <int first> <int count> <int bitwidth> <MELproc this>"
CODE:
  INT16 __nErr = O_K;
  INT32 nQuant;
  INT32 nFirst;
  INT32 nCount;
  CData* idFea;
  CData* idRes;
  MIC_CHECK;
  nQuant = (INT32)MIC_GET_N(1,0);
  nCount = (INT32)MIC_GET_N(2,1);
  nFirst = (INT32)MIC_GET_N(3,2);
  idFea =  (CData*)MIC_GET_I_EX(idFea,data,4,3);
  ICREATEEX(CData,idRes,"#TMP#-quantize",NULL);
  __nErr = QuantizeImpl(idFea, nFirst, nCount, nQuant, idRes);
  MIC_PUT_I(BASEINST(idRes));
  return __nErr;
END_CODE

METHOD:  -dequantize
COMMENT: This is the inverse of -quantize.
SYNTAX:  "<data idFea> <int first> <int count> <int bitwidth> <MELproc this>"
CODE:
  INT16 __nErr = O_K;
  INT32 nQuant;
  INT32 nFirst;
  INT32 nCount;
  CData* idFea;
  CData* idRes;
  MIC_CHECK;
  nQuant = (INT32)MIC_GET_N(1,0);
  nCount = (INT32)MIC_GET_N(2,1);
  nFirst = (INT32)MIC_GET_N(3,2);
  idFea =  (CData*)MIC_GET_I_EX(idFea,data,4,3);
  ICREATEEX(CData,idRes,"#TMP#-dequantize",NULL);
  __nErr = DequantizeImpl(idFea, nFirst, nCount, nQuant, idRes);
  MIC_PUT_I(BASEINST(idRes));
  return __nErr;
END_CODE

METHOD:  -status
COMMENT: Display status information.
SYNTAX:  ()

INITCODE:

  // Call constructor of class CFBAproc
  INIT;

  // Extra initialization
  if(InitMF() != O_K) return NOT_EXEC;
END_CODE

DONECODE:
  if(m_lpMem != NULL) dlp_free(m_lpMem);
  dlm_mf_done(m_lpCnvc);
  DONE;
END_CODE

RESTORECODE:
  RESTORE;
  if(InitMF() != O_K) return NOT_EXEC;
END_CODE

## Generate and quit
-cgen
quit

## EOF

