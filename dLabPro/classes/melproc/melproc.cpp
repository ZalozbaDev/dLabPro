// dLabPro class CMELproc (MELproc)
// - Mel-scaled filter bank
//
// AUTHOR : Soeren Wittenberg, Christian-M. Westendorf
// PACKAGE: dLabPro/classes
//
// This file was generated by dcg. DO NOT MODIFY! Modify melproc.def instead.
// 
// Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
// - Chair of System Theory and Speech Technology, TU Dresden
// - Chair of Communications Engineering, BTU Cottbus
// 
// This file is part of dLabPro.
// 
// dLabPro is free software: you can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License as published by the Free
// Software Foundation, either version 3 of the License, or (at your option)
// any later version.
// 
// dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
// details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with dLabPro. If not, see <http://www.gnu.org/licenses/>.


//{{CGEN_INCLUDE
//}}CGEN_END
#include "dlp_melproc.h"

// Class CMELproc

CMELproc::CMELproc(const char* lpInstanceName, BOOL bCallVirtual) : inherited(lpInstanceName,0)
{
	DEBUGMSG(-1,"CMELproc::CMELproc; (bCallVirtual=%d)",(int)bCallVirtual,0,0);
	dlp_strcpy(m_lpClassName,"MELproc");
	dlp_strcpy(m_lpObsoleteName,"");
	dlp_strcpy(m_lpProjectName,"MELproc");
	dlp_strcpy(m_version.no,"1.0.2");
	dlp_strcpy(m_version.date,"");
	m_nClStyle = CS_AUTOACTIVATE;

	if (bCallVirtual)
	{
		DLPASSERT(OK(AutoRegisterWords()));
		Init(TRUE);
	}
}

CMELproc::~CMELproc()
{
  //{{CGEN_DONECODE
  if(m_lpMem != NULL) dlp_free(m_lpMem);
  dlm_mf_done(m_lpCnvc);
  DONE;
  //}}CGEN_DONECODE
}

INT16 CMELproc::AutoRegisterWords()
{
	DEBUGMSG(-1,"CMELproc::AutoRegisterWords",0,0,0);
	IF_NOK(inherited::AutoRegisterWords()) return NOT_EXEC;

	//{{CGEN_REGISTERWORDS
	REGISTER_METHOD("-analyze","",LPMF(CMELproc,OnAnalyze),"Run mel filtering.",0,"<data dSignal> <data dPitch> <data dReal> <data dImag> <MELproc this>","")
	REGISTER_METHOD("-dequantize","",LPMF(CMELproc,Dequantize),"This is the inverse of -quantize.",0,"<data idFea> <int first> <int count> <int bitwidth> <MELproc this>","")
	REGISTER_METHOD("-mf2mcep","",LPMF(CMELproc,OnMf2mcep),"Converts mel-filter coefficients to mel-cepstrum.",0,"<data dMel> <data dCep> <int nCepCoeff> <MELproc this>","")
	REGISTER_METHOD("-quantize","",LPMF(CMELproc,Quantize),"Feature dependent quantization for (lossy) converting to fixpoint type of specified bit width.",0,"<data idFea> <int first> <int count> <int bitwidth> <MELproc this>","")
	REGISTER_METHOD("-status","",LPMF(CMELproc,Status),"Display status information.",0,"<MELproc this>","")
	REGISTER_OPTION("/syn_cep","",LPMV(m_bSynCep),NULL,"Use mel-cepstrum to cepstrum transformation and cepstral synthesis filter for synthesis.",0)
	REGISTER_OPTION("/syn_mcep","",LPMV(m_bSynMcep),NULL,"Use mel-cepstral synthesis filter for synthesis.",0)
	REGISTER_OPTION("/syn_mlsadf","",LPMV(m_bSynMlsadf),NULL,"Use MLSADF cepstral synthesis filter for synthesis.",0)
	REGISTER_FIELD("cnvc","",LPMV(m_lpCnvc),NULL,"",FF_HIDDEN | FF_NOSET | FF_NOSAVE,6000,1,"MLP_CNVC_TYPE*",NULL)
	REGISTER_FIELD("coeff","",LPMV(m_nCoeff),LPMF(CMELproc,OnCoeffChanged),"size of feature vector.",0,2002,1,"short",(INT16)30)
	REGISTER_FIELD("mem","",LPMV(m_lpMem),NULL,"synthesis filter states",FF_HIDDEN | FF_NOSAVE,6000,1,"double*",NULL)
	REGISTER_FIELD("mf_type","",LPMV(m_lpsMfType),LPMF(CMELproc,OnMfTypeChanged),"Type of melfilter.",0,255,255,"char[255]","MT")
	REGISTER_FIELD("pade_order","",LPMV(m_nPadeOrder),NULL,"Pade order for cepstral synthesis filter",0,2002,1,"short",(INT16)7)
	//}}CGEN_REGISTERWORDS

	return O_K;
}

INT16 CMELproc::Init(BOOL bCallVirtual)
{
	DEBUGMSG(-1,"CMELproc::Init, (bCallVirtual=%d)",(int)bCallVirtual,0,0);
	//{{CGEN_INITCODE

  // Call constructor of class CFBAproc
  INIT;

  // Extra initialization
  if(InitMF() != O_K) return NOT_EXEC;
	//}}CGEN_INITCODE

	// If last derivation call reset (do not reset members; already done by Init())
	if (bCallVirtual) return Reset(FALSE);
	else              return O_K;
}

INT16 CMELproc::Reset(BOOL bResetMembers)
{
	DEBUGMSG(-1,"CMELproc::Reset; (bResetMembers=%d)",(int)bResetMembers,0,0);
	//{{CGEN_RESETCODE
  return RESET;
	//}}CGEN_RESETCODE

	return O_K;
}

INT16 CMELproc::ClassProc()
{
	//{{CGEN_CLASSCODE
  return CLASSPROC;
	//}}CGEN_CLASSCODE

	return O_K;
}

#define CODE_DN3 /* check this for xml specific save code */
#define SAVE  SAVE_DN3
INT16 CMELproc::Serialize(CDN3Stream* lpDest)
{
	//{{CGEN_SAVECODE
  return SAVE;
	//}}CGEN_SAVECODE

	return O_K;
}
#undef  SAVE
#undef  CODE_DN3

#define CODE_XML /* check this for xml specific save code */
#define SAVE  SAVE_XML
INT16 CMELproc::SerializeXml(CXmlStream* lpDest)
{
	//{{CGEN_SAVECODE
  return SAVE;
	//}}CGEN_SAVECODE

	return O_K;
}
#undef  SAVE
#undef  CODE_XML

#define CODE_DN3 /* check this for dn3 specific restore code */
#define RESTORE  RESTORE_DN3
INT16 CMELproc::Deserialize(CDN3Stream* lpSrc)
{
	//{{CGEN_RESTORECODE
  RESTORE;
  if(InitMF() != O_K) return NOT_EXEC;
	//}}CGEN_RESTORECODE

	return O_K;
}
#undef  RESTORE
#undef  CODE_DN3

#define CODE_XML /* check this for xml specific restore code */
#define RESTORE  RESTORE_XML
INT16 CMELproc::DeserializeXml(CXmlStream* lpSrc)
{
	//{{CGEN_RESTORECODE
  RESTORE;
  if(InitMF() != O_K) return NOT_EXEC;
	//}}CGEN_RESTORECODE

	return O_K;
}
#undef  RESTORE
#undef  CODE_XML

INT16 CMELproc::Copy(CDlpObject* __iSrc)
{
	//{{CGEN_COPYCODE
  return COPY;
	//}}CGEN_COPYCODE

	return O_K;
}

// Runtime class type information and class factory
INT16 CMELproc::InstallProc(void* lpItp)
{
	//{{CGEN_INSTALLCODE
  return INSTALL;
	//}}CGEN_INSTALLCODE

	return O_K;
}

CMELproc* CMELproc::CreateInstance(const char* lpName)
{
	CMELproc* lpNewInstance;
	ICREATEEX(CMELproc,lpNewInstance,lpName,NULL);
	return lpNewInstance;
}

INT16 CMELproc::GetClassInfo(SWord* lpClassWord)
{
	if (!lpClassWord) return NOT_EXEC;
	dlp_memset(lpClassWord,0,sizeof(SWord));

	lpClassWord->nWordType          = WL_TYPE_FACTORY;
	lpClassWord->nFlags             = CS_AUTOACTIVATE;
	lpClassWord->ex.fct.lpfFactory  = (LP_FACTORY_PROC)CMELproc::CreateInstance;
	lpClassWord->ex.fct.lpfInstall  = CMELproc::InstallProc;
	lpClassWord->ex.fct.lpProject   = "MELproc";
	lpClassWord->ex.fct.lpBaseClass = "FBAproc";
	lpClassWord->lpComment          = "Mel-scaled filter bank";
	lpClassWord->ex.fct.lpAutoname  = "";
	lpClassWord->ex.fct.lpCname     = "CMELproc";
	lpClassWord->ex.fct.lpAuthor    = "Soeren Wittenberg, Christian-M. Westendorf";

	dlp_strcpy(lpClassWord->lpName             ,"MELproc");
	dlp_strcpy(lpClassWord->lpObsname          ,"");
	dlp_strcpy(lpClassWord->ex.fct.version.no  ,"1.0.2");

	return O_K;
}

INT16 CMELproc::GetInstanceInfo(SWord* lpClassWord)
{
	return CMELproc::GetClassInfo(lpClassWord);
}

BOOL CMELproc::IsKindOf(const char* lpClassName)
{
  if (dlp_strncmp(lpClassName,"MELproc",L_NAMES) == 0) return TRUE;
  else return inherited::IsKindOf(lpClassName);
}

INT16 CMELproc::ResetAllOptions(BOOL bInit)
{
	DEBUGMSG(-1,"CMELproc::ResetAllOptions;",0,0,0);
	//{{CGEN_RESETALLOPTIONS
	_this->m_bSynCep = FALSE;
	_this->m_bSynMcep = FALSE;
	_this->m_bSynMlsadf = FALSE;
	//}}CGEN_RESETALLOPTIONS

	return inherited::ResetAllOptions(bInit);
}

// Generated primary method invocation functions

#ifndef __NOITP
//{{CGEN_PMIC
INT16 CMELproc::OnAnalyze()
/* DO NOT CALL THIS FUNCTION FROM C++ SCOPE.     */
/* IT MAY INTERFERE WITH THE INTERPRETER SESSION */
{
	INT16 __nErr    = O_K;
	INT32  __nErrCnt = 0;
	MIC_CHECK;
	__nErrCnt = CDlpObject_GetErrorCount();
	data* dImag = MIC_GET_I_EX(dImag,data,1,1);
	data* dReal = MIC_GET_I_EX(dReal,data,2,2);
	data* dPitch = MIC_GET_I_EX(dPitch,data,3,3);
	data* dSignal = MIC_GET_I_EX(dSignal,data,4,4);
	if (CDlpObject_GetErrorCount()>__nErrCnt) return NOT_EXEC;
	__nErr = Analyze(dSignal, dPitch, dReal, dImag);
	return __nErr;
}

INT16 CMELproc::OnMf2mcep()
/* DO NOT CALL THIS FUNCTION FROM C++ SCOPE.     */
/* IT MAY INTERFERE WITH THE INTERPRETER SESSION */
{
	INT16 __nErr    = O_K;
	INT32  __nErrCnt = 0;
	MIC_CHECK;
	__nErrCnt = CDlpObject_GetErrorCount();
	INT32 nCepCoeff = (INT32)MIC_GET_N(1,0);
	data* dCep = MIC_GET_I_EX(dCep,data,2,1);
	data* dMel = MIC_GET_I_EX(dMel,data,3,2);
	if (CDlpObject_GetErrorCount()>__nErrCnt) return NOT_EXEC;
	__nErr = Mf2mcep(dMel, dCep, nCepCoeff);
	return __nErr;
}

//}}CGEN_PMIC
#endif /* #ifndef __NOITP */


// Generated secondary method invocation functions

//{{CGEN_SMIC
INT16 CMELproc::Dequantize()
{
    INT16 __nErr = O_K;
    INT32 nQuant;
    INT32 nFirst;
    INT32 nCount;
    CData* idFea;
    CData* idRes;
    MIC_CHECK;
    nQuant = (INT32)MIC_GET_N(1,0);
    nCount = (INT32)MIC_GET_N(2,1);
    nFirst = (INT32)MIC_GET_N(3,2);
    idFea =  (CData*)MIC_GET_I_EX(idFea,data,4,3);
    ICREATEEX(CData,idRes,"#TMP#-dequantize",NULL);
    __nErr = DequantizeImpl(idFea, nFirst, nCount, nQuant, idRes);
    MIC_PUT_I(BASEINST(idRes));
    return __nErr;
	return O_K;
}

INT16 CMELproc::Quantize()
{
    INT16 __nErr = O_K;
    INT32 nQuant;
    INT32 nFirst;
    INT32 nCount;
    CData* idFea;
    CData* idRes;
    MIC_CHECK;
    nQuant = (INT32)MIC_GET_N(1,0);
    nCount = (INT32)MIC_GET_N(2,1);
    nFirst = (INT32)MIC_GET_N(3,2);
    idFea =  (CData*)MIC_GET_I_EX(idFea,data,4,3);
    ICREATEEX(CData,idRes,"#TMP#-quantize",NULL);
    __nErr = QuantizeImpl(idFea, nFirst, nCount, nQuant, idRes);
    MIC_PUT_I(BASEINST(idRes));
    return __nErr;
	return O_K;
}

//}}CGEN_SMIC


// Generated option change callback functions

//{{CGEN_OCCF
//}}CGEN_OCCF


// Generated field change callback functions

//{{CGEN_FCCF
INT16 CMELproc::OnCoeffChanged()
{
    return InitMF();

	return O_K;
}

INT16 CMELproc::OnMfTypeChanged()
{
    return InitMF();

	return O_K;
}

//}}CGEN_FCCF


// EOF
