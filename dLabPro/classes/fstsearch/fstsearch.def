## dLabPro class CFstsearch (fstsearch)
## - Definition script
##
## AUTHOR : Frank Duckhorn
## PACKAGE: dLabPro/classes
## 
## Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
## - Chair of System Theory and Speech Technology, TU Dresden
## - Chair of Communications Engineering, BTU Cottbus
## 
## This file is part of dLabPro.
## 
## dLabPro is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
## 
## dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
## 
## You should have received a copy of the GNU Lesser General Public License
## along with dLabPro. If not, see <http://www.gnu.org/licenses/>.

PLATFORM: GNUC++
COMPILER: gcc
AR:       ar

PROJECT:  fstsearch
COMMENT:  Search processor for wFSTs.
/html MAN:
  <p>
  This is a search processor for decoding in wFSTs (see <a href="fst.html">class <code class="link">fst</code></a>).
  The processor integrates different search algorithms in one interface.
  So you can use the algorithm you like for decoding.
  There are timevariant and timeinvaraiant algorithms available.
  The interface provides interative decoding for a subset of algorithms.
  </p>

  <p>
  The search algorithm is set by the field {@link algo}.
  Fields named with the algorithm name are algorithm specific options.
  All other fields are general options.
  </p>

  <p>
  For decoding there is an all-in-one method name {@link -search}.
  If you want to do mulitple decodings with one automaton or iterative decoding,
    you can load the automaton with {@link -load} followed by {@link -isearch} and {@link -backtrack}.
  </p>

  <p>
  Additionally there is a <a href="../tutorials/t006.html">tutorial</a> for the search processor available.
  </p>
END_MAN
AUTHOR:   frank.duckhorn
VERSION:  2.00 DLC22

CLASS:    fstsearch
/cProject                                                                       # Generate ANSI C compatible code
/cxx_nconv                                                                      # Use strict C++ naming conventions

######################################################################
## Files and locations

FILE:    fsts_glob.c
FILE:    fsts_cfg.c
FILE:    fsts_fst.c
FILE:    fsts_mem.c
FILE:    fsts_w.c
FILE:    fsts_bt.c
FILE:    fsts_lat.c
FILE:    fsts_h.c
FILE:    fsts_as.c
FILE:    fsts_as_ls.c
FILE:    fsts_as_q.c
FILE:    fsts_as_s.c
FILE:    fsts_sdp.c
FILE:    fsts_sdp_imp.c
FILE:    fsts_tp.c
FILE:    fsts_tp_s.c
FILE:    fsts_tp_hist.c
FILE:    fsts_tp_ls.c

INCLUDE: "dlp_data.h"
INCLUDE: "dlp_fst.h"

######################################################################
## Error definition

ERROR:   FSTS_STR
COMMENT: %s

######################################################################
## Field definition

FIELD:   glob
TYPE:    void*
COMMENT: Internal use: Search status
FLAGS:   /hidden /noset /nosave

FIELD:   loaded
TYPE:    bool
INIT:    FALSE
COMMENT: TRUE if a transducer is loaded and the decoder ready
FLAGS:   /noset

FIELD:   time
TYPE:    double
INIT:    0
COMMENT: Time used for last decoding including backtracking in milliseconds (only Linux!)
FLAGS:   /noset

FIELD:   mem
TYPE:    double
INIT:    0
COMMENT: Memory used for last decoding including backtracking in Bytes
FLAGS:   /noset

FIELD:   algo
TYPE:    string
INIT:    "tp"
COMMENT: Search algorithm to use
/html MAN:
  <p>Possible values are:</p>
  <table>
  <tr><th>algo</th><th>Description</th></tr>
  <tr><td>"tp"</td><td>Token passing</td></tr>
  <tr><td>"as"</td><td>A* Search</td></tr>
  <tr><td>"sdp"</td><td>Dynamic programming</td></tr>
  </table>
END_MAN
CODE:
	CFstsearch_Restart(_this);
END_CODE

FIELD:   bt
TYPE:    string
INIT:    "os"
COMMENT: Backtrack type
CODE:
	CFstsearch_Restart(_this);
END_CODE
/html MAN:
  <p>This option selects the type of backtracking.
  The following table shows the possible values.
  Only the algorithms <code>algo="tp"</code> and
  <code>algo="as"</code> use it.</p>
  <table>
  <tr><th>Value</th><th>Backtrack result</th></tr>
  <tr><td>"os"</td><td>A chain of output symbols</td></tr>
  <tr><td>"t"</td><td>A chain of transitions copied from the source</td></tr>
  <tr><td>"lat"</td><td>An output symbol lattice (see {@link latprn})</td></tr>
  </table>
END_MAN

FIELD:   numpaths
TYPE:    long
INIT:    1
COMMENT: Number of paths to decode
CODE:
	CFstsearch_Restart(_this);
END_CODE

FIELD:   stkprn
TYPE:    bool
INIT:    FALSE
COMMENT: Prune hypothesis with different pushdown memory
CODE:
	CFstsearch_Restart(_this);
END_CODE
/html MAN:
  <p>This option activates stack pruning.
  There is no change for transducers without pushdown symbols
  (~STK component in transition table td).
  If activated all hypothesis will be recombined
  while decoding regardless of thier stack content.</p>
END_MAN

FIELD:   latprn
TYPE:    double
INIT:    0
COMMENT: Lattice pruning threshold
CODE:
	CFstsearch_Restart(_this);
END_CODE
/html MAN:
  <p>Prune all paths in the lattice whose weight difference to the best one
  is greater than that threshold. Zero deactivates that pruning method.
  Reasonable values: 30-300. High values might result in time consuming backtracking.
  Lattice generation must be activated: <code>{@link bt}="lat"</code>.</p>
  @see bt
END_MAN

######################################################################
## TP configuration

FIELD:   tp_threads
TYPE:    long
INIT:    1
COMMENT: Number of threads to use for decoding
CODE:
	CFstsearch_Restart(_this);
END_CODE
/html MAN:
  <p>This is still experimental code!</p>
  <p>The number of threads has to be a power of two.</p>
END_MAN

FIELD:   tp_prnw
TYPE:    double
INIT:    0
COMMENT: Weight pruning threshold
CODE:
	CFstsearch_Restart(_this);
END_CODE
/html MAN:
  <p>Prune all hypothesis whose weight difference to the best one
  is greater than that threshold. Zero deactivates that pruning method.
  Reasonable values: 50-200.</p>
  @see tp_prnh
END_MAN

FIELD:   tp_prnh
TYPE:    long
INIT:    0
COMMENT: Hypothesis number pruning threshold
CODE:
	CFstsearch_Restart(_this);
END_CODE
/html MAN:
  <p>Prune all hypothesis except the <code>tp_prnh</code> best.
  Zero deactivates that pruning method.</p>
  @see tp_prnw
END_MAN

FIELD:   wnorm_off
TYPE:    double
INIT:    10
COMMENT: Weight normalization offset
CODE:
	CFstsearch_Restart(_this);
END_CODE
/html MAN:
  <p>Penalty for short paths when using {@link /start} in
  iterative decoding. The penalty decreases with {@link wnorm_dec}
  over path length starting with wnorm_off at length zero.</p>
  @see /start
  @see wnorm_dec
END_MAN

FIELD:   wnorm_dec
TYPE:    double
INIT:    0.5
COMMENT: Weight normalization decrement
CODE:
	CFstsearch_Restart(_this);
END_CODE
/html MAN:
  <p>Penalty decrease for short paths when using {@link /start} in
  iterative decoding. The penalty {@link wnorm_off} decreases by wnorm_dec
  in every time frame.</p>
  @see /start
  @see wnorm_off
END_MAN

######################################################################
## A* configuration

FIELD:   as_qsize
TYPE:    long
INIT:    0
COMMENT: Queue size
CODE:
	CFstsearch_Restart(_this);
END_CODE
/html MAN:
  <p>This option sets the queue size for A* decoder.
  Zero activates automatic queue resizing. In the
  other case the value will be rounded to the next
  2^N-1 and the decoding will be pruned.</p>
END_MAN

FIELD:   as_prnf
TYPE:    long
INIT:    0
COMMENT: Frame prune threshold
CODE:
	CFstsearch_Restart(_this);
END_CODE
/html MAN:
  <p>Prune all hypothesis whose time difference to the current head one
  is greater than that threshold. Zero deactivates that pruning method.
  Reasonable values: 30-150.</p>
END_MAN

FIELD:   as_prnw
TYPE:    double
INIT:    0
COMMENT: Weight prune threshold
CODE:
	CFstsearch_Restart(_this);
END_CODE
/html MAN:
  <p>Prune all hypothesis whose weight difference to the best one of the same frame
  is greater than that threshold. Zero deactivates that pruning method.
  Reasonable values: 30-100.</p>
END_MAN

FIELD:   as_aheutype
TYPE:    string
INIT:    "pot"
COMMENT: Timeinvariant heurisitc type.
CODE:
	CFstsearch_Restart(_this);
END_CODE
/html MAN:
  This specifies the timeinvariant heuristic type:<ul>
  <li>"none": do not use timeinvariant heurisitc
  <li>"exist": use existing timeinvariant heuristic from "~HEU" component in itSrc.sd
  <li>"pot": use state potential as timeinvariant heuristic
  </ul>
END_MAN

FIELD:   as_sheutype
TYPE:    string
INIT:    "min"
COMMENT: Timevariant heurisitc type.
CODE:
	CFstsearch_Restart(_this);
END_CODE
/html MAN:
  This specifies the timevariant heuristic type:<ul>
  <li>"none": do not use timevariant heurisitc
  <li>"exist": use existing timevariant heuristic from "~HEU" component in idWeigths
  <li>"min": use minimal weight per frame as timevariant heuristic
  <li>"minisu": use minimal weight per frame over input symbols which appeare in the path from that state to final states
  </ul>
END_MAN

######################################################################
## A* configuration

FIELD:   sdp_prn
TYPE:    double
INIT:    0
COMMENT: Pruning constant
CODE:
	CFstsearch_Restart(_this);
END_CODE
/html MAN:
  Controls path pruning of search algorithms. Pruning paths is quicker but may
  result in suboptimal search results. 
END_MAN

FIELD:   sdp_epsremove
TYPE:    bool
INIT:    FALSE
COMMENT: Removes epsilon transitions
CODE:
	CFstsearch_Restart(_this);
END_CODE
/html MAN:
  <p>Removes epsilon/epsilon transitions (input <em>and</em> output symbol is
    epsilon!) from resulting chain.</p>
END_MAN

FIELD:   sdp_fwd
TYPE:    bool
INIT:    FALSE
COMMENT: Do forward algorithm instead of sdp
CODE:
	CFstsearch_Restart(_this);
END_CODE
/html MAN:
  @cgen:TODO: Remove this option and add method <code>-fwd</code> instead!
  <p>Does forward algorithm instead
  of synchron dp algorithm. The forward variables are placed in itDst.is.
  The destination fst is not created. For backward algorithm reverse
  the source fst, the weight array and afterwards the backward
  variables in time.</p>
END_MAN

######################################################################
## Option definition

OPTION:  /fast
COMMENT: Do not copy the source automaton for backtracking
/html MAN:
  <p>Normally the source automaton is copied to return all
  transition components in backtracking. This can be switched off.</p>
  @see -load
END_MAN

OPTION:  /final
COMMENT: Decode until a final state is reached
/html MAN:
  <ul>
  <li><b>{@link -isearch}:</b> Continue with decoding after the last frame until
  {@link numpaths} reach a final state. Afterwards no
  further decoding is possible. You need to call
  {@link -backtrack} or {@link -restart}.</li>
  <li><b>{@link -backtrack}:</b> When backtracking while iterative decoding:
  backtrack only paths ending at a final state in the previous time frame.
  Without this option paths ending at any state in the current time frame are returned.</li>
  </ul>
  @see -isearch
  @see -backtrack
END_MAN

OPTION:  /start
COMMENT: Start state in every frame
/html MAN:
  <p>Create a new initial state for every frame
  in the iterative search. The option may be set
  only for some calls of {@link -isearch}, for all calls
  or for the call to {@link -search}. The path weights
  will be normalized to path length. Without normalization
  path weights of paths with different starting frame are not
  comparable. Additinally the is a penalty for short paths
  configured by {@link wnorm_off} and {@link wnorm_dec}.</p>

  <p><span class="warning">Warning:</span> With this option the search
  will be no longer admissible due to weight normalization.</p>
  @see -search
  @see -isearch
  @see wnorm_off
  @see wnorm_dec
END_MAN

######################################################################
## Command definition

METHOD:  -status
SYNTAX:  ()
COMMENT: Prints status information of the search processor.

METHOD:  -load
SYNTAX:  (INSTANCE(fst) itSrc, long nUnit)
COMMENT: Load the source automaton
/html MAN:
  <p>This method loads the automaton to search through in the decoder.
  The automaton will be copied unless you use {@link /fast}.</p>

  <p>If <code>nUnit<0</code> and there are multiple units in <code>itSrc</code>
  a simplified on-the-fly composition is performed.
  The decoding start in the unit zero.
  The flag "~SUB" in the unit table tells the decoder weather the unit is the lowest layer.
  If it is not zero the input symbols are interpreted as unit indices which are inserted.
  Otherwise the input symbols are treated as usual.
  Currently this is only possible for {@link algo}="tp".</p>

  <table>
  <tr><th colspan=2>Restrictions to the Automaton</th></tr>
  <tr><td>maximal number of layers (on-the-fly)</td><td> 4          </td></tr>
  <tr><td>maximal number of units              </td><td>2^31-2      </td></tr>
  <tr><td>maximal number of states per unit    </td><td>2^31-2      </td></tr>
  <tr><td>maximal total number of transitions  </td><td>2^31-2      </td></tr>
  <tr><td>maximal in-/output symbol index      </td><td>2^31-2      </td></tr>
  <tr><td>pushdown memory size                 </td><td> 8          </td></tr>
  <tr><td>maximal/minimal pushdown symbol      </td><td>65535/-65535</td></tr>
  <tr><td>uniq state index for multiple layers (general)</td><tr>
  <tr><td colspan=2 align=right><img width=300px src="../resources/fstsearch/sid_restrict_1.png"></td></tr>
  <tr><td>uniq state index for multiple layers (speech recognition)</td><tr>
  <tr><td colspan=2 align=right><img width=300px src="../resources/fstsearch/sid_restrict_2.png"></td></tr>
  </table>

  @param itSrc Source automaton
  @param nUnit Zero-based unit index in itSrc

  @see /fast
END_MAN

METHOD:  -isearch
SYNTAX:  (data idWeights)
COMMENT: Iterative search: decode frames in idWeights
/html MAN:
  <p>This method performs an iterative search using the frames in idWeights.
  The following table shows all usage scenarions.</p>
  <table>
  <tr><th>Id</th><th>idWeigths</th><th>Option</th><th>Action</th><th>Possible<br>following calls</th><th>For {@link algo}'s:</th></tr>
  <tr><td>1</td><td>not empty</td><td></td>
    <td>Iteratively decode using frames in idWeights</td>
    <td>1,2</td><td>"tp"</td></tr>
  <tr><td>2</td><td>not empty</td><td>{@link /final}</td>
    <td>Iteratively decode using frames in idWeights<br>
    proceed until {@link numpaths} final states are reached</td>
    <td>-</td><td>"tp", "as", "sdp"</td></tr>
  <tr><td>3</td><td>empty     </td><td>{@link /final}</td>
    <td>Timeinvariant decoding</td>
    <td>-</td><td>"tp", "as"</td></tr>
  </table>

  @param idWeights Timevariant weight array.

  @see /final
  @see /start
END_MAN

METHOD:  -backtrack
SYNTAX:  (INSTANCE(fst) itDst)
COMMENT: Backtrack from the current decoding state
/html MAN:
  <p>Performs backtracking from the current decoding state for the {@link numpaths} best active paths.
  It will generate one unit for every path.
  The transitions are copied from the source automaton with all components unless you used {@link /fast}.
  The total path weight is stored in the unit table in the componet <code>"~GW"</code>.</p>

  <p>When backtracking while iterative decoding with the option {@link /final}
  backtrack only paths ending at a final state in the previous time frame.
  Without this option paths ending at any state in the current time frame are returned.
  After running {@link -isearch} with {@link /final} in any case only paths ending at
  a final state in the current time frame are decoded.</p>

  @param itDst Destination transducer

  @see /final
END_MAN

METHOD:  -restart
SYNTAX:  ()
COMMENT: Reset iterative search
/html MAN:
  <p>This method can be used to reset a iterative search without
  reloading the source transducer.</p>
END_MAN

METHOD:  -search
SYNTAX:  (INSTANCE(fst) itSrc, long nUnit, data idWeights, INSTANCE(fst) itDst)
COMMENT: All steps in one method
/html MAN:
  <p>This method does all things from loading the transducer over
  the search itself until the backtracking.</p>

  @see -load
  @see -isearch
  @see -backtrack
  @see /fast
  @see /start
END_MAN

######################################################################
## Interface code snippets

DONECODE:
  CFstsearch_Unload(_this);
  DONE;
END_CODE

RESETCODE:
  CFstsearch_Unload(_this);
  RESET;
END_CODE

## Generate files
-cgen
quit

## EOF

