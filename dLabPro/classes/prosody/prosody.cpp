// dLabPro class CProsody (Prosody)
// - Prosody class
//
// AUTHOR : Hussein Hussein
// PACKAGE: dLabPro/classes
//
// This file was generated by dcg. DO NOT MODIFY! Modify prosody.def instead.
// 
// Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
// - Chair of System Theory and Speech Technology, TU Dresden
// - Chair of Communications Engineering, BTU Cottbus
// 
// This file is part of dLabPro.
// 
// dLabPro is free software: you can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License as published by the Free
// Software Foundation, either version 3 of the License, or (at your option)
// any later version.
// 
// dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
// details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with dLabPro. If not, see <http://www.gnu.org/licenses/>.


//{{CGEN_INCLUDE
//}}CGEN_END
#include "dlp_prosody.h"

// Class CProsody

CProsody::CProsody(const char* lpInstanceName, BOOL bCallVirtual) : inherited(lpInstanceName,0)
{
	DEBUGMSG(-1,"CProsody::CProsody; (bCallVirtual=%d)",(int)bCallVirtual,0,0);
	dlp_strcpy(m_lpClassName,"Prosody");
	dlp_strcpy(m_lpObsoleteName,"");
	dlp_strcpy(m_lpProjectName,"prosody");
	dlp_strcpy(m_version.no,"1.0");
	dlp_strcpy(m_version.date,"");
	m_nClStyle = CS_AUTOACTIVATE;

	if (bCallVirtual)
	{
		DLPASSERT(OK(AutoRegisterWords()));
		Init(TRUE);
	}
}

CProsody::~CProsody()
{
  //{{CGEN_DONECODE
  DONE;
  //}}CGEN_DONECODE
}

INT16 CProsody::AutoRegisterWords()
{
	DEBUGMSG(-1,"CProsody::AutoRegisterWords",0,0,0);
	IF_NOK(inherited::AutoRegisterWords()) return NOT_EXEC;

	//{{CGEN_REGISTERWORDS

	// Register methods
	REGISTER_METHOD("-add_rms","",LPMF(CProsody,OnAddRms),"Add RMS/Energy values to the F0 contour.",0,"<data dSignal> <data dF0> <int nSrate> <int nSrateF0> <data dF0rms> <Prosody this>","")
	REGISTER_METHOD("-energy_contour","",LPMF(CProsody,OnEnergyContour),"Calculate the short time energy contour of speech signal.",0,"<data idSignal> <data idEnergy> <Prosody this>","")
	REGISTER_METHOD("-pause_detect","",LPMF(CProsody,OnPauseDetect),"Detect pauses in speech signal.",0,"<data idSignal> <data idPause> <Prosody this>","")
	REGISTER_METHOD("-pm_fo","",LPMF(CProsody,OnPmFo),"Calculate F0 contour from Pitch Mark.",0,"<data dPM> <int nSrate> <int nSrateF0> <data dF0> <Prosody this>","")

	// Register errors
	REGISTER_ERROR("~e1_0_0__1",EL_ERROR,FALSE_PAUSE,"Number of initial pauses is not equal to number of terminal pauses.")
	REGISTER_ERROR("~e2_0_0__1",EL_ERROR,NO_F0,"There is no F0 values.")
	REGISTER_ERROR("~e3_0_0__1",EL_ERROR,NO_SRate,"Sample rate for speech signal is not specified.")
	REGISTER_ERROR("~e4_0_0__1",EL_ERROR,NO_PM,"There is no Pitch Marks in the speech signal.")
	REGISTER_ERROR("~e5_0_0__1",EL_ERROR,Div_Zero,"Divide by zero.")
	//}}CGEN_REGISTERWORDS

	return O_K;
}

INT16 CProsody::Init(BOOL bCallVirtual)
{
	DEBUGMSG(-1,"CProsody::Init, (bCallVirtual=%d)",(int)bCallVirtual,0,0);
	//{{CGEN_INITCODE
  INIT;
	//}}CGEN_INITCODE

	// If last derivation call reset (do not reset members; already done by Init())
	if (bCallVirtual) return Reset(FALSE);
	else              return O_K;
}

INT16 CProsody::Reset(BOOL bResetMembers)
{
	DEBUGMSG(-1,"CProsody::Reset; (bResetMembers=%d)",(int)bResetMembers,0,0);
	//{{CGEN_RESETCODE
  RESET;
	//}}CGEN_RESETCODE

	return O_K;
}

INT16 CProsody::ClassProc()
{
	//{{CGEN_CLASSCODE
  return CLASSPROC;
	//}}CGEN_CLASSCODE

	return O_K;
}

#define CODE_DN3 /* check this for xml specific save code */
#define SAVE  SAVE_DN3
INT16 CProsody::Serialize(CDN3Stream* lpDest)
{
	//{{CGEN_SAVECODE
  return SAVE;
	//}}CGEN_SAVECODE

	return O_K;
}
#undef  SAVE
#undef  CODE_DN3

#define CODE_XML /* check this for xml specific save code */
#define SAVE  SAVE_XML
INT16 CProsody::SerializeXml(CXmlStream* lpDest)
{
	//{{CGEN_SAVECODE
  return SAVE;
	//}}CGEN_SAVECODE

	return O_K;
}
#undef  SAVE
#undef  CODE_XML

#define CODE_DN3 /* check this for dn3 specific restore code */
#define RESTORE  RESTORE_DN3
INT16 CProsody::Deserialize(CDN3Stream* lpSrc)
{
	//{{CGEN_RESTORECODE
  return RESTORE;
	//}}CGEN_RESTORECODE

	return O_K;
}
#undef  RESTORE
#undef  CODE_DN3

#define CODE_XML /* check this for xml specific restore code */
#define RESTORE  RESTORE_XML
INT16 CProsody::DeserializeXml(CXmlStream* lpSrc)
{
	//{{CGEN_RESTORECODE
  return RESTORE;
	//}}CGEN_RESTORECODE

	return O_K;
}
#undef  RESTORE
#undef  CODE_XML

INT16 CProsody::Copy(CDlpObject* __iSrc)
{
	//{{CGEN_COPYCODE
  return COPY;
	//}}CGEN_COPYCODE

	return O_K;
}

// Runtime class type information and class factory
INT16 CProsody::InstallProc(void* lpItp)
{
	//{{CGEN_INSTALLCODE
  return INSTALL;
	//}}CGEN_INSTALLCODE

	return O_K;
}

CProsody* CProsody::CreateInstance(const char* lpName)
{
	CProsody* lpNewInstance;
	ICREATEEX(CProsody,lpNewInstance,lpName,NULL);
	return lpNewInstance;
}

INT16 CProsody::GetClassInfo(SWord* lpClassWord)
{
	if (!lpClassWord) return NOT_EXEC;
	dlp_memset(lpClassWord,0,sizeof(SWord));

	lpClassWord->nWordType          = WL_TYPE_FACTORY;
	lpClassWord->nFlags             = CS_AUTOACTIVATE;
	lpClassWord->ex.fct.lpfFactory  = (LP_FACTORY_PROC)CProsody::CreateInstance;
	lpClassWord->ex.fct.lpfInstall  = CProsody::InstallProc;
	lpClassWord->ex.fct.lpProject   = "prosody";
	lpClassWord->ex.fct.lpBaseClass = "-";
	lpClassWord->lpComment          = "Prosody class";
	lpClassWord->ex.fct.lpAutoname  = "";
	lpClassWord->ex.fct.lpCname     = "CProsody";
	lpClassWord->ex.fct.lpAuthor    = "Hussein Hussein";

	dlp_strcpy(lpClassWord->lpName             ,"Prosody");
	dlp_strcpy(lpClassWord->lpObsname          ,"");
	dlp_strcpy(lpClassWord->ex.fct.version.no  ,"1.0");

	return O_K;
}

INT16 CProsody::GetInstanceInfo(SWord* lpClassWord)
{
	return CProsody::GetClassInfo(lpClassWord);
}

BOOL CProsody::IsKindOf(const char* lpClassName)
{
  if (dlp_strncmp(lpClassName,"Prosody",L_NAMES) == 0) return TRUE;
  else return inherited::IsKindOf(lpClassName);
}

INT16 CProsody::ResetAllOptions(BOOL bInit)
{
	DEBUGMSG(-1,"CProsody::ResetAllOptions;",0,0,0);
	//{{CGEN_RESETALLOPTIONS
	//}}CGEN_RESETALLOPTIONS

	return inherited::ResetAllOptions(bInit);
}

// Generated primary method invocation functions

#ifndef __NOITP
//{{CGEN_PMIC
INT16 CProsody::OnAddRms()
/* DO NOT CALL THIS FUNCTION FROM C++ SCOPE.     */
/* IT MAY INTERFERE WITH THE INTERPRETER SESSION */
{
	INT16 __nErr    = O_K;
	INT32  __nErrCnt = 0;
	MIC_CHECK;
	__nErrCnt = CDlpObject_GetErrorCount();
	data* dF0rms = MIC_GET_I_EX(dF0rms,data,1,1);
	INT32 nSrateF0 = (INT32)MIC_GET_N(2,0);
	INT32 nSrate = (INT32)MIC_GET_N(3,1);
	data* dF0 = MIC_GET_I_EX(dF0,data,4,2);
	data* dSignal = MIC_GET_I_EX(dSignal,data,5,3);
	if (CDlpObject_GetErrorCount()>__nErrCnt) return NOT_EXEC;
	__nErr = AddRms(dSignal, dF0, nSrate, nSrateF0, dF0rms);
	return __nErr;
}

INT16 CProsody::OnEnergyContour()
/* DO NOT CALL THIS FUNCTION FROM C++ SCOPE.     */
/* IT MAY INTERFERE WITH THE INTERPRETER SESSION */
{
	INT16 __nErr    = O_K;
	INT32  __nErrCnt = 0;
	MIC_CHECK;
	__nErrCnt = CDlpObject_GetErrorCount();
	data* idEnergy = MIC_GET_I_EX(idEnergy,data,1,1);
	data* idSignal = MIC_GET_I_EX(idSignal,data,2,2);
	if (CDlpObject_GetErrorCount()>__nErrCnt) return NOT_EXEC;
	__nErr = EnergyContour(idSignal, idEnergy);
	return __nErr;
}

INT16 CProsody::OnPauseDetect()
/* DO NOT CALL THIS FUNCTION FROM C++ SCOPE.     */
/* IT MAY INTERFERE WITH THE INTERPRETER SESSION */
{
	INT16 __nErr    = O_K;
	INT32  __nErrCnt = 0;
	MIC_CHECK;
	__nErrCnt = CDlpObject_GetErrorCount();
	data* idPause = MIC_GET_I_EX(idPause,data,1,1);
	data* idSignal = MIC_GET_I_EX(idSignal,data,2,2);
	if (CDlpObject_GetErrorCount()>__nErrCnt) return NOT_EXEC;
	__nErr = PauseDetect(idSignal, idPause);
	return __nErr;
}

INT16 CProsody::OnPmFo()
/* DO NOT CALL THIS FUNCTION FROM C++ SCOPE.     */
/* IT MAY INTERFERE WITH THE INTERPRETER SESSION */
{
	INT16 __nErr    = O_K;
	INT32  __nErrCnt = 0;
	MIC_CHECK;
	__nErrCnt = CDlpObject_GetErrorCount();
	data* dF0 = MIC_GET_I_EX(dF0,data,1,1);
	INT32 nSrateF0 = (INT32)MIC_GET_N(2,0);
	INT32 nSrate = (INT32)MIC_GET_N(3,1);
	data* dPM = MIC_GET_I_EX(dPM,data,4,2);
	if (CDlpObject_GetErrorCount()>__nErrCnt) return NOT_EXEC;
	__nErr = PmFo(dPM, nSrate, nSrateF0, dF0);
	return __nErr;
}

//}}CGEN_PMIC
#endif /* #ifndef __NOITP */


// Generated secondary method invocation functions

//{{CGEN_SMIC
//}}CGEN_SMIC


// Generated option change callback functions

//{{CGEN_OCCF
//}}CGEN_OCCF


// Generated field change callback functions

//{{CGEN_FCCF
//}}CGEN_FCCF


// EOF
