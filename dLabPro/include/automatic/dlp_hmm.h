// dLabPro class CHmm (hmm)
// - Header file
//
// AUTHOR : Matthias Wolff
// PACKAGE: dLabPro/classes
//
// This file was generated by dcg. DO NOT MODIFY! Modify hmm.def instead.
// 
// Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
// - Chair of System Theory and Speech Technology, TU Dresden
// - Chair of Communications Engineering, BTU Cottbus
// 
// This file is part of dLabPro.
// 
// dLabPro is free software: you can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License as published by the Free
// Software Foundation, either version 3 of the License, or (at your option)
// any later version.
// 
// dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
// details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with dLabPro. If not, see <http://www.gnu.org/licenses/>.


//{{CGEN_INCLUDE
#include "dlp_config.h"
#include "dlp_object.h"
#include "dlp_fst.h"
#include "dlp_gmm.h"
#include "dlp_statistics.h"
//}}CGEN_END

//{{CGEN_ERRORS
#undef HMM_DISCARDGMM      
#undef HMM_BADNOLAB        
#undef HMM_NOSPLIT         
#undef HMM_INCOMPAT        
#define HMM_DISCARDGMM       -1024
#define HMM_BADNOLAB         -1025
#define HMM_NOSPLIT          -1026
#define HMM_INCOMPAT         -1027
//}}CGEN_END

// C/C++ language abstraction layer
#undef hmm_par
#define hmm_par CHmm

// dLabPro/C++ language abstraction layer
#undef hmm
#define hmm CHmm

//{{CGEN_DEFINE
//}}CGEN_DEFINE

#ifndef __HMM_H
#define __HMM_H

//{{CGEN_HEADERCODE
//}}CGEN_HEADERCODE

// Class CHmm

class CHmm : public CFst 
{

typedef CFst inherited;
typedef CHmm thisclass;

//{{CGEN_FRIENDS
//}}CGEN_FRIENDS
public:
	CHmm(const char* lpInstanceName, BOOL bCallVirtual = 1);
	virtual ~CHmm();

// Virtual and static function overrides
public:
	virtual INT16 AutoRegisterWords();
	virtual INT16 Init(BOOL bCallVirtual = 0);
	virtual INT16 Reset(BOOL bResetMembers = 1);
	virtual INT16 Serialize(CDN3Stream* lpDest);
	virtual INT16 SerializeXml(CXmlStream* lpDest);
	virtual INT16 Deserialize(CDN3Stream* lpSrc);
	virtual INT16 DeserializeXml(CXmlStream* lpSrc);
	virtual INT16 Copy(CDlpObject* iSrc);
	virtual INT16 ClassProc();
	static  INT16 InstallProc(void* lpItp);
	static  CHmm* CreateInstance(const char* lpName);
	static  INT16 GetClassInfo(SWord* lpClassWord);
	virtual INT16 GetInstanceInfo(SWord* lpClassWord);
	virtual BOOL  IsKindOf(const char* lpClassName);
	virtual INT16 ResetAllOptions(BOOL bInit = 0);

// Primary method invocation functions            
// DO NOT CALL THESE FUNCTIONS FROM C SCOPE.      
// THEY MAY INTERFERE WITH THE INTERPRETER SESSION
#ifndef __NOITP
public:
//{{CGEN_PMIC
	INT16 OnBestN();
	INT16 OnBwalpha();
	INT16 OnBwupdate();
	INT16 OnCat();
	INT16 OnCleanup();
	INT16 OnClose();
	INT16 OnCompose();
	INT16 OnCopyFst();
	INT16 OnCopyUi();
	INT16 OnDeterminize();
	INT16 OnEpsremove();
	INT16 OnGenMap();
	INT16 OnGetDim();
	INT16 OnHmm();
	INT16 OnIntersect();
	INT16 OnInvert();
	INT16 OnMergeStats();
	INT16 OnMinimize();
	INT16 OnProduct();
	INT16 OnSetup();
	INT16 OnSetupEx();
	INT16 OnSetupGmm();
	INT16 OnSplit();
	INT16 OnTree();
	INT16 OnUnion();
	INT16 OnUpdate();
//}}CGEN_PMIC
#endif // #ifndef __NOITP

// Secondary method invocation functions
public:
//{{CGEN_SMIC
	INT16 BestN(hmm* itSrc, INT32 nUnit, INT32 nPaths, INT32 nPathlength);
	INT16 Cat(hmm* itSrc);
	INT16 Close(hmm* itSrc, INT32 nUnit);
	INT16 Compose(hmm* itSrc1, fst* itSrc2, INT32 nUnit1, INT32 nUnit2);
	INT16 CopyUi(hmm* itSrc, data* idIndex, INT32 nPar);
	INT16 Determinize(hmm* itSrc, INT32 nUnit);
	INT16 Epsremove(hmm* itSrc, INT32 nUnit);
	INT16 Hmm(hmm* itSrc, INT32 nUnit);
	INT16 Intersect(hmm* itSrc1, hmm* itSrc2, INT32 nUnit1, INT32 nUnit2);
	INT16 Invert(INT32 nUnit);
	INT16 Minimize(hmm* itSrc, INT32 nUnit);
	INT16 Product(fst* itSrc1, fst* itSrc2, INT32 nUnit1, INT32 nUnit2);
	INT16 Project();
	INT16 Setup(INT32 nMsf, data* idHmms);
	INT16 Tree(hmm* itSrc, INT32 nUnit);
	INT16 Union(hmm* itSrc);
	INT16 Unweight();
//}}CGEN_SMIC

// Option changed callback functions
public:
//{{CGEN_OCCF
//}}CGEN_OCCF

// Field changed callback functions
public:
//{{CGEN_FCCF
//}}CGEN_FCCF

// Scanned member functions
//{{CGEN_EXPORT

// Taken from 'hmm_aux.cpp'
	public: INT16 CopyUiEx(CHmm* itSrc, CData* idIndex, INT32 nPar, BOOL bCat);
	public: INT16 Op(CFst* itSrc1, CFst* itSrc2, FLOAT64 nPar1, FLOAT64 nPar2, INT16 nOpc);

// Taken from 'hmm_iam.cpp'
	public: INT16 SetupEx(INT32 nMsf, CData* idHmms, INT32 nLsf, INT32 nPlf, INT32 nPsf, INT32 nPmf);
	private: INT16 GrcNormalize();
	public: INT16 SetupGmm(FLOAT64 nMindet);
	private: char GmmMix_CompareGauss(struct ssTperG* lpTperG1, struct ssTperG* lpTperG2);
	private: void GmmMix_CreateMixture(INT32* lpGinMix, INT32 nNG, INT32 nG, struct ssTperG* lpTperG, INT32 nIcW, INT16 nWsrt, CData* idTmx, INT32 nNGnew, char* lpTDel);
	public: INT16 GmmMix();
	public: INT16 ResetStats();
	private: INT16 MergeStatsInt(CHmm* iSrc, const char* lpsFid);
	public: INT16 MergeStats(CHmm* iSrc);
	private: INT16 UpdateStatInt(CStatistics* iStat, CData* idVec, CData* idLab);
	public: INT16 Update(CData* idSrc, INT32 nIcTis, INT32 nIcTer, CData* idMsf, CData* idLsf, INT32 nUnit);
	public: INT16 Bwupdate(CData* idAlpha, CData* idMsf, CData* idLsf, INT32 nUnit);
	public: INT16 Split(FLOAT64 nMinRc, INT32 nMaxCnt, CData* idMap);
	public: INT16 CopyFst(CFst* itSrc);
	public: INT32 GetDim();
	public: INT16 GenMap(CData* idLab, INT32 nIcLab, INT32 nIcOfs, INT32 nIcLen, CData* idMap);
	public: INT16 Cleanup(CHmm* itSrc);
	public: INT16 Bwalpha(INT32 nUnit, CData* idWeights, CData* idAlpha);
//}}CGEN_EXPORT

// Member variables
public:

//{{CGEN_FIELDS
	fst*             m_iBwalphaFstRev;
	data*            m_idBwalphaG;
	data*            m_idBwalphaH;
	gmm*             m_iGm;
	data*            m_idGrc;
	CData*           m_idLsmean;
	statistics*      m_iPfsl;
	statistics*      m_iPfsm;
	statistics*      m_iPls;
	statistics*      m_iPms;
	statistics*      m_iPss;
//}}CGEN_FIELDS

//{{CGEN_OPTIONS
	BOOL m_bByrc;
	BOOL m_bFast;
	BOOL m_bNomix;
	BOOL m_bVar;
//}}CGEN_OPTIONS
}

;

// Scanned C (member) functions
//{{CGEN_CEXPORT

// Taken from 'hmm_aux.cpp'

// Taken from 'hmm_iam.cpp'
//}}CGEN_CEXPORT

#endif //#ifndef __HMM_H


// EOF
