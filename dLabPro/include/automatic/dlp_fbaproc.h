// dLabPro class CFBAproc (FBAproc)
// - Header file
//
// AUTHOR : Matthias Eichner
// PACKAGE: dLabPro/classes
//
// This file was generated by dcg. DO NOT MODIFY! Modify fbaproc.def instead.
// 
// Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
// - Chair of System Theory and Speech Technology, TU Dresden
// - Chair of Communications Engineering, BTU Cottbus
// 
// This file is part of dLabPro.
// 
// dLabPro is free software: you can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License as published by the Free
// Software Foundation, either version 3 of the License, or (at your option)
// any later version.
// 
// dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
// details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with dLabPro. If not, see <http://www.gnu.org/licenses/>.


//{{CGEN_INCLUDE
#include "dlp_config.h"
#include "dlp_object.h"
#include "kzl_list.h"
#include "dlp_data.h"
#include "dlp_matrix.h"
#include "dlp_math.h"
//}}CGEN_END

//{{CGEN_ERRORS
#undef FBA_BADNAME         
#undef FBA_BADINPUT        
#undef FBA_BADARG          
#undef FBA_EXTWIN          
#undef FBA_BADPITCH        
#undef FBA_BADINTO         
#undef FBA_BADDELTATABLE   
#undef FBA_BADDELTAWEIGHTS 
#undef FBA_BADSAMP         
#undef FBA_BADFRAMELEN     
#undef FBA_BADEXCLEN       
#undef FBA_ANALYSE         
#undef FBA_LABEL           
#undef FBA_SYNTHESISE      
#undef FBA_CRATE           
#undef FBA_SYNINTOLAB      
#undef FBA_NOTIMPLEMENTED  
#define FBA_BADNAME          -1001
#define FBA_BADINPUT         -1002
#define FBA_BADARG           -1003
#define FBA_EXTWIN           -1004
#define FBA_BADPITCH         -1005
#define FBA_BADINTO          -1006
#define FBA_BADDELTATABLE    -1007
#define FBA_BADDELTAWEIGHTS  -1008
#define FBA_BADSAMP          -1009
#define FBA_BADFRAMELEN      -1010
#define FBA_BADEXCLEN        -1011
#define FBA_ANALYSE          -1012
#define FBA_LABEL            -1013
#define FBA_SYNTHESISE       -1014
#define FBA_CRATE            -1015
#define FBA_SYNINTOLAB       -1016
#define FBA_NOTIMPLEMENTED   -1017
//}}CGEN_END

// C/C++ language abstraction layer
#undef fbaproc_par
#define fbaproc_par CFBAproc

// dLabPro/C++ language abstraction layer
#undef FBAproc
#define FBAproc CFBAproc

//{{CGEN_DEFINE
#define FBA_NOLOG          0
#define FBA_LOG            1
#define FBA_LOG10          2
#define FBA_LOG2           3
#define FBA_GRANY          100
//}}CGEN_DEFINE

#ifndef __FBAPROC_H
#define __FBAPROC_H

//{{CGEN_HEADERCODE
  struct SLAB { const char* phoneme; INT32 pos; };
//}}CGEN_HEADERCODE

// Class CFBAproc

class CFBAproc : public CDlpObject 
{

typedef CDlpObject inherited;
typedef CFBAproc thisclass;

//{{CGEN_FRIENDS
//}}CGEN_FRIENDS
public:
	CFBAproc(const char* lpInstanceName, BOOL bCallVirtual = 1);
	virtual ~CFBAproc();

// Virtual and static function overrides
public:
	virtual INT16 AutoRegisterWords();
	virtual INT16 Init(BOOL bCallVirtual = 0);
	virtual INT16 Reset(BOOL bResetMembers = 1);
	virtual INT16 Serialize(CDN3Stream* lpDest);
	virtual INT16 SerializeXml(CXmlStream* lpDest);
	virtual INT16 Deserialize(CDN3Stream* lpSrc);
	virtual INT16 DeserializeXml(CXmlStream* lpSrc);
	virtual INT16 Copy(CDlpObject* iSrc);
	virtual INT16 ClassProc();
	static  INT16 InstallProc(void* lpItp);
	static  CFBAproc* CreateInstance(const char* lpName);
	static  INT16 GetClassInfo(SWord* lpClassWord);
	virtual INT16 GetInstanceInfo(SWord* lpClassWord);
	virtual BOOL  IsKindOf(const char* lpClassName);
	virtual INT16 ResetAllOptions(BOOL bInit = 0);

// Primary method invocation functions            
// DO NOT CALL THESE FUNCTIONS FROM C SCOPE.      
// THEY MAY INTERFERE WITH THE INTERPRETER SESSION
#ifndef __NOITP
public:
//{{CGEN_PMIC
	INT16 OnAdjustSpeechRate();
	INT16 OnAlignFramesToPitch();
	INT16 OnAnalyze();
	INT16 OnCompressPitch();
	INT16 OnDelta();
	INT16 OnFixed2floating();
	INT16 OnFloating2fixed();
	INT16 OnGenPitch();
	INT16 OnGetDurationsFromInventory();
	INT16 OnModEx();
	INT16 OnResamplePitch();
	INT16 OnRootsTrack();
	INT16 OnSmooth();
	INT16 OnSynthesize();
//}}CGEN_PMIC
#endif // #ifndef __NOITP

// Secondary method invocation functions
public:
//{{CGEN_SMIC
	INT16 Delta(data* in, data* out);
	INT16 Fixed2floating(data* in, data* out);
	INT16 Floating2fixed(data* in, data* out);
//}}CGEN_SMIC

// Option changed callback functions
public:
//{{CGEN_OCCF
//}}CGEN_OCCF

// Field changed callback functions
public:
//{{CGEN_FCCF
	INT16 OnLenChanged();
	INT16 OnNseFlrChanged();
	INT16 OnNseLenChanged();
	INT16 OnNsePrcChanged();
	INT16 OnNseUseChanged();
	INT16 OnPfaLambdaChanged();
	INT16 OnQuantizationChanged();
	INT16 OnSrateChanged();
	INT16 OnWindowChanged();
	INT16 OnWlenChanged();
	INT16 OnWtypeChanged();
//}}CGEN_FCCF

// Scanned member functions
//{{CGEN_EXPORT

// Taken from 'fba_work.cpp'
	public: INT16 Analyze(data* idSignal, data* idPitch, data* idReal, data* idImag);
	protected: INT16 DoFraming(data* idSignal, data* idPitch, data* idFrames, data* idWLen);
	public: virtual INT16 AnalyzeFrame();
	public: virtual INT16 AnalyzeMatrix(CData* idFrames, CData* idReal);
	protected: INT16 DeltaCheckWeights(BOOL bSilent = FALSE);
	protected: INT16 DeltaFBA(CData* idSrc, CData* idDst);
	protected: INT16 DeltaMF(CData* dIn, CData* dOut);
	protected: INT16 VerifyDeltaTable(INT16 nComp, INT16* bNodelta);
	protected: INT16 MakeWindow(INT32 nWlen);
	protected: INT16 InitBuffers();
	public: virtual void PrepareOutput(CData* dResult);
	public: INT16 Warp(CData* dIn, CData* dOut, FLOAT64 nLambda, INT32 nDim);
	protected: INT16 WARP();
	protected: INT16 GenBilinearWarpMatrix(FLOAT64 nLambda, INT32 nDim);
	public: virtual INT16 Smooth(data* idIn, data* idPm, data* idOut);
	protected: INT16 SmoothRoots(data* idIn, data* idPm, data* idOut);
	protected: INT16 SmoothFea(data* idIn, data* idPm, data* idOut);
	protected: virtual INT16 RootsTrack(CData* idFea, CData* idRootsReal, CData* idRootsImag, CData* idVUV);
	protected: INT16 RootsTrackImpl(CData* idFea, CData* idRoots, CData* idVUV);
	public: INT16 Poly(CData* idRootsReal, CData* idRootsImag, CData* idPoly);
	protected: virtual INT16 OnPfaLambdaChangedImpl();

// Taken from 'fba_fft.cpp'
	protected: INT16 MAG();
	protected: INT16 LOG10();
	protected: INT16 LN();

// Taken from 'fba_synt.cpp'
	public: INT16 ModEx(CData* idPm, CData* idExcite);
	public: INT16 ResamplePitch(CData* idPitch, CData* idNewPitch, INT32 nFFreq);
	public: INT16 CompressPitch(CData* idPitch, CData* idNewPitch, FLOAT32 factor);
	public: INT16 AdjustSpeechRate(CData* idPitch, CData* idNewPitch, CData* idFea, CData* idNewFea, FLOAT32 rate);
	public: INT16 AlignFramesToPitch(CData* idPitch, CData* idFea, CData* idNewFea);
	public: INT16 GenPitch(CData* idProso, CData* idPitch);
	public: INT16 Synthesize(data* idFea, data* idControl, data* idSyn);
	protected: virtual INT16 SynthesizeUsingPM(data* idFea, data* idPm, data* idSyn);
	private: INT16 SynthesizeUsingIntoGetFeaIntoLab(CData* idFea, CData* idInto, SLAB** sFeaLab, SLAB** sIntoLab, INT32* nSamples, INT32* nLab);
	protected: virtual INT16 GetDurationsFromInventory(data* idFea, data* idInto);
	protected: virtual INT16 SynthesizeUsingInto(data* idFea, data* idInto, data* idSyn);
	public: virtual BOOL IsFeaVoiceless(FLOAT64* fea, INT16 n_fea);
	public: virtual INT16 FeaEnhancement(FLOAT64* fea, INT16 n_fea);
	public: INT16 SynthesizeFrame(FLOAT64* fea, INT16 n_fea, FLOAT64* exc, INT32 n_exc, FLOAT64* syn);
	protected: virtual INT16 SynthesizeFrameImpl(FLOAT64* fea, INT16 n_fea, FLOAT64* exc, INT32 n_exc, FLOAT64 nPfaLambda, FLOAT64 nSynLambda, FLOAT64* syn);

// Taken from 'fba_stat.cpp'
	public: void Status();
//}}CGEN_EXPORT

// Member variables
public:

//{{CGEN_FIELDS
	FLOAT32          m_nBaseF0;
	FLOAT32          m_nBaseI0;
	INT32            m_nCrate;
	FLOAT64          m_nDC;
	CData*           m_idDeltaTable;
	CData*           m_idDeltaWeights;
	CData*           m_idEnergy;
	CData*           m_idExc;
	char             m_lpsExcType[2];
	CData*           m_idImagFrame;
	CData*           m_idLabels;
	INT32            m_nLen;
	INT16            m_nMatrixAnalysis;
	FLOAT64          m_nMinLog;
	INT16            m_nNPeriods;
	CData*           m_idNseFlr;
	INT32            m_nNseLen;
	FLOAT64          m_nNsePrc;
	BOOL             m_bNseUse;
	INT32            m_nOutDim;
	FLOAT64          m_nPfaLambda;
	FLOAT64          m_nPreem;
	INT16            m_nQuantization;
	CData*           m_idRealFrame;
	FLOAT64          m_nSrate;
	FLOAT64          m_nSynLambda;
	INT16            m_nSync;
	char             m_lpsType[255];
	CData*           m_idWarp;
	CData*           m_idWindow;
	INT32            m_nWlen;
	INT16            m_nWnorm;
	char             m_lpsWtype[255];
//}}CGEN_FIELDS

//{{CGEN_OPTIONS
	BOOL m_bAnaSmoothFea;
	BOOL m_bAnaSmoothRoots;
	BOOL m_bDeltaMf;
	BOOL m_bEnergy;
	BOOL m_bLogEnergy;
	BOOL m_bQuantize8;
	BOOL m_bRmdc;
	BOOL m_bSynEnhancement;
	BOOL m_bSynSmoothFea;
	BOOL m_bSynSmoothRoots;
	BOOL m_bTimeDomainWarping;
//}}CGEN_OPTIONS
}

;

// Scanned C (member) functions
//{{CGEN_CEXPORT

// Taken from 'fba_work.cpp'

// Taken from 'fba_fft.cpp'

// Taken from 'fba_synt.cpp'

// Taken from 'fba_stat.cpp'
//}}CGEN_CEXPORT

#endif //#ifndef __FBAPROC_H


// EOF
