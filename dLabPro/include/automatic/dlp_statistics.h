/* dLabPro class CStatistics (statistics)
 * - Header file
 *
 * AUTHOR : Matthias Wolff, Christian-M. Westendorf
 * PACKAGE: dLabPro/classes
 *
 * This file was generated by dcg. DO NOT MODIFY! Modify statistics.def instead.
 * 
 * Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
 * - Chair of System Theory and Speech Technology, TU Dresden
 * - Chair of Communications Engineering, BTU Cottbus
 * 
 * This file is part of dLabPro.
 * 
 * dLabPro is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 * 
 * dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with dLabPro. If not, see <http://www.gnu.org/licenses/>.
 */

/*{{CGEN_INCLUDE */
#include "dlp_config.h"
#include "dlp_object.h"
#include "dlp_data.h"
/*}}CGEN_END */

/*{{CGEN_ERRORS */
#undef STA_NOTSETUP        
#undef STA_VECIGNORED      
#undef STA_IGNORE          
#undef STA_DIM             
#undef STA_BADCOMP         
#undef STA_SLAB            
#undef STA_NLAB            
#undef STA_INCOMPAT        
#define STA_NOTSETUP         -1001
#define STA_VECIGNORED       -1002
#define STA_IGNORE           -1003
#define STA_DIM              -1004
#define STA_BADCOMP          -1005
#define STA_SLAB             -1006
#define STA_NLAB             -1007
#define STA_INCOMPAT         -1008
/*}}CGEN_END */

/* C/C++ language abstraction layer */
#undef statistics_par
#define statistics_par CStatistics

/* dLabPro/C++ language abstraction layer */
#undef statistics
#define statistics CStatistics

/*{{CGEN_DEFINE */
#define STA_PROTOCOL_FOOTER(LVL,MSG)   IFCHECKEX(LVL)   {     printf(    "\n   %s \n",MSG);     dlp_fprint_x_line(stdout,'-',dlp_maxprintcols());     printf("\n");   }
#define STA_DAI_SSIZE 0
#define STA_DAI_MIN   1
#define STA_DAI_MAX   2
#define STA_DAI_SUM   3
#define STA_DAI_MSUM  4
#define STA_DAI_KSUM  5
#define STA_KMA_CENT  0x1000
#define STA_KMA_MIN   0x0001
#define STA_KMA_MAX   0x0002
#define STA_KMA_SPAN  0x0003
#define STA_KMA_N1    0x0001
#define STA_KMA_SDEV  0x0002
#define STA_KMA_COEF  0x0004
#define STA_KMA_SKEW  0x0001
#define STA_KMA_EXCS  0x0001
#define STA_CMA_SCAT  0x0001
#define STA_CMA_COV   0x0002
#define STA_CMA_CORC  0x0003
#define STA_CMA_DETC  0x0004
/*}}CGEN_DEFINE */

#ifndef __STATISTICS_H
#define __STATISTICS_H

/*{{CGEN_HEADERCODE */
/*}}CGEN_HEADERCODE */

/* Class CStatistics */

#ifdef __cplusplus

class CStatistics : public CDlpObject 
{

typedef CDlpObject inherited;
typedef CStatistics thisclass;

/*{{CGEN_FRIENDS */
/*}}CGEN_FRIENDS */
public:
	CStatistics(const char* lpInstanceName, BOOL bCallVirtual = 1);
	virtual ~CStatistics();

/* Virtual and static function overrides */
public:
	virtual INT16 AutoRegisterWords();
	virtual INT16 Init(BOOL bCallVirtual = 0);
	virtual INT16 Reset(BOOL bResetMembers = 1);
	virtual INT16 Serialize(CDN3Stream* lpDest);
	virtual INT16 SerializeXml(CXmlStream* lpDest);
	virtual INT16 Deserialize(CDN3Stream* lpSrc);
	virtual INT16 DeserializeXml(CXmlStream* lpSrc);
	virtual INT16 Copy(CDlpObject* iSrc);
	virtual INT16 ClassProc();
	static  INT16 InstallProc(void* lpItp);
	static  CStatistics* CreateInstance(const char* lpName);
	static  INT16 GetClassInfo(SWord* lpClassWord);
	virtual INT16 GetInstanceInfo(SWord* lpClassWord);
	virtual BOOL  IsKindOf(const char* lpClassName);
	virtual INT16 ResetAllOptions(BOOL bInit = 0);

/* Primary method invocation functions             */
/* DO NOT CALL THESE FUNCTIONS FROM C SCOPE.       */
/* THEY MAY INTERFERE WITH THE INTERPRETER SESSION */
#ifndef __NOITP
public:
/*{{CGEN_PMIC */
	INT16 OnCorc();
	INT16 OnCov();
	INT16 OnDetc();
	INT16 OnExcs();
	INT16 OnFreq();
	INT16 OnKmoment();
	INT16 OnMax();
	INT16 OnMean();
	INT16 OnMerge();
	INT16 OnMin();
	INT16 OnPool();
	INT16 OnProb();
	INT16 OnScat();
	INT16 OnSdev();
	INT16 OnSetup();
	INT16 OnSkew();
	INT16 OnSpan();
	INT16 OnStatus();
	INT16 OnUpdate();
	INT16 OnVar();
	INT16 OnVarc();
/*}}CGEN_PMIC */
#endif /* #ifndef __NOITP */

/* Secondary method invocation functions */
public:
/*{{CGEN_SMIC */
	INT16 Corc(data* idDst);
	INT16 Cov(data* idDst);
	INT16 Detc(data* idDst);
	INT16 Excs(data* idDst);
	INT16 Freq(data* idDst);
	INT16 Kmoment(INT16 k, data* idDst);
	INT16 Max(data* idDst);
	INT16 Mean(data* idDst);
	INT16 Min(data* idDst);
	INT16 Prob(data* idDst);
	INT16 Scat(data* idDst);
	INT16 Sdev(data* idDst);
	INT16 Skew(data* idDst);
	INT16 Span(data* idDst);
	INT16 Var(data* idDst);
	INT16 Varc(data* idDst);
/*}}CGEN_SMIC */

/* Option changed callback functions */
public:
/*{{CGEN_OCCF */
/*}}CGEN_OCCF */

/* Field changed callback functions */
public:
/*{{CGEN_FCCF */
/*}}CGEN_FCCF */

/* Scanned member functions */
/*{{CGEN_EXPORT */

/* Taken from 'sta_aux.c' */
	public: INT32 GetDim();
	public: INT32 GetNClasses();
	public: INT32 GetOrder();
	public: INT32 GetNSamples();
	private: FLOAT64* GetPtr(INT32 c, INT16 nData);
	public: INT16 FreqEx(CData* idDst, BOOL bProb);
	protected: INT16 CheckDat();
	protected: INT16 CheckLtb();
	public: INT16 Check();
	public: INT16 Status();

/* Taken from 'sta_cor.c' */
	private: FLOAT64 Cov(FLOAT64* lpMsum, FLOAT64* lpSum, INT32 N, FLOAT64 I, INT32 n, INT32 m);
	public: INT16 CorrelationEx(CData* idDst, INT16 nMode);

/* Taken from 'sta_mom.c' */
	private: void Moment0(FLOAT64* lpY, INT32 c, INT32 N, INT16 nMode);
	private: void Moment1(FLOAT64* lpY, INT32 c, INT32 N, INT16 nMode);
	private: void Moment2(FLOAT64* lpY, INT32 c, INT32 N, INT16 nMode);
	private: void MomentK(FLOAT64* lpY, INT32 c, INT32 k, INT32 N, INT32 K, INT16 nMode);
	private: void Skewness(FLOAT64* lpY, INT32 c, INT32 N, INT32 K);
	private: void Excess(FLOAT64* lpY, INT32 c, INT32 N, INT32 K);
	public: INT16 MomentEx(CData* idDst, INT16 k, INT16 nMode);

/* Taken from 'sta_reo.c' */
	private: static void PoolInt(CData* idPool, CData* idSrc, INT32 nMode);
	public: INT16 Pool(CStatistics* iSrc, CData* idMap);
	public: INT16 Merge(CStatistics* iSrc);

/* Taken from 'sta_upd.c' */
	public: INT16 Setup(INT32 nOrder, INT32 nDim, INT32 nCls, CData* idLtb, INT32 nIcLtb);
	protected: INT16 UpdateVector(FLOAT64* lpX, INT32 c, FLOAT64 w);
	public: INT16 Update(CData* idVec, INT32 nIcLab, CData* idW);
/*}}CGEN_EXPORT */

/* Member variables */
public:
/*{{CGEN_ICXX_FIELDS */
	data*            m_idDat;
	data*            m_idLtb;
/*}}CGEN_ICXX_FIELDS */

#else  /* #ifdef __cplusplus */

typedef struct CStatistics
{
  /* Pointer to C base instance */
  struct CDlpObject* m_lpBaseInstance;

/*{{CGEN_IC_FIELDS */
	CDlpObject*      m_idDat;
	CDlpObject*      m_idLtb;
/*}}CGEN_IC_FIELDS */

#endif /* #ifdef __cplusplus */

/*{{CGEN_FIELDS */
	FLOAT64          m_nMinVar;
	BOOL             m_bWeighted;
/*}}CGEN_FIELDS */

/*{{CGEN_OPTIONS */
	BOOL m_bCentral;
	BOOL m_bLabel;
	BOOL m_bSn;
/*}}CGEN_OPTIONS */
}

#ifndef __cplusplus
CStatistics
#endif
;

/* Class CStatistics (C functions)*/

/* Virtual function overrides */
void  CStatistics_Constructor(CStatistics*, const char* lpInstanceName, BOOL bCallVirtual);
void  CStatistics_Destructor(CDlpObject*);
INT16 CStatistics_AutoRegisterWords(CDlpObject*);
INT16 CStatistics_Reset(CDlpObject*, BOOL bResetMembers);
INT16 CStatistics_Init(CDlpObject*, BOOL bCallVirtual);
INT16 CStatistics_Serialize(CDlpObject*, CDN3Stream* lpDest);
INT16 CStatistics_SerializeXml(CDlpObject*, CXmlStream* lpDest);
INT16 CStatistics_Deserialize(CDlpObject*, CDN3Stream* lpSrc);
INT16 CStatistics_DeserializeXml(CDlpObject*, CXmlStream* lpSrc);
INT16 CStatistics_Copy(CDlpObject*, CDlpObject* __iSrc);
INT16 CStatistics_ClassProc(CDlpObject*);
INT16 CStatistics_InstallProc(void* lpItp);
CStatistics* CStatistics_CreateInstance(const char* lpName);
INT16 CStatistics_GetClassInfo(SWord* lpClassWord);
INT16 CStatistics_GetInstanceInfo(CDlpObject*, SWord* lpClassWord);
BOOL  CStatistics_IsKindOf(CDlpObject*, const char* lpClassName);
INT16 CStatistics_ResetAllOptions(CDlpObject*, BOOL bInit);

/* Primary method invocation functions             */
/* DO NOT CALL THESE FUNCTIONS FROM C SCOPE.       */
/* THEY MAY INTERFERE WITH THE INTERPRETER SESSION */
#ifndef __NOITP
/*{{CGEN_CPMIC */
INT16 CStatistics_OnCorc(CDlpObject*);
INT16 CStatistics_OnCov(CDlpObject*);
INT16 CStatistics_OnDetc(CDlpObject*);
INT16 CStatistics_OnExcs(CDlpObject*);
INT16 CStatistics_OnFreq(CDlpObject*);
INT16 CStatistics_OnKmoment(CDlpObject*);
INT16 CStatistics_OnMax(CDlpObject*);
INT16 CStatistics_OnMean(CDlpObject*);
INT16 CStatistics_OnMerge(CDlpObject*);
INT16 CStatistics_OnMin(CDlpObject*);
INT16 CStatistics_OnPool(CDlpObject*);
INT16 CStatistics_OnProb(CDlpObject*);
INT16 CStatistics_OnScat(CDlpObject*);
INT16 CStatistics_OnSdev(CDlpObject*);
INT16 CStatistics_OnSetup(CDlpObject*);
INT16 CStatistics_OnSkew(CDlpObject*);
INT16 CStatistics_OnSpan(CDlpObject*);
INT16 CStatistics_OnStatus(CDlpObject*);
INT16 CStatistics_OnUpdate(CDlpObject*);
INT16 CStatistics_OnVar(CDlpObject*);
INT16 CStatistics_OnVarc(CDlpObject*);
/*}}CGEN_CPMIC */
#endif /* #ifndef __NOITP */

/* Secondary method invocation functions */
/*{{CGEN_CSMIC */
INT16 CStatistics_Corc(CStatistics*, data* idDst);
INT16 CStatistics_Cov(CStatistics*, data* idDst);
INT16 CStatistics_Detc(CStatistics*, data* idDst);
INT16 CStatistics_Excs(CStatistics*, data* idDst);
INT16 CStatistics_Freq(CStatistics*, data* idDst);
INT16 CStatistics_Kmoment(CStatistics*, INT16 k, data* idDst);
INT16 CStatistics_Max(CStatistics*, data* idDst);
INT16 CStatistics_Mean(CStatistics*, data* idDst);
INT16 CStatistics_Min(CStatistics*, data* idDst);
INT16 CStatistics_Prob(CStatistics*, data* idDst);
INT16 CStatistics_Scat(CStatistics*, data* idDst);
INT16 CStatistics_Sdev(CStatistics*, data* idDst);
INT16 CStatistics_Skew(CStatistics*, data* idDst);
INT16 CStatistics_Span(CStatistics*, data* idDst);
INT16 CStatistics_Var(CStatistics*, data* idDst);
INT16 CStatistics_Varc(CStatistics*, data* idDst);
/*}}CGEN_CSMIC */

/* Option changed callback functions */
/*{{CGEN_COCCF */
/*}}CGEN_COCCF */

/* Field changed callback functions */
/*{{CGEN_CFCCF */
/*}}CGEN_CFCCF */

/* Scanned C (member) functions */
/*{{CGEN_CEXPORT */

/* Taken from 'sta_aux.c' */
INT32 CStatistics_GetDim(CStatistics*);
INT32 CStatistics_GetNClasses(CStatistics*);
INT32 CStatistics_GetOrder(CStatistics*);
INT32 CStatistics_GetNSamples(CStatistics*);
FLOAT64* CStatistics_GetPtr(CStatistics*, INT32 c, INT16 nData);
INT16 CStatistics_FreqEx(CStatistics*, CData* idDst, BOOL bProb);
INT16 CStatistics_CheckDat(CStatistics*);
INT16 CStatistics_CheckLtb(CStatistics*);
INT16 CStatistics_Check(CStatistics*);
INT16 CStatistics_Status(CStatistics*);

/* Taken from 'sta_cor.c' */
FLOAT64 CStatistics_Cov(CStatistics*, FLOAT64* lpMsum, FLOAT64* lpSum, INT32 N, FLOAT64 I, INT32 n, INT32 m);
INT16 CStatistics_CorrelationEx(CStatistics*, CData* idDst, INT16 nMode);

/* Taken from 'sta_mom.c' */
void CStatistics_Moment0(CStatistics*, FLOAT64* lpY, INT32 c, INT32 N, INT16 nMode);
void CStatistics_Moment1(CStatistics*, FLOAT64* lpY, INT32 c, INT32 N, INT16 nMode);
void CStatistics_Moment2(CStatistics*, FLOAT64* lpY, INT32 c, INT32 N, INT16 nMode);
void CStatistics_MomentK(CStatistics*, FLOAT64* lpY, INT32 c, INT32 k, INT32 N, INT32 K, INT16 nMode);
void CStatistics_Skewness(CStatistics*, FLOAT64* lpY, INT32 c, INT32 N, INT32 K);
void CStatistics_Excess(CStatistics*, FLOAT64* lpY, INT32 c, INT32 N, INT32 K);
INT16 CStatistics_MomentEx(CStatistics*, CData* idDst, INT16 k, INT16 nMode);

/* Taken from 'sta_reo.c' */
void CStatistics_PoolInt(CData* idPool, CData* idSrc, INT32 nMode);
INT16 CStatistics_Pool(CStatistics*, CStatistics* iSrc, CData* idMap);
INT16 CStatistics_Merge(CStatistics*, CStatistics* iSrc);

/* Taken from 'sta_upd.c' */
INT16 CStatistics_Setup(CStatistics*, INT32 nOrder, INT32 nDim, INT32 nCls, CData* idLtb, INT32 nIcLtb);
INT16 CStatistics_UpdateVector(CStatistics*, FLOAT64* lpX, INT32 c, FLOAT64 w);
INT16 CStatistics_Update(CStatistics*, CData* idVec, INT32 nIcLab, CData* idW);
/*}}CGEN_CEXPORT */

#endif /*#ifndef __STATISTICS_H */


/* EOF */
