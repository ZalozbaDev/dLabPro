/* dLabPro class CFst (fst)
 * - Header file
 *
 * AUTHOR : M. Wolff, M. Cuevas and M. Eichner
 * PACKAGE: dLabPro/classes
 *
 * This file was generated by dcg. DO NOT MODIFY! Modify fst.def instead.
 * 
 * Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
 * - Chair of System Theory and Speech Technology, TU Dresden
 * - Chair of Communications Engineering, BTU Cottbus
 * 
 * This file is part of dLabPro.
 * 
 * dLabPro is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 * 
 * dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with dLabPro. If not, see <http://www.gnu.org/licenses/>.
 */

/*{{CGEN_INCLUDE */
#include "dlp_config.h"
#include "dlp_object.h"
#include "dlp_data.h"
/*}}CGEN_END */

/*{{CGEN_ERRORS */
#undef FST_INTERNAL        
#undef FST_BADID           
#undef FST_BADID2          
#undef FST_BADCTYPE        
#undef FST_MISS            
#undef FST_BIGRAM          
#undef FST_EMPTY           
#undef FST_UNITEMPTY       
#undef FST_PATHTOOLONG     
#undef FST_PATHNOTUNIQUE   
#undef FST_PATHBROKEN      
#undef FST_BADTYPE         
#undef FST_INCOMPATIBLE    
#undef FST_SYMBOLNOTFOUND  
#undef FST_NOSDPW          
#undef FST_DELETE          
#undef FST_CHANGE          
#undef FST_UNWEIGHTED      
#undef FST_INVALID         
#undef FST_EPSINWORD       
#undef FST_INTERNALW       
#undef FST_SYMBOLCRASH     
#undef FST_NOSYMBOL        
#define FST_INTERNAL         -1001
#define FST_BADID            -1002
#define FST_BADID2           -1003
#define FST_BADCTYPE         -1004
#define FST_MISS             -1005
#define FST_BIGRAM           -1006
#define FST_EMPTY            -1007
#define FST_UNITEMPTY        -1008
#define FST_PATHTOOLONG      -1009
#define FST_PATHNOTUNIQUE    -1010
#define FST_PATHBROKEN       -1011
#define FST_BADTYPE          -1012
#define FST_INCOMPATIBLE     -1013
#define FST_SYMBOLNOTFOUND   -1014
#define FST_NOSDPW           -1015
#define FST_DELETE           -1016
#define FST_CHANGE           -1017
#define FST_UNWEIGHTED       -1018
#define FST_INVALID          -1019
#define FST_EPSINWORD        -1020
#define FST_INTERNALW        -1021
#define FST_SYMBOLCRASH      -1022
#define FST_NOSYMBOL         -1023
/*}}CGEN_END */

/* C/C++ language abstraction layer */
#undef fst_par
#define fst_par CFst

/* dLabPro/C++ language abstraction layer */
#undef fst
#define fst CFst

/*{{CGEN_DEFINE */
#define IC_UD_NAME  0
#define IC_UD_XS    1
#define IC_UD_XT    2
#define IC_UD_FS    3
#define IC_UD_FT    4
#define IC_UD_DATA  5
#define IC_SD_FLAG  0
#define IC_SD_DATA  1
#define IC_TD_TER   0
#define IC_TD_INI   1
#define IC_TD_DATA  2
#define NC_SD_RC    "~RC"
#define NC_SD_POT   "~POT"
#define NC_SD_RNK   "~RNK"
#define NC_TD_RC    "~RC"
#define NC_TD_PSR   "~PSR"
#define NC_TD_LSR   "~LSR"
#define NC_TD_TSR   "~TSR"
#define NC_TD_TIS   "~TIS"
#define NC_TD_TOS   "~TOS"
#define FST_ITYPE   INT32
#define FST_STYPE   INT32
#define FST_WTYPE   FLOAT64
#define FST_WTYPE_MAX  T_DOUBLE_MAX
#define DLP_TYPESTR(A) #A
#define DLP_TYPE(A)    dlp_get_type_code(DLP_TYPESTR(A))
#define FST_FWDCONN    0x0001
#define FST_BKWCONN    0x0002
#define FST_FWDTREE    0x0004
#define FST_BKWTREE    0x0008
#define FST_LOOPS      0x0010
#define FST_WEIGHTED   0x0100
#define FST_ACCEPTOR   0x0200
#define FST_TRANSDUCER 0x0600
#define FST_WSR_NONE   0
#define FST_WSR_PROB   1
#define FST_WSR_LOG    2
#define FST_WSR_TROP   3
#define FSTI_SORTINI   0x0001
#define FSTI_SORTTER   0x0002
#define FSTI_SLOPPY    0x0004
#define FSTI_PTR       0x0008
#define FSTI_CADD      0x0001
#define FSTI_CANY      0x0000
#define FST_SDP_KEEPA  10
#define FST_SDP_KEEPR  0.1
#define FST_SDP_DMZ    10
#define SD_FLG_FINAL   0x01
#define SD_FLG_USER1   0x10
#define SD_FLG_USER2   0x20
#define SD_FLG_USER3   0x40
#define SD_FLG_USER4   0x80
#define UD_XXU(A)   (FST_ITYPE)CData_GetNRecs(AS(CData,A->ud))
#define UD_XXS(A)   (FST_ITYPE)CData_GetNRecs(AS(CData,A->sd))
#define UD_XXT(A)   (FST_ITYPE)CData_GetNRecs(AS(CData,A->td))
#define UD_MXT(A)   (FST_ITYPE)CData_GetMaxRecs(AS(CData,A->td))
#define UD_NAME(A,B)(char*)CData_XAddr(AS(CData,A->ud),B,IC_UD_NAME)
#define UD_FS(A,B)  (*(FST_ITYPE*)(CData_XAddr(AS(CData,A->ud),B,IC_UD_FS  )))
#define UD_XS(A,B)  (*(FST_ITYPE*)(CData_XAddr(AS(CData,A->ud),B,IC_UD_XS  )))
#define UD_FT(A,B)  (*(FST_ITYPE*)(CData_XAddr(AS(CData,A->ud),B,IC_UD_FT  )))
#define UD_XT(A,B)  (*(FST_ITYPE*)(CData_XAddr(AS(CData,A->ud),B,IC_UD_XT  )))
#define SD_FLG(A,B) (*(BYTE*     )(CData_XAddr(AS(CData,A->sd),B,IC_SD_FLAG)))
#define TD_INI(A,B) (*(FST_ITYPE*)(CData_XAddr(AS(CData,A->td),B,IC_TD_INI )))
#define TD_TER(A,B) (*(FST_ITYPE*)(CData_XAddr(AS(CData,A->td),B,IC_TD_TER )))
#define IS_XXS(A)   (FST_ITYPE)CData_GetNComps(AS(CData,A->is))
#define OS_XXS(A)   (FST_ITYPE)CData_GetNComps(AS(CData,A->os))
/*}}CGEN_DEFINE */

#ifndef __FST_H
#define __FST_H

/*{{CGEN_HEADERCODE */

#ifdef __cplusplus
  #define FST_CTYPE class
#else
  #define FST_CTYPE struct
#endif

  FST_CTYPE CFst;
  typedef struct tag_FST_TID_PT_TYPE
  {
    struct tag_FST_TID_PT_TYPE *lpFN,*lpBN;
    BYTE *lpT;
  } FST_TID_PT_TYPE;

  typedef struct tag_FST_TID_TYPE
  {
    FST_CTYPE CFst* iFst;              /* Pointer to CFst instance to iterate                            */
    INT64           nOfTIni;           /* Offset of initial state from transition pointer                */
    INT64           nOfTTer;           /* Offset of terminal state from transition pointer               */
    INT64           nOfTTis;           /* Offset of transducer input symbol from transition pointer      */
    INT64           nOfTTos;           /* Offset of transducer output symbol from transition pointer     */
    INT64           nOfTW;             /* Offset of transition weight from transition pointer            */
    INT64           nOfTRc;            /* Offset of transition reference counter from transition pointer */
    INT64           nOfTData;          /* Offset of custom transition data from transition pointer       */
    INT32           nUnit;             /* Unit processed by iterator                                     */
    FST_ITYPE       nFS;               /* First state of unit                                            */
    FST_ITYPE       nXS;               /* Number of states of unit                                       */
    FST_ITYPE       nFT;               /* First transition of unit                                       */
    FST_ITYPE       nXT;               /* Number of transitions of unit                                  */
    INT32           nRls;              /* Record length of state table                                   */
    INT32           nRlt;              /* Record length of transition table                              */
    BYTE*           lpFT;              /* Pointer to first transition of unit                            */
    BYTE*           lpFTunsrtd;        /* Pointer to last sorted transition of unit                      */
    INT32           nMode;             /* Operation mode, combination of the FSTI_XXX constants          */
    INT32           nDepth;            /* Recursion depth                                                */
    BOOL            bPathsClipped;     /* Paths were clipped for exceeding iFst->m_nMaxLen               */
    FST_TID_PT_TYPE **lpPTFwd;
    FST_TID_PT_TYPE **lpPTBwd;
    FST_TID_PT_TYPE *lpPTMem;
  } FST_TID_TYPE;

  typedef struct tag_FST_SST_TYPE
  {
    CDlpTable*      iST;               /* Pointer to string (pointer) table                              */
    INT32           nGrany;            /* Granularity of table (re)allocations                           */
    FST_STYPE*      lpBuf;             /* Auxiliary buffer (e.g. for copying)                            */
  } FST_SST_TYPE;

  typedef struct tag_FST_SEQ_TYPE
  {
    BYTE*           lpItm;             /* Pointer to first item of sequence                              */
    INT32           nOfs;              /* Offset between items in sequence                               */
    INT32           nCnt;              /* Number of items in sequence                                    */
  } FST_SEQ_TYPE;

  typedef struct tag_FST_LB_TYPE
  {
    BYTE*           lpT;               /* Transition pointer                                             */
    FST_WTYPE       nD;                /* Distance from start state                                      */
  } FST_LB_TYPE;

  typedef struct tag_FST_BT_TYPE
  {
    FST_TID_TYPE*   lpTI;              /* Pointer to automaton iterator data struct                      */
    INT32           nGrany;            /* Allocation granularity                                         */
    INT32           nLen;              /* Length of tree (no. of transitions)                            */
    BYTE***         lpVec;             /* Transition vector buffer                                       */
  } FST_BT_TYPE;

  typedef struct tag_FST_WLR_TYPE FST_WLR_TYPE;

  struct tag_FST_WLR_TYPE
  {
  FST_WTYPE         nWeight;           /* Accumulated weight up to this point                            */
  FST_WLR_TYPE*     lpNext;            /* Pointer to next WordLinkRecord                                 */
  INT32             t;                 /* Current timeindex                                              */
  FST_STYPE         sTerminal;         /* Terminal Symbol                                                */
  FST_ITYPE         nTState;           /* Unit relative index the terminal state of the transition, where the WLR was created*/
  FST_ITYPE         nIState;           /* Unit relative index the initial state of the transition, where the WLR was created*/
  INT32             nPointers;         /* Number of entities pointing to this WLR (needed for memory management)*/
  };

  typedef struct tag_FST_TOK_TYPE
  {
    FST_WTYPE       nWeight;           /* Accumulated weight up to this point                            */
    FST_STYPE       sTerminal;         /* Terminal Symbol collected while passing                        */
    BOOL            bChanged;          /* Needed while passing over epsilon transitions                  */
    FST_WLR_TYPE*   lpWLR;             /* Pointer to word link record                                    */
  } FST_TOK_TYPE;

  typedef struct tag_FST_EXCR_TYPE     /* Data struct unsed in CFst_Excerpt                              */
  {
    FST_STYPE*      lpIs;              /* Input symbol sequence to match (may be NULL)                   */
    INT32           nXIs;              /* Length of input symbol sequence                                */
    BOOL            bBwd;              /* Backward mode                                                  */
    INT32           nMaxLen;           /* Maximum number of transitions to walk                          */
  } FST_EXCR_TYPE;

  /* Automaton walking callback function (CFst_STI_Walk) */
  typedef BOOL (FST_WALKFUNC_TYPE)(FST_TID_TYPE*,BYTE*,void*);

  /* Inline functions */
/*
  static inline BYTE* CFst_STI_GetTransPtr(FST_TID_TYPE* lpTI, INT32 nTrans)
  {
    if (nTrans< lpTI->nFT          ) return NULL;
    if (nTrans>=lpTI->nFT+lpTI->nXT) return NULL;
    return lpTI->lpFT + nTrans*lpTI->nRlt;
  }

  static inline FST_ITYPE CFst_STI_GetTransId(FST_TID_TYPE* lpTI, BYTE* lpTrans)
  {
    if (lpTrans<lpTI->lpFT || lpTrans>lpTI->lpFT+lpTI->nRlt*(lpTI->nXT-1))
      return -1;
    return lpTI->nFT + (FST_ITYPE)((lpTrans-lpTI->lpFT)/lpTI->nRlt);
  }

  static inline FST_ITYPE* CFst_STI_TIni(FST_TID_TYPE* lpTI, BYTE* lpTrans)
  {
    return (FST_ITYPE*)(lpTrans+lpTI->nOfTIni);
  }

  static inline FST_ITYPE* CFst_STI_TTer(FST_TID_TYPE* lpTI, BYTE* lpTrans)
  {
    return (FST_ITYPE*)(lpTrans+lpTI->nOfTTer);
  }

  static inline FST_STYPE* CFst_STI_TTis(FST_TID_TYPE* lpTI, BYTE* lpTrans)
  {
    DLPASSERT(lpTI->nOfTTis>0);
    return (FST_STYPE*)(lpTrans+lpTI->nOfTTis);
  }

  static inline FST_STYPE* CFst_STI_TTos(FST_TID_TYPE* lpTI, BYTE* lpTrans)
  {
    DLPASSERT(lpTI->nOfTTos>0);
    return (FST_STYPE*)(lpTrans+lpTI->nOfTTos);
  }

  static inline FST_ITYPE* CFst_STI_TRc(FST_TID_TYPE* lpTI, BYTE* lpTrans)
  {
    DLPASSERT(lpTI->nOfTRc>0);
    return (FST_ITYPE*)(lpTrans+lpTI->nOfTRc);
  }

  FST_WTYPE* CGEN_EXPORT CFst_STI_TW(FST_TID_TYPE* lpTI, BYTE* lpTrans)
  {
    DLPASSERT(lpTI->nOfTW>0);
    return (FST_WTYPE*)(lpTrans+lpTI->nOfTW);
  }
*/
/*}}CGEN_HEADERCODE */

/* Class CFst */

#ifdef __cplusplus

class CFst : public CDlpObject 
{

typedef CDlpObject inherited;
typedef CFst thisclass;

/*{{CGEN_FRIENDS */
/*}}CGEN_FRIENDS */
public:
	CFst(const char* lpInstanceName, BOOL bCallVirtual = 1);
	virtual ~CFst();

/* Virtual and static function overrides */
public:
	virtual INT16 AutoRegisterWords();
	virtual INT16 Init(BOOL bCallVirtual = 0);
	virtual INT16 Reset(BOOL bResetMembers = 1);
	virtual INT16 Serialize(CDN3Stream* lpDest);
	virtual INT16 SerializeXml(CXmlStream* lpDest);
	virtual INT16 Deserialize(CDN3Stream* lpSrc);
	virtual INT16 DeserializeXml(CXmlStream* lpSrc);
	virtual INT16 Copy(CDlpObject* iSrc);
	virtual INT16 ClassProc();
	static  INT16 InstallProc(void* lpItp);
	static  CFst* CreateInstance(const char* lpName);
	static  INT16 GetClassInfo(SWord* lpClassWord);
	virtual INT16 GetInstanceInfo(SWord* lpClassWord);
	virtual BOOL  IsKindOf(const char* lpClassName);
	virtual INT16 ResetAllOptions(BOOL bInit = 0);

/* Primary method invocation functions             */
/* DO NOT CALL THESE FUNCTIONS FROM C SCOPE.       */
/* THEY MAY INTERFERE WITH THE INTERPRETER SESSION */
#ifndef __NOITP
public:
/*{{CGEN_PMIC */
	INT16 OnAddseq();
	INT16 OnAddstatesIam();
	INT16 OnAddtransIam();
	INT16 OnAddunitIam();
	INT16 OnAnalyze();
	INT16 OnAnalyzeMultigram();
	INT16 OnBestN();
	INT16 OnCat();
	INT16 OnChain();
	INT16 OnClose();
	INT16 OnCompile();
	INT16 OnCompose();
	INT16 OnCopyUi();
	INT16 OnDebug();
	INT16 OnDelstate();
	INT16 OnDeltrans();
	INT16 OnDelunit();
	INT16 OnDeterminize();
	INT16 OnDiscount();
	INT16 OnEpsdist();
	INT16 OnEpsremove();
	INT16 OnExcerpt();
	INT16 OnFslist();
	INT16 OnFsunify();
	INT16 OnGetType();
	INT16 OnHmm();
	INT16 OnIntersect();
	INT16 OnInvert();
	INT16 OnLoops();
	INT16 OnMinimize();
	INT16 OnMultigram();
	INT16 OnOrder();
	INT16 OnPotential();
	INT16 OnPrint();
	INT16 OnProbs();
	INT16 OnProduct();
	INT16 OnProject();
	INT16 OnPushWeights();
	INT16 OnRank();
	INT16 OnRcs();
	INT16 OnRegexCompile();
	INT16 OnRegexMatch();
	INT16 OnReverse();
	INT16 OnRndwalk();
	INT16 OnSdp();
	INT16 OnStatus();
	INT16 OnStp();
	INT16 OnTree();
	INT16 OnTrim();
	INT16 OnTyperepair();
	INT16 OnUnion();
	INT16 OnUnweight();
	INT16 OnWire();
	INT16 OnCFst_WsrConvert_Iam();
	INT16 OnX1();
	INT16 OnX2();
/*}}CGEN_PMIC */
#endif /* #ifndef __NOITP */

/* Secondary method invocation functions */
public:
/*{{CGEN_SMIC */
	INT16 CFst_WsrConvert_Iam();
	INT16 X2(INT32 nUnit);
/*}}CGEN_SMIC */

/* Option changed callback functions */
public:
/*{{CGEN_OCCF */
/*}}CGEN_OCCF */

/* Field changed callback functions */
public:
/*{{CGEN_FCCF */
/*}}CGEN_FCCF */

/* Scanned member functions */
/*{{CGEN_EXPORT */

/* Taken from 'fst_aux.c' */
	public: void Check();
	public: INT32 GetType(INT32 nMask);
	public: INT32 Analyze(INT32 nUnit, INT32 nMask);
	public: INT16 Status();
	public: INT16 Print();
	public: void ResetStateFlag(INT32 nUnit, BYTE bMask);
	public: INT16 Typerepair();

/* Taken from 'fst_cps.c' */
	public: INT16 Compose(CFst* itSrc1, CFst* itSrc2, INT32 nUnit1, INT32 nUnit2);
	public: INT16 Intersect(CFst* itSrc1, CFst* itSrc2, INT32 nUnit1, INT32 nUnit2);
	public: INT16 Product(CFst* itSrc1, CFst* itSrc2, INT32 nUnit1, INT32 nUnit2);

/* Taken from 'fst_edt.c' */
	public: INT32 Addunit(const char* lpsName);
	public: INT16 AddunitIam(const char* lpsName);
	public: INT32 Addstates(INT32 nUnit, INT32 nCount, BOOL bFinal);
	public: INT16 AddstatesIam(INT32 nUnit, INT32 nCount);
	protected: FST_ITYPE AddstateCopy(INT32 nUnit, CFst* itSrc, FST_ITYPE nSsrc);
	public: INT32 Addtrans(INT32 nUnit, FST_ITYPE nIni, FST_ITYPE nTer);
	public: INT32 AddtransEx(INT32 nUnit, FST_ITYPE nIni, FST_ITYPE nTer, FST_STYPE nTis, FST_STYPE nTos, FST_WTYPE nW);
	public: INT16 AddtransIam(INT32 nUnit, INT32 nIni, INT32 nTer);
	public: INT32 AddtransCopy(INT32 nUnit, FST_ITYPE nIni, FST_ITYPE nTer, CFst* itSrc, FST_ITYPE nTsrc);
	public: INT16 Delunit(INT32 nUnit);
	public: INT16 Delstate(INT32 nUnit, INT32 nState);
	public: INT16 Deltrans(INT32 nUnit, INT32 nTrans);
	public: INT16 Reverse(INT32 nUnit);
	public: INT16 Trim(INT32 nUnit, FLOAT64 nWlim);
	public: INT16 Chain(INT32 nUnit);
	public: INT16 Loops(INT32 nUnit);
	public: INT16 Project();
	public: INT16 Invert(INT32 nUnit);
	public: INT16 Unweight();

/* Taken from 'fst_erm.c' */
	private: void Edist_Fwd(FST_TID_TYPE* lpTI, FST_ITYPE nS, FST_WTYPE nDist, FST_WTYPE* lpW, FST_ITYPE* lpTos);
	public: INT16 Epsdist(CFst* itSrc, INT32 nUnit);
	private: FST_ITYPE Erm_GetDestTerState(FST_TID_TYPE* lpTIsrc, FST_ITYPE nTerSrc);
	private: static BOOL Erm_EpsDistFromStart(FST_TID_TYPE* lpTIedt, FST_ITYPE nSsrc, FST_WTYPE* lpEpsWFZ);
	public: INT16 Epsremove(CFst* itSrc, INT32 nUnit);

/* Taken from 'fst_det.c' */
	private: void Det_LoadAuxTable_AddRec(CData* idAuxTab, FST_ITYPE nResStr, FST_WTYPE nResW, FST_ITYPE nTer, FST_STYPE nTis, FST_STYPE nTos, FST_WTYPE nW, BOOL bFinal);
	private: void Det_LoadAuxTable_Walk(FST_TID_TYPE* lpTI, FST_ITYPE nIniSrc, FST_ITYPE nResStr, FST_WTYPE nResW, CData* idAuxTab);
	private: BOOL Det_LoadAuxTable(CFst* itSrc, INT32 nUnit, FST_ITYPE nIniSrc, FST_ITYPE nResStr, FST_WTYPE nResW, CData* idAuxTab, FST_TID_TYPE* lpTI);
	private: void Det_PrintAuxTable(CData* idAuxTab);
	private: FST_ITYPE Det_AddState(BOOL bFinal);
	private: FST_ITYPE Det_AddPath(FST_ITYPE nIni, FST_STYPE nTis, FST_ITYPE nTosStr, FST_WTYPE nW);
	private: void Det_AddResidual(FST_ITYPE nSdst, FST_ITYPE nSsrc, FST_ITYPE nResStr, FST_WTYPE nResW);
	private: void Det_PrtResidual(FST_ITYPE nR);
	private: BOOL Det_CmpResiduals(FST_ITYPE nS1, FST_ITYPE nS2, FST_ITYPE** lpMap, INT32* nMapSi);
	protected: INT16 DeterminizeUnit(CFst* itSrc, INT32 nUnit);
	public: INT16 Determinize(CFst* itSrc, INT32 nUnit);
	protected: INT16 MinimizeUnit(CFst* itSrc, INT32 nUnit);
	protected: INT16 Lazymin();
	public: INT16 Minimize(CFst* itSrc, INT32 nUnit);

/* Taken from 'fst_hmm.c' */
	private: FST_ITYPE Hmm_FindAddState(FST_TID_TYPE* lpTIsrc, FST_ITYPE nSsrc, FST_STYPE nTisSrc);
	protected: INT16 HmmUnit(CFst* itSrc, INT32 nUnit);
	public: INT16 Hmm(CFst* itSrc, INT32 nUnit);

/* Taken from 'fst_ite.c' */
	public: static FST_TID_TYPE* STI_Init(CFst* iFst, INT32 nUnit, INT32 nMode);
	public: static void STI_UnitChanged(FST_TID_TYPE* lpTI, INT16 nMode);
	public: static void STI_Done(FST_TID_TYPE* lpTI);
	public: static BOOL STI_IsSorted(FST_TID_TYPE* lpTI, INT32 nMode, FST_ITYPE* lpFSunsrtd, FST_ITYPE* lpFTunsrtd);
	public: static void STI_Sort(FST_TID_TYPE* lpTI);
	public: static BYTE* STI_GetTransPtr(FST_TID_TYPE* lpTI, INT32 nTrans);
	public: static FST_ITYPE STI_GetTransId(FST_TID_TYPE* lpTI, BYTE* lpTrans);
	public: static FST_ITYPE* STI_TIni(FST_TID_TYPE* lpTI, BYTE* lpTrans);
	public: static FST_ITYPE* STI_TTer(FST_TID_TYPE* lpTI, BYTE* lpTrans);
	public: static FST_STYPE* STI_TTis(FST_TID_TYPE* lpTI, BYTE* lpTrans);
	public: static FST_STYPE* STI_TTos(FST_TID_TYPE* lpTI, BYTE* lpTrans);
	public: static FST_ITYPE* STI_TRc(FST_TID_TYPE* lpTI, BYTE* lpTrans);
	public: static FST_WTYPE* STI_TW(FST_TID_TYPE* lpTI, BYTE* lpTrans);
	public: static BYTE* STI_TfromS(FST_TID_TYPE* lpTI, FST_ITYPE nState, BYTE* lpTrans);
	public: static BYTE* STI_TtoS(FST_TID_TYPE* lpTI, INT32 nState, BYTE* lpTrans);
	public: static BOOL STI_Walk(FST_TID_TYPE* lpTI, FST_WALKFUNC_TYPE* lpWalkFunc, void* lpWalkFuncData, FST_ITYPE nState, BOOL bBwd);
	private: static BOOL STI_WalkInt(FST_TID_TYPE* lpTI, FST_WALKFUNC_TYPE* lpWalkFunc, void* lpWalkFuncData, FST_ITYPE nState, BOOL bBwd, INT32 nDepth);

/* Taken from 'fst_ixp.c' */
	public: INT16 CatEx(CFst* itSrc, INT32 nFirstUnit, INT32 nCount);
	public: INT16 Cat(CFst* itSrc);
	public: INT16 CopyUi(CFst* itSrc, CData* idIndex, INT32 nPar);

/* Taken from 'fst_nmg.c' */
	protected: INT32 Nmg_StoreSeq(INT32 nUnit, FST_ITYPE nSeqId, FST_SEQ_TYPE* lpSseq, FST_SEQ_TYPE* lpCseq, BOOL bSubSeq);
	public: INT16 Addseq(CData* idSrc, INT32 nIcTis, INT32 nIcTer, INT32 nIcRci, INT32 nUnit);
	private: INT32 Nmg_FetchSeq(FST_TID_TYPE* lpTI, FST_SEQ_TYPE Sseq, FST_ITYPE* lpTseq);
	private: void Nmg_GetMgiWeights(CData* idWeights, FST_WTYPE* lpW, INT16 nLen);
	private: FST_WTYPE Nmg_CalcCondProb(FST_TID_TYPE* lpTI, FST_SEQ_TYPE Sseq, const FST_WTYPE* lpW, INT16* lpActualOrder);
	private: FST_WTYPE Nmg_CalcSeqProb(FST_TID_TYPE* lpTI, FST_SEQ_TYPE Sseq, INT32 nOrder, CData* idWeights, FST_ITYPE* lpSid, INT16* lpActualOrder);
	public: INT16 Multigram(CData* idSeq, INT32 nComp, CData* idWeights, CFst* itDst, INT32 nUnit);
	public: INT16 AnalyzeMultigram(CData* idCtrs, INT32 nUnit);
	protected: INT16 Discount(INT32 nDiscount, INT32 nUnit);
	private: void Mc_Fwd(FST_TID_TYPE* lpTI, FST_ITYPE nS);
	private: void Mc_Bkw(FST_TID_TYPE* lpTI, FST_ITYPE nS);
	protected: INT16 MarkConnected(INT32 nUnit);
	protected: INT16 TrimStates(INT32 nU);

/* Taken from 'fst_ord.c' */
	protected: INT16 MakeTopoOrderMap(INT32 nUnit, CData* idMap);
	private: static void Rank_Rcsn(FST_TID_TYPE* lpTI, INT32 nRank, FST_ITYPE nS, CData* idDst);
	protected: INT16 Rank_Unit(INT32 nUnit, CData* idDst);
	public: INT16 Rank(INT32 nUnit, CData* idDst);
	public: INT16 Order(CFst* itSrc, CData* idMap, INT32 nComp, INT32 nUnit);

/* Taken from 'fst_pth.c' */
	public: INT16 Fslist(INT32 nUnit, CData* idDst);
	public: INT16 Fsunify(INT32 nUnit);
	private: INT16 TreeUnit_Walk(FST_TID_TYPE* lpTI, FST_ITYPE nSsrc, FST_ITYPE nSdst, INT32 nDepth);
	protected: INT16 TreeUnit(CFst* itSrc, INT32 nUnit);
	public: INT16 Tree(CFst* itSrc, INT32 nUnit);
	private: static BOOL ExcerptWalk(FST_TID_TYPE* lpTI, FST_EXCR_TYPE* lpED, FST_ITYPE nS, FST_ITYPE nIis, FST_ITYPE nDepth);
	public: INT16 Excerpt(CFst* itSrc, INT32 nUnit, CData* idStates, INT32 nIcStates, CData* idIs, INT32 nParam);
	public: INT16 Potential(INT32 nUnit);
	public: INT16 Rndwalk(CFst* itSrc, INT32 nUnit, INT32 nPaths, FLOAT64 nWInfluence);
	public: INT16 PushWeights(CFst* itSrc, INT32 nUnit);

/* Taken from 'fst_sdp.c' */
	public: static FST_BT_TYPE* Sdp_BtInit(FST_TID_TYPE* lpTI, INT32 nGrany);
	public: static void Sdp_BtDone(FST_BT_TYPE* lpBT);
	public: static void Sdp_BtStore(FST_BT_TYPE* lpBT, BYTE* lpT, BYTE* lpTprev, INT16 bEps);
	public: static BYTE* Sdp_BtFetch(FST_BT_TYPE* lpBT, INT32 nT);
	public: static void Sdp_BtPrint(FST_BT_TYPE* lpBT);
	private: void Sdp_GetSWeights(FST_WTYPE* lpSWa, INT32 t, INT32 nXW, FST_WTYPE** lpSW);
	private: void Sdp_ClearLB(FST_LB_TYPE* lpLB, INT32 nXS);
	private: INT32 Sdp_ExpandState(FST_TID_TYPE* lpTI, FST_WTYPE* lpSW, INT32 t, FST_ITYPE nS, FST_WTYPE nD, FST_LB_TYPE* lpLBwr, INT16 bFlags);
	private: INT32 Sdp_ExpandLayer(FST_TID_TYPE* lpTI, FST_WTYPE* lpSW, INT32 t, INT32 nTmax, FST_LB_TYPE** lpLBrd, FST_LB_TYPE** lpLBwr, FST_BT_TYPE* lpBT, INT16 bFlags);
	private: INT16 Sdp_Backtracking(FST_BT_TYPE* lpBT, INT32 nET, INT32 nEL, FST_ITYPE nES, FST_WTYPE nED, CData* idWeights);
	private: void Sdp_Order();
	private: void Sdp_Epsremove();
	public: INT16 SdpUnit(CFst* itSrc, INT32 nUnit, CData* idWeights);
	public: INT16 Sdp(CFst* itSrc, INT32 nUnit, CData* idWeights);

/* Taken from 'fst_stp.c' */
	public: INT16 Stp_checkArgs(CData* idWeights);
	private: static void Stp_printWLR(FST_WLR_TYPE* lpWLR);
	public: void Stp_destroyWLR(FST_WLR_TYPE** lpWLR);
	public: INT16 Stp_updateTable(FST_WLR_TYPE*** lpBestTable, FST_WLR_TYPE** lpWLR, INT32 t, INT32 nPaths);
	private: void Stp_freeBackTrackTable(FST_WLR_TYPE*** lpBestTable, INT32 nLength, INT32 nPaths);
	private: INT16 stp_backtrackTable(FST_WLR_TYPE*** lpBestTable, INT32 nLength, INT32 nPaths);
	private: INT16 Stp_propagateEntryTokens(INT32 t, INT32 nUnit, INT32 nPaths, FST_TID_TYPE* lpTI, FST_WTYPE* lpSW, FST_TOK_TYPE*** lpNewTokens, FST_WLR_TYPE*** lpBestTable, CFst* itSrc);
	private: INT16 Stp_updateWeights(CFst* itSrc, FST_TOK_TYPE*** lpNewTokens, FST_TOK_TYPE*** lpOldTokens, FST_WLR_TYPE*** lpBestTable, FST_TID_TYPE* lpTI, BYTE* lpTX, FST_WTYPE* lpSW, INT32 t, INT32 nPaths, INT32* nPassings, char bEps);
	private: INT32 Stp_passTokens(INT32 t, INT32 nUnit, INT32 nPaths, char bEps, FST_TID_TYPE* lpTI, FST_WTYPE* lpSW, FST_TOK_TYPE*** lpOldTokens, FST_TOK_TYPE*** lpNewTokens, FST_WLR_TYPE*** lpBestTable, CFst* itSrc);
	private: void Stp_initializeTokens(CFst* itSrc, INT32 nUnit, FST_TOK_TYPE*** lpTokens);
	private: void Stp_Done(CFst* itSrc, FST_TOK_TYPE*** lpOldTokens, FST_TOK_TYPE*** lpNewTokens, FST_WLR_TYPE*** lpBtTable, FST_TID_TYPE** lpTI, INT32 nPaths, INT32 nLength, INT32 nUnit);
	public: INT16 StpUnit(CFst* itSrc, INT32 nUnit, INT32 nPaths, CData* idWeights);
	public: INT16 Stp(CFst* itSrc, INT32 nUnit, INT32 nPaths, CData* idWeights);

/* Taken from 'fst_str.c' */
	private: static INT16 ClearUnitLookupTable(hash_t* lpLookupTable);
	public: INT16 Compile(CData* idSrc, INT32 nIcStr, INT32 nIcName, CData* idAlp);

/* Taken from 'fst_wir.c' */
	protected: INT16 Wire(CFst* lpsSrc, CData* lpdBigram);
	public: INT16 Union(CFst* itSrc);
	protected: INT16 CloseUnit(CFst* itSrc, INT32 nUnit);
	public: INT16 Close(CFst* itSrc, INT32 nUnit);

/* Taken from 'fst_xsr.c' */
	protected: static FST_SST_TYPE* Ssr_Init(INT32 nGrany);
	protected: static void Ssr_Done(FST_SST_TYPE* lpST);
	private: static FST_ITYPE Ssr_Find(FST_SST_TYPE* lpST, FST_ITYPE* lpBuf);
	protected: static FST_ITYPE Ssr_Store(FST_SST_TYPE* lpST, FST_ITYPE* lpBuf);
	protected: static void Ssr_Fetch(FST_SST_TYPE* lpST, FST_ITYPE nS, FST_ITYPE* lpBuf, INT32 nMaxLen);
	protected: static FST_STYPE Ssr_GetAt(FST_SST_TYPE* lpST, FST_ITYPE nS, FST_ITYPE nPos);
	protected: static INT32 Ssr_Len(FST_SST_TYPE* lpST, FST_ITYPE nS);
	protected: static FST_ITYPE Ssr_NeMult();
	protected: static FST_ITYPE Ssr_NeAdd();
	protected: static FST_ITYPE Ssr_Mult(FST_SST_TYPE* lpST, FST_ITYPE nS1, FST_ITYPE nS2);
	protected: static FST_ITYPE Ssr_Add(FST_SST_TYPE* lpST, FST_ITYPE nS1, FST_ITYPE nS2);
	protected: static FST_ITYPE Ssr_Dif(FST_SST_TYPE* lpST, FST_ITYPE nS1, FST_ITYPE nS2);
	protected: static void Ssr_Print(FST_SST_TYPE* lpST, FST_ITYPE nS);
	public: INT16 Wsr_GetType(INT32* lpnComp);
	public: static const char* Wsr_GetName(INT16 nWsrType);
	protected: FST_WTYPE Wsr_Op(FST_WTYPE nW1, FST_WTYPE nW2, INT16 nOpc);
	protected: static FST_WTYPE Wsr_NeAdd(INT16 nSrType);
	protected: static FST_WTYPE Wsr_NeMult(INT16 nSrType);
	public: INT16 Wsr_Convert(INT16 nSrType);
	public: INT16 Probs(INT32 nUnit);
	public: INT16 Rcs(INT32 nUnit, FLOAT64 nSeed);

/* Taken from 'fst_regex.c' */
	public: INT16 RegexCompile(const char* sRgx);
	public: INT16 RegexMatch_int(const char* sStr, INT32* nS, INT32* nL);
	public: INT16 RegexMatch(const char* sStr);

/* Taken from 'fst_bsn.c' */
	private: void Cps_HashPrint();
	private: void Cps_HashResolveKey(const void* lpKey, FST_ITYPE* lpSX, FST_ITYPE* lpSY, BYTE* lpFlagXY);
	private: void* Cps_HashMakeTmpKey(FST_ITYPE nSX, FST_ITYPE nSY, FST_ITYPE nFlagXY);
	private: static hash_val_t Cps_HashFn(const void* lpKey, void* lpContext);
	private: static int Cps_HashCmp(const void* lpKey1, const void* lpKey2, void* lpContext);
	private: void Cps_AddSdAux();
	private: void Cps_DelSdAux();
	private: void Cps_SetSdAux(FST_ITYPE nS, FST_ITYPE nSX, FST_ITYPE nSY, BYTE nFlagXY);
	private: FST_ITYPE Cps_FindState(FST_ITYPE nSX, FST_ITYPE nSY, BYTE nFlagXY);
	private: static int Bsn_CompUp(const void* lpElem1, const void* lpElem2);
	private: static int Bsn_CompDown(const void* lpElem1, const void* lpElem2);
	protected: INT16 BestNUnit(CFst* itSrc, INT32 nUnit, INT32 nPaths, INT32 nPathlength);
	public: INT16 BestN(CFst* itSrc, INT32 nUnit, INT32 nPaths, INT32 nPathlength);

/* Taken from 'fst_xxx.c' */
	public: INT16 X1(CFst* itSrc, INT32 nUnit);
	protected: INT16 BestNUnitLocal(CFst* itSrc, INT32 nUnit, INT32 nPaths);
	public: INT16 Debug(FLOAT64 nParam, const char* sOp);
/*}}CGEN_EXPORT */

/* Member variables */
public:
/*{{CGEN_ICXX_FIELDS */
	data*            m_idDetRt;
	data*            is;
	data*            os;
	data*            sd;
	data*            td;
	data*            ud;
/*}}CGEN_ICXX_FIELDS */

#else  /* #ifdef __cplusplus */

typedef struct CFst
{
  /* Pointer to C base instance */
  struct CDlpObject* m_lpBaseInstance;

/*{{CGEN_IC_FIELDS */
	CDlpObject*      m_idDetRt;
	CDlpObject*      is;
	CDlpObject*      os;
	CDlpObject*      sd;
	CDlpObject*      td;
	CDlpObject*      ud;
/*}}CGEN_IC_FIELDS */

#endif /* #ifdef __cplusplus */

/*{{CGEN_FIELDS */
	INT32            m_nClimit;
	void*            m_lpCpsHash;
	void**           m_lpCpsHnpool;
	INT32            m_nCpsHnpoolSize;
	FST_ITYPE        m_lpCpsKeybuf[3];
	FST_SST_TYPE*    m_lpDetSt;
	FLOAT64          m_nFtol;
	FST_ITYPE*       m_lpFts;
	INT32            m_nGrany;
	FLOAT64          m_nGw;
	INT32            m_nIcSdAux;
	INT32            m_nICSDDATA;
	INT32            m_nICSDFLAG;
	INT32            m_nIcTdAux;
	INT32            m_nICTDDATA;
	INT32            m_nICTDINI;
	INT32            m_nICTDTER;
	INT32            m_nIcTis;
	INT32            m_nIcTos;
	INT32            m_nICUDDATA;
	INT32            m_nICUDFS;
	INT32            m_nICUDFT;
	INT32            m_nICUDNAME;
	INT32            m_nICUDXS;
	INT32            m_nICUDXT;
	INT32            m_nIcW;
	FLOAT64          m_nMapexp;
	INT32            m_nMaxLen;
	char             m_lpsNCSDPOT[5];
	char             m_lpsNCSDRC[5];
	char             m_lpsNCSDRNK[5];
	char             m_lpsNCTDLSR[5];
	char             m_lpsNCTDPSR[5];
	char             m_lpsNCTDRC[5];
	char             m_lpsNCTDTIS[5];
	char             m_lpsNCTDTOS[5];
	char             m_lpsNCTDTSR[5];
	FST_ITYPE*       m_lpNmgT;
	FST_WTYPE*       m_lpNmgW;
	INT32            m_nPrintstop;
	FLOAT64          m_nPrnConst;
	FLOAT64          m_nRcfloor;
	INT32            m_nSymbols;
	FLOAT64          m_nWceil;
	INT32            m_nWLRs;
	INT16            m_nWsr;
	INT32            m_nXFts;
/*}}CGEN_FIELDS */

/*{{CGEN_OPTIONS */
	BOOL m_bBackward;
	BOOL m_bClimit;
	BOOL m_bDifferentIs;
	BOOL m_bDifferentOs;
	BOOL m_bEpsremove;
	BOOL m_bFinal;
	BOOL m_bForward;
	BOOL m_bFsa;
	BOOL m_bFst;
	BOOL m_bFwd;
	BOOL m_bGreedy;
	BOOL m_bImplicit;
	BOOL m_bIndex;
	BOOL m_bLazy;
	BOOL m_bLocal;
	BOOL m_bLsr;
	BOOL m_bMarkx;
	BOOL m_bMarky;
	BOOL m_bMultigram;
	BOOL m_bNoeps;
	BOOL m_bNoint;
	BOOL m_bNoloops;
	BOOL m_bPrune;
	BOOL m_bPsr;
	BOOL m_bPush;
	BOOL m_bSegment;
	BOOL m_bTrans;
	BOOL m_bTsr;
	BOOL m_bUsemap;
/*}}CGEN_OPTIONS */
}

#ifndef __cplusplus
CFst
#endif
;

/* Class CFst (C functions)*/

/* Virtual function overrides */
void  CFst_Constructor(CFst*, const char* lpInstanceName, BOOL bCallVirtual);
void  CFst_Destructor(CDlpObject*);
INT16 CFst_AutoRegisterWords(CDlpObject*);
INT16 CFst_Reset(CDlpObject*, BOOL bResetMembers);
INT16 CFst_Init(CDlpObject*, BOOL bCallVirtual);
INT16 CFst_Serialize(CDlpObject*, CDN3Stream* lpDest);
INT16 CFst_SerializeXml(CDlpObject*, CXmlStream* lpDest);
INT16 CFst_Deserialize(CDlpObject*, CDN3Stream* lpSrc);
INT16 CFst_DeserializeXml(CDlpObject*, CXmlStream* lpSrc);
INT16 CFst_Copy(CDlpObject*, CDlpObject* __iSrc);
INT16 CFst_ClassProc(CDlpObject*);
INT16 CFst_InstallProc(void* lpItp);
CFst* CFst_CreateInstance(const char* lpName);
INT16 CFst_GetClassInfo(SWord* lpClassWord);
INT16 CFst_GetInstanceInfo(CDlpObject*, SWord* lpClassWord);
BOOL  CFst_IsKindOf(CDlpObject*, const char* lpClassName);
INT16 CFst_ResetAllOptions(CDlpObject*, BOOL bInit);

/* Primary method invocation functions             */
/* DO NOT CALL THESE FUNCTIONS FROM C SCOPE.       */
/* THEY MAY INTERFERE WITH THE INTERPRETER SESSION */
#ifndef __NOITP
/*{{CGEN_CPMIC */
INT16 CFst_OnAddseq(CDlpObject*);
INT16 CFst_OnAddstatesIam(CDlpObject*);
INT16 CFst_OnAddtransIam(CDlpObject*);
INT16 CFst_OnAddunitIam(CDlpObject*);
INT16 CFst_OnAnalyze(CDlpObject*);
INT16 CFst_OnAnalyzeMultigram(CDlpObject*);
INT16 CFst_OnBestN(CDlpObject*);
INT16 CFst_OnCat(CDlpObject*);
INT16 CFst_OnChain(CDlpObject*);
INT16 CFst_OnClose(CDlpObject*);
INT16 CFst_OnCompile(CDlpObject*);
INT16 CFst_OnCompose(CDlpObject*);
INT16 CFst_OnCopyUi(CDlpObject*);
INT16 CFst_OnDebug(CDlpObject*);
INT16 CFst_OnDelstate(CDlpObject*);
INT16 CFst_OnDeltrans(CDlpObject*);
INT16 CFst_OnDelunit(CDlpObject*);
INT16 CFst_OnDeterminize(CDlpObject*);
INT16 CFst_OnDiscount(CDlpObject*);
INT16 CFst_OnEpsdist(CDlpObject*);
INT16 CFst_OnEpsremove(CDlpObject*);
INT16 CFst_OnExcerpt(CDlpObject*);
INT16 CFst_OnFslist(CDlpObject*);
INT16 CFst_OnFsunify(CDlpObject*);
INT16 CFst_OnGetType(CDlpObject*);
INT16 CFst_OnHmm(CDlpObject*);
INT16 CFst_OnIntersect(CDlpObject*);
INT16 CFst_OnInvert(CDlpObject*);
INT16 CFst_OnLoops(CDlpObject*);
INT16 CFst_OnMinimize(CDlpObject*);
INT16 CFst_OnMultigram(CDlpObject*);
INT16 CFst_OnOrder(CDlpObject*);
INT16 CFst_OnPotential(CDlpObject*);
INT16 CFst_OnPrint(CDlpObject*);
INT16 CFst_OnProbs(CDlpObject*);
INT16 CFst_OnProduct(CDlpObject*);
INT16 CFst_OnProject(CDlpObject*);
INT16 CFst_OnPushWeights(CDlpObject*);
INT16 CFst_OnRank(CDlpObject*);
INT16 CFst_OnRcs(CDlpObject*);
INT16 CFst_OnRegexCompile(CDlpObject*);
INT16 CFst_OnRegexMatch(CDlpObject*);
INT16 CFst_OnReverse(CDlpObject*);
INT16 CFst_OnRndwalk(CDlpObject*);
INT16 CFst_OnSdp(CDlpObject*);
INT16 CFst_OnStatus(CDlpObject*);
INT16 CFst_OnStp(CDlpObject*);
INT16 CFst_OnTree(CDlpObject*);
INT16 CFst_OnTrim(CDlpObject*);
INT16 CFst_OnTyperepair(CDlpObject*);
INT16 CFst_OnUnion(CDlpObject*);
INT16 CFst_OnUnweight(CDlpObject*);
INT16 CFst_OnWire(CDlpObject*);
INT16 CFst_OnCFst_WsrConvert_Iam(CDlpObject*);
INT16 CFst_OnX1(CDlpObject*);
INT16 CFst_OnX2(CDlpObject*);
/*}}CGEN_CPMIC */
#endif /* #ifndef __NOITP */

/* Secondary method invocation functions */
/*{{CGEN_CSMIC */
INT16 CFst_CFst_WsrConvert_Iam(CFst*);
INT16 CFst_X2(CFst*, INT32 nUnit);
/*}}CGEN_CSMIC */

/* Option changed callback functions */
/*{{CGEN_COCCF */
/*}}CGEN_COCCF */

/* Field changed callback functions */
/*{{CGEN_CFCCF */
/*}}CGEN_CFCCF */

/* Scanned C (member) functions */
/*{{CGEN_CEXPORT */

/* Taken from 'fst_aux.c' */
void CFst_Check(CFst*);
INT32 CFst_GetType(CFst*, INT32 nMask);
INT32 CFst_Analyze(CFst*, INT32 nUnit, INT32 nMask);
INT16 CFst_Status(CFst*);
INT16 CFst_Print(CFst*);
void CFst_ResetStateFlag(CFst*, INT32 nUnit, BYTE bMask);
INT16 CFst_Typerepair(CFst*);

/* Taken from 'fst_cps.c' */
INT16 CFst_Compose(CFst*, CFst* itSrc1, CFst* itSrc2, INT32 nUnit1, INT32 nUnit2);
INT16 CFst_Intersect(CFst*, CFst* itSrc1, CFst* itSrc2, INT32 nUnit1, INT32 nUnit2);
INT16 CFst_Product(CFst*, CFst* itSrc1, CFst* itSrc2, INT32 nUnit1, INT32 nUnit2);

/* Taken from 'fst_edt.c' */
INT32 CFst_Addunit(CFst*, const char* lpsName);
INT16 CFst_AddunitIam(CFst*, const char* lpsName);
INT32 CFst_Addstates(CFst*, INT32 nUnit, INT32 nCount, BOOL bFinal);
INT16 CFst_AddstatesIam(CFst*, INT32 nUnit, INT32 nCount);
FST_ITYPE CFst_AddstateCopy(CFst*, INT32 nUnit, CFst* itSrc, FST_ITYPE nSsrc);
INT32 CFst_Addtrans(CFst*, INT32 nUnit, FST_ITYPE nIni, FST_ITYPE nTer);
INT32 CFst_AddtransEx(CFst*, INT32 nUnit, FST_ITYPE nIni, FST_ITYPE nTer, FST_STYPE nTis, FST_STYPE nTos, FST_WTYPE nW);
INT16 CFst_AddtransIam(CFst*, INT32 nUnit, INT32 nIni, INT32 nTer);
INT32 CFst_AddtransCopy(CFst*, INT32 nUnit, FST_ITYPE nIni, FST_ITYPE nTer, CFst* itSrc, FST_ITYPE nTsrc);
INT16 CFst_Delunit(CFst*, INT32 nUnit);
INT16 CFst_Delstate(CFst*, INT32 nUnit, INT32 nState);
INT16 CFst_Deltrans(CFst*, INT32 nUnit, INT32 nTrans);
INT16 CFst_Reverse(CFst*, INT32 nUnit);
INT16 CFst_Trim(CFst*, INT32 nUnit, FLOAT64 nWlim);
INT16 CFst_Chain(CFst*, INT32 nUnit);
INT16 CFst_Loops(CFst*, INT32 nUnit);
INT16 CFst_Project(CFst*);
INT16 CFst_Invert(CFst*, INT32 nUnit);
INT16 CFst_Unweight(CFst*);

/* Taken from 'fst_erm.c' */
void CFst_Edist_Fwd(CFst*, FST_TID_TYPE* lpTI, FST_ITYPE nS, FST_WTYPE nDist, FST_WTYPE* lpW, FST_ITYPE* lpTos);
INT16 CFst_Epsdist(CFst*, CFst* itSrc, INT32 nUnit);
FST_ITYPE CFst_Erm_GetDestTerState(CFst*, FST_TID_TYPE* lpTIsrc, FST_ITYPE nTerSrc);
BOOL CFst_Erm_EpsDistFromStart(FST_TID_TYPE* lpTIedt, FST_ITYPE nSsrc, FST_WTYPE* lpEpsWFZ);
INT16 CFst_Epsremove(CFst*, CFst* itSrc, INT32 nUnit);

/* Taken from 'fst_det.c' */
void CFst_Det_LoadAuxTable_AddRec(CFst*, CData* idAuxTab, FST_ITYPE nResStr, FST_WTYPE nResW, FST_ITYPE nTer, FST_STYPE nTis, FST_STYPE nTos, FST_WTYPE nW, BOOL bFinal);
void CFst_Det_LoadAuxTable_Walk(CFst*, FST_TID_TYPE* lpTI, FST_ITYPE nIniSrc, FST_ITYPE nResStr, FST_WTYPE nResW, CData* idAuxTab);
BOOL CFst_Det_LoadAuxTable(CFst*, CFst* itSrc, INT32 nUnit, FST_ITYPE nIniSrc, FST_ITYPE nResStr, FST_WTYPE nResW, CData* idAuxTab, FST_TID_TYPE* lpTI);
void CFst_Det_PrintAuxTable(CFst*, CData* idAuxTab);
FST_ITYPE CFst_Det_AddState(CFst*, BOOL bFinal);
FST_ITYPE CFst_Det_AddPath(CFst*, FST_ITYPE nIni, FST_STYPE nTis, FST_ITYPE nTosStr, FST_WTYPE nW);
void CFst_Det_AddResidual(CFst*, FST_ITYPE nSdst, FST_ITYPE nSsrc, FST_ITYPE nResStr, FST_WTYPE nResW);
void CFst_Det_PrtResidual(CFst*, FST_ITYPE nR);
BOOL CFst_Det_CmpResiduals(CFst*, FST_ITYPE nS1, FST_ITYPE nS2, FST_ITYPE** lpMap, INT32* nMapSi);
INT16 CFst_DeterminizeUnit(CFst*, CFst* itSrc, INT32 nUnit);
INT16 CFst_Determinize(CFst*, CFst* itSrc, INT32 nUnit);
INT16 CFst_MinimizeUnit(CFst*, CFst* itSrc, INT32 nUnit);
INT16 CFst_Lazymin(CFst*);
INT16 CFst_Minimize(CFst*, CFst* itSrc, INT32 nUnit);

/* Taken from 'fst_hmm.c' */
FST_ITYPE CFst_Hmm_FindAddState(CFst*, FST_TID_TYPE* lpTIsrc, FST_ITYPE nSsrc, FST_STYPE nTisSrc);
INT16 CFst_HmmUnit(CFst*, CFst* itSrc, INT32 nUnit);
INT16 CFst_Hmm(CFst*, CFst* itSrc, INT32 nUnit);

/* Taken from 'fst_ite.c' */
FST_TID_TYPE* CFst_STI_Init(CFst* iFst, INT32 nUnit, INT32 nMode);
void CFst_STI_UnitChanged(FST_TID_TYPE* lpTI, INT16 nMode);
void CFst_STI_Done(FST_TID_TYPE* lpTI);
BOOL CFst_STI_IsSorted(FST_TID_TYPE* lpTI, INT32 nMode, FST_ITYPE* lpFSunsrtd, FST_ITYPE* lpFTunsrtd);
void CFst_STI_Sort(FST_TID_TYPE* lpTI);
BYTE* CFst_STI_GetTransPtr(FST_TID_TYPE* lpTI, INT32 nTrans);
FST_ITYPE CFst_STI_GetTransId(FST_TID_TYPE* lpTI, BYTE* lpTrans);
FST_ITYPE* CFst_STI_TIni(FST_TID_TYPE* lpTI, BYTE* lpTrans);
FST_ITYPE* CFst_STI_TTer(FST_TID_TYPE* lpTI, BYTE* lpTrans);
FST_STYPE* CFst_STI_TTis(FST_TID_TYPE* lpTI, BYTE* lpTrans);
FST_STYPE* CFst_STI_TTos(FST_TID_TYPE* lpTI, BYTE* lpTrans);
FST_ITYPE* CFst_STI_TRc(FST_TID_TYPE* lpTI, BYTE* lpTrans);
FST_WTYPE* CFst_STI_TW(FST_TID_TYPE* lpTI, BYTE* lpTrans);
BYTE* CFst_STI_TfromS(FST_TID_TYPE* lpTI, FST_ITYPE nState, BYTE* lpTrans);
BYTE* CFst_STI_TtoS(FST_TID_TYPE* lpTI, INT32 nState, BYTE* lpTrans);
BOOL CFst_STI_Walk(FST_TID_TYPE* lpTI, FST_WALKFUNC_TYPE* lpWalkFunc, void* lpWalkFuncData, FST_ITYPE nState, BOOL bBwd);
BOOL CFst_STI_WalkInt(FST_TID_TYPE* lpTI, FST_WALKFUNC_TYPE* lpWalkFunc, void* lpWalkFuncData, FST_ITYPE nState, BOOL bBwd, INT32 nDepth);

/* Taken from 'fst_ixp.c' */
INT16 CFst_CatEx(CFst*, CFst* itSrc, INT32 nFirstUnit, INT32 nCount);
INT16 CFst_Cat(CFst*, CFst* itSrc);
INT16 CFst_CopyUi(CFst*, CFst* itSrc, CData* idIndex, INT32 nPar);

/* Taken from 'fst_nmg.c' */
INT32 CFst_Nmg_StoreSeq(CFst*, INT32 nUnit, FST_ITYPE nSeqId, FST_SEQ_TYPE* lpSseq, FST_SEQ_TYPE* lpCseq, BOOL bSubSeq);
INT16 CFst_Addseq(CFst*, CData* idSrc, INT32 nIcTis, INT32 nIcTer, INT32 nIcRci, INT32 nUnit);
INT32 CFst_Nmg_FetchSeq(CFst*, FST_TID_TYPE* lpTI, FST_SEQ_TYPE Sseq, FST_ITYPE* lpTseq);
void CFst_Nmg_GetMgiWeights(CFst*, CData* idWeights, FST_WTYPE* lpW, INT16 nLen);
FST_WTYPE CFst_Nmg_CalcCondProb(CFst*, FST_TID_TYPE* lpTI, FST_SEQ_TYPE Sseq, const FST_WTYPE* lpW, INT16* lpActualOrder);
FST_WTYPE CFst_Nmg_CalcSeqProb(CFst*, FST_TID_TYPE* lpTI, FST_SEQ_TYPE Sseq, INT32 nOrder, CData* idWeights, FST_ITYPE* lpSid, INT16* lpActualOrder);
INT16 CFst_Multigram(CFst*, CData* idSeq, INT32 nComp, CData* idWeights, CFst* itDst, INT32 nUnit);
INT16 CFst_AnalyzeMultigram(CFst*, CData* idCtrs, INT32 nUnit);
INT16 CFst_Discount(CFst*, INT32 nDiscount, INT32 nUnit);
void CFst_Mc_Fwd(CFst*, FST_TID_TYPE* lpTI, FST_ITYPE nS);
void CFst_Mc_Bkw(CFst*, FST_TID_TYPE* lpTI, FST_ITYPE nS);
INT16 CFst_MarkConnected(CFst*, INT32 nUnit);
INT16 CFst_TrimStates(CFst*, INT32 nU);

/* Taken from 'fst_ord.c' */
INT16 CFst_MakeTopoOrderMap(CFst*, INT32 nUnit, CData* idMap);
void CFst_Rank_Rcsn(FST_TID_TYPE* lpTI, INT32 nRank, FST_ITYPE nS, CData* idDst);
INT16 CFst_Rank_Unit(CFst*, INT32 nUnit, CData* idDst);
INT16 CFst_Rank(CFst*, INT32 nUnit, CData* idDst);
INT16 CFst_Order(CFst*, CFst* itSrc, CData* idMap, INT32 nComp, INT32 nUnit);

/* Taken from 'fst_pth.c' */
INT16 CFst_Fslist(CFst*, INT32 nUnit, CData* idDst);
INT16 CFst_Fsunify(CFst*, INT32 nUnit);
INT16 CFst_TreeUnit_Walk(CFst*, FST_TID_TYPE* lpTI, FST_ITYPE nSsrc, FST_ITYPE nSdst, INT32 nDepth);
INT16 CFst_TreeUnit(CFst*, CFst* itSrc, INT32 nUnit);
INT16 CFst_Tree(CFst*, CFst* itSrc, INT32 nUnit);
BOOL CFst_ExcerptWalk(FST_TID_TYPE* lpTI, FST_EXCR_TYPE* lpED, FST_ITYPE nS, FST_ITYPE nIis, FST_ITYPE nDepth);
INT16 CFst_Excerpt(CFst*, CFst* itSrc, INT32 nUnit, CData* idStates, INT32 nIcStates, CData* idIs, INT32 nParam);
INT16 CFst_Potential(CFst*, INT32 nUnit);
INT16 CFst_Rndwalk(CFst*, CFst* itSrc, INT32 nUnit, INT32 nPaths, FLOAT64 nWInfluence);
INT16 CFst_PushWeights(CFst*, CFst* itSrc, INT32 nUnit);

/* Taken from 'fst_sdp.c' */
FST_BT_TYPE* CFst_Sdp_BtInit(FST_TID_TYPE* lpTI, INT32 nGrany);
void CFst_Sdp_BtDone(FST_BT_TYPE* lpBT);
void CFst_Sdp_BtStore(FST_BT_TYPE* lpBT, BYTE* lpT, BYTE* lpTprev, INT16 bEps);
BYTE* CFst_Sdp_BtFetch(FST_BT_TYPE* lpBT, INT32 nT);
void CFst_Sdp_BtPrint(FST_BT_TYPE* lpBT);
void CFst_Sdp_GetSWeights(CFst*, FST_WTYPE* lpSWa, INT32 t, INT32 nXW, FST_WTYPE** lpSW);
void CFst_Sdp_ClearLB(CFst*, FST_LB_TYPE* lpLB, INT32 nXS);
INT32 CFst_Sdp_ExpandState(CFst*, FST_TID_TYPE* lpTI, FST_WTYPE* lpSW, INT32 t, FST_ITYPE nS, FST_WTYPE nD, FST_LB_TYPE* lpLBwr, INT16 bFlags);
INT32 CFst_Sdp_ExpandLayer(CFst*, FST_TID_TYPE* lpTI, FST_WTYPE* lpSW, INT32 t, INT32 nTmax, FST_LB_TYPE** lpLBrd, FST_LB_TYPE** lpLBwr, FST_BT_TYPE* lpBT, INT16 bFlags);
INT16 CFst_Sdp_Backtracking(CFst*, FST_BT_TYPE* lpBT, INT32 nET, INT32 nEL, FST_ITYPE nES, FST_WTYPE nED, CData* idWeights);
void CFst_Sdp_Order(CFst*);
void CFst_Sdp_Epsremove(CFst*);
INT16 CFst_SdpUnit(CFst*, CFst* itSrc, INT32 nUnit, CData* idWeights);
INT16 CFst_Sdp(CFst*, CFst* itSrc, INT32 nUnit, CData* idWeights);

/* Taken from 'fst_stp.c' */
INT16 CFst_Stp_checkArgs(CFst*, CData* idWeights);
void CFst_Stp_printWLR(FST_WLR_TYPE* lpWLR);
void CFst_Stp_destroyWLR(CFst*, FST_WLR_TYPE** lpWLR);
INT16 CFst_Stp_updateTable(CFst*, FST_WLR_TYPE*** lpBestTable, FST_WLR_TYPE** lpWLR, INT32 t, INT32 nPaths);
void CFst_Stp_freeBackTrackTable(CFst*, FST_WLR_TYPE*** lpBestTable, INT32 nLength, INT32 nPaths);
INT16 CFst_stp_backtrackTable(CFst*, FST_WLR_TYPE*** lpBestTable, INT32 nLength, INT32 nPaths);
INT16 CFst_Stp_propagateEntryTokens(CFst*, INT32 t, INT32 nUnit, INT32 nPaths, FST_TID_TYPE* lpTI, FST_WTYPE* lpSW, FST_TOK_TYPE*** lpNewTokens, FST_WLR_TYPE*** lpBestTable, CFst* itSrc);
INT16 CFst_Stp_updateWeights(CFst*, CFst* itSrc, FST_TOK_TYPE*** lpNewTokens, FST_TOK_TYPE*** lpOldTokens, FST_WLR_TYPE*** lpBestTable, FST_TID_TYPE* lpTI, BYTE* lpTX, FST_WTYPE* lpSW, INT32 t, INT32 nPaths, INT32* nPassings, char bEps);
INT32 CFst_Stp_passTokens(CFst*, INT32 t, INT32 nUnit, INT32 nPaths, char bEps, FST_TID_TYPE* lpTI, FST_WTYPE* lpSW, FST_TOK_TYPE*** lpOldTokens, FST_TOK_TYPE*** lpNewTokens, FST_WLR_TYPE*** lpBestTable, CFst* itSrc);
void CFst_Stp_initializeTokens(CFst*, CFst* itSrc, INT32 nUnit, FST_TOK_TYPE*** lpTokens);
void CFst_Stp_Done(CFst*, CFst* itSrc, FST_TOK_TYPE*** lpOldTokens, FST_TOK_TYPE*** lpNewTokens, FST_WLR_TYPE*** lpBtTable, FST_TID_TYPE** lpTI, INT32 nPaths, INT32 nLength, INT32 nUnit);
INT16 CFst_StpUnit(CFst*, CFst* itSrc, INT32 nUnit, INT32 nPaths, CData* idWeights);
INT16 CFst_Stp(CFst*, CFst* itSrc, INT32 nUnit, INT32 nPaths, CData* idWeights);

/* Taken from 'fst_str.c' */
INT16 CFst_ClearUnitLookupTable(hash_t* lpLookupTable);
INT16 CFst_Compile(CFst*, CData* idSrc, INT32 nIcStr, INT32 nIcName, CData* idAlp);

/* Taken from 'fst_wir.c' */
INT16 CFst_Wire(CFst*, CFst* lpsSrc, CData* lpdBigram);
INT16 CFst_Union(CFst*, CFst* itSrc);
INT16 CFst_CloseUnit(CFst*, CFst* itSrc, INT32 nUnit);
INT16 CFst_Close(CFst*, CFst* itSrc, INT32 nUnit);

/* Taken from 'fst_xsr.c' */
FST_SST_TYPE* CFst_Ssr_Init(INT32 nGrany);
void CFst_Ssr_Done(FST_SST_TYPE* lpST);
FST_ITYPE CFst_Ssr_Find(FST_SST_TYPE* lpST, FST_ITYPE* lpBuf);
FST_ITYPE CFst_Ssr_Store(FST_SST_TYPE* lpST, FST_ITYPE* lpBuf);
void CFst_Ssr_Fetch(FST_SST_TYPE* lpST, FST_ITYPE nS, FST_ITYPE* lpBuf, INT32 nMaxLen);
FST_STYPE CFst_Ssr_GetAt(FST_SST_TYPE* lpST, FST_ITYPE nS, FST_ITYPE nPos);
INT32 CFst_Ssr_Len(FST_SST_TYPE* lpST, FST_ITYPE nS);
FST_ITYPE CFst_Ssr_NeMult();
FST_ITYPE CFst_Ssr_NeAdd();
FST_ITYPE CFst_Ssr_Mult(FST_SST_TYPE* lpST, FST_ITYPE nS1, FST_ITYPE nS2);
FST_ITYPE CFst_Ssr_Add(FST_SST_TYPE* lpST, FST_ITYPE nS1, FST_ITYPE nS2);
FST_ITYPE CFst_Ssr_Dif(FST_SST_TYPE* lpST, FST_ITYPE nS1, FST_ITYPE nS2);
void CFst_Ssr_Print(FST_SST_TYPE* lpST, FST_ITYPE nS);
INT16 CFst_Wsr_GetType(CFst*, INT32* lpnComp);
const char* CFst_Wsr_GetName(INT16 nWsrType);
FST_WTYPE CFst_Wsr_Op(CFst*, FST_WTYPE nW1, FST_WTYPE nW2, INT16 nOpc);
FST_WTYPE CFst_Wsr_NeAdd(INT16 nSrType);
FST_WTYPE CFst_Wsr_NeMult(INT16 nSrType);
INT16 CFst_Wsr_Convert(CFst*, INT16 nSrType);
INT16 CFst_Probs(CFst*, INT32 nUnit);
INT16 CFst_Rcs(CFst*, INT32 nUnit, FLOAT64 nSeed);

/* Taken from 'fst_regex.c' */
INT16 CFst_RegexCompile(CFst*, const char* sRgx);
INT16 CFst_RegexMatch_int(CFst*, const char* sStr, INT32* nS, INT32* nL);
INT16 CFst_RegexMatch(CFst*, const char* sStr);

/* Taken from 'fst_bsn.c' */
void CFst_Cps_HashPrint(CFst*);
void CFst_Cps_HashResolveKey(CFst*, const void* lpKey, FST_ITYPE* lpSX, FST_ITYPE* lpSY, BYTE* lpFlagXY);
void* CFst_Cps_HashMakeTmpKey(CFst*, FST_ITYPE nSX, FST_ITYPE nSY, FST_ITYPE nFlagXY);
hash_val_t CFst_Cps_HashFn(const void* lpKey, void* lpContext);
int CFst_Cps_HashCmp(const void* lpKey1, const void* lpKey2, void* lpContext);
void CFst_Cps_AddSdAux(CFst*);
void CFst_Cps_DelSdAux(CFst*);
void CFst_Cps_SetSdAux(CFst*, FST_ITYPE nS, FST_ITYPE nSX, FST_ITYPE nSY, BYTE nFlagXY);
FST_ITYPE CFst_Cps_FindState(CFst*, FST_ITYPE nSX, FST_ITYPE nSY, BYTE nFlagXY);
int CFst_Bsn_CompUp(const void* lpElem1, const void* lpElem2);
int CFst_Bsn_CompDown(const void* lpElem1, const void* lpElem2);
INT16 CFst_BestNUnit(CFst*, CFst* itSrc, INT32 nUnit, INT32 nPaths, INT32 nPathlength);
INT16 CFst_BestN(CFst*, CFst* itSrc, INT32 nUnit, INT32 nPaths, INT32 nPathlength);

/* Taken from 'fst_xxx.c' */
INT16 CFst_X1(CFst*, CFst* itSrc, INT32 nUnit);
INT16 CFst_BestNUnitLocal(CFst*, CFst* itSrc, INT32 nUnit, INT32 nPaths);
INT16 CFst_Debug(CFst*, FLOAT64 nParam, const char* sOp);
/*}}CGEN_CEXPORT */

#endif /*#ifndef __FST_H */


/* EOF */
