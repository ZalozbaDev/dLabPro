/* dLabPro class CFsttools (fsttools)
 * - Header file
 *
 * AUTHOR : frank.duckhorn
 * PACKAGE: dLabPro/classes
 *
 * This file was generated by dcg. DO NOT MODIFY! Modify fsttools.def instead.
 * 
 * Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
 * - Chair of System Theory and Speech Technology, TU Dresden
 * - Chair of Communications Engineering, BTU Cottbus
 * 
 * This file is part of dLabPro.
 * 
 * dLabPro is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 * 
 * dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with dLabPro. If not, see <http://www.gnu.org/licenses/>.
 */

/*{{CGEN_INCLUDE */
#include "dlp_config.h"
#include "dlp_object.h"
#include "dlp_obsolete.h"
#include "dlp_data.h"
#include "dlp_fst.h"
/*}}CGEN_END */

/*{{CGEN_ERRORS */
#undef FSTTOOLS_NOMEM      
#undef FSTTOOLS_ARGUMENT   
#undef FSTTOOLS_NULL       
#undef FSTTOOLS_EMPTY      
#undef FSTTOOLS_MISSCOMP   
#undef FSTTOOLS_COMPTYPE   
#undef FSTTOOLS_STAT       
#undef FSTTOOLS_MAPPING_FAILED
#define FSTTOOLS_NOMEM       -1001
#define FSTTOOLS_ARGUMENT    -1002
#define FSTTOOLS_NULL        -1003
#define FSTTOOLS_EMPTY       -1004
#define FSTTOOLS_MISSCOMP    -1005
#define FSTTOOLS_COMPTYPE    -1006
#define FSTTOOLS_STAT        -1007
#define FSTTOOLS_MAPPING_FAILED -1008
/*}}CGEN_END */

/* C/C++ language abstraction layer */
#undef fsttools_par
#define fsttools_par CFsttools

/* dLabPro/C++ language abstraction layer */
#undef fsttools
#define fsttools CFsttools

/*{{CGEN_DEFINE */
/*}}CGEN_DEFINE */

#ifndef __FSTTOOLS_H
#define __FSTTOOLS_H

/*{{CGEN_HEADERCODE */
/*}}CGEN_HEADERCODE */

/* Class CFsttools */

#ifdef __cplusplus

class CFsttools : public CDlpObject 
{

typedef CDlpObject inherited;
typedef CFsttools thisclass;

/*{{CGEN_FRIENDS */
/*}}CGEN_FRIENDS */
public:
	CFsttools(const char* lpInstanceName, BOOL bCallVirtual = 1);
	virtual ~CFsttools();

/* Virtual and static function overrides */
public:
	virtual INT16 AutoRegisterWords();
	virtual INT16 Init(BOOL bCallVirtual = 0);
	virtual INT16 Reset(BOOL bResetMembers = 1);
	virtual INT16 Serialize(CDN3Stream* lpDest);
	virtual INT16 SerializeXml(CXmlStream* lpDest);
	virtual INT16 Deserialize(CDN3Stream* lpSrc);
	virtual INT16 DeserializeXml(CXmlStream* lpSrc);
	virtual INT16 Copy(CDlpObject* iSrc);
	virtual INT16 ClassProc();
	static  INT16 InstallProc(void* lpItp);
	static  CFsttools* CreateInstance(const char* lpName);
	static  INT16 GetClassInfo(SWord* lpClassWord);
	virtual INT16 GetInstanceInfo(SWord* lpClassWord);
	virtual BOOL  IsKindOf(const char* lpClassName);
	virtual INT16 ResetAllOptions(BOOL bInit = 0);

/* Primary method invocation functions             */
/* DO NOT CALL THESE FUNCTIONS FROM C SCOPE.       */
/* THEY MAY INTERFERE WITH THE INTERPRETER SESSION */
#ifndef __NOITP
public:
/*{{CGEN_PMIC */
	INT16 OnComputePath();
	INT16 OnGetlogprob();
	INT16 OnLmAddInputTrans();
	INT16 OnLmClusterClasses();
	INT16 OnNmg2lm();
	INT16 OnOneTisPerPath();
	INT16 OnRcByUsedPath();
	INT16 OnRemoveExLoops();
	INT16 OnRemoveMl2();
	INT16 OnRestoreLoops();
	INT16 OnSmooth();
	INT16 OnSumCompId();
/*}}CGEN_PMIC */
#endif /* #ifndef __NOITP */

/* Secondary method invocation functions */
public:
/*{{CGEN_SMIC */
/*}}CGEN_SMIC */

/* Option changed callback functions */
public:
/*{{CGEN_OCCF */
/*}}CGEN_OCCF */

/* Field changed callback functions */
public:
/*{{CGEN_FCCF */
/*}}CGEN_FCCF */

/* Scanned member functions */
/*{{CGEN_EXPORT */

/* Taken from 'fstt_topo.c' */
	public: INT16 RemoveExLoops(INT32 nUnit, CFst * itFst);
	public: INT16 OneTisPerPath(INT32 nUnit, CFst* itFst);
	public: INT16 RestoreLoops(CFst* itSrc, INT32 nUnit, CFst* itDst);
	public: INT16 ComputePath(CData* idTrans, INT32 nIt, CData* idPath, CFst* itFst);
	public: INT16 RcByUsedPath(CData* idTransRC, FLOAT64 nPathWeight, INT32 nUnit, BOOL bReset, CData* idUnitTransCount, CFst* itFst);

/* Taken from 'fstt_misc.c' */
	public: INT16 SumCompId(CData* Src, INT32 Cid, INT32 DstRecs, CData* Dst);
	public: INT16 LmClusterClasses(CFst* itLM, INT32 nNClass, INT32 nNLoops, CData* idClassMap);

/* Taken from 'fstt_smooth.c' */
	public: INT16 Smooth(INT16 nKGt, FLOAT64 nDelta, INT32 nUnit, CFst* itFst);
	public: FLOAT64 Getlogprob(INT16 nSeqLen, CData* idSeq, INT32 nUnit, CFst* itFst);

/* Taken from 'fstt_nmg.c' */
	public: INT16 Nmg2lm(CFst* itSrc, INT32 nUnit, INT32 nNGram, CFst* itDst);
	public: INT16 LmAddInputTrans(CFst* itLM, INT32 nUnit);
	public: INT16 RemoveMl2(CFst* itR);
/*}}CGEN_EXPORT */

/* Member variables */
public:
/*{{CGEN_ICXX_FIELDS */
/*}}CGEN_ICXX_FIELDS */

#else  /* #ifdef __cplusplus */

typedef struct CFsttools
{
  /* Pointer to C base instance */
  struct CDlpObject* m_lpBaseInstance;

/*{{CGEN_IC_FIELDS */
/*}}CGEN_IC_FIELDS */

#endif /* #ifdef __cplusplus */

/*{{CGEN_FIELDS */
/*}}CGEN_FIELDS */

/*{{CGEN_OPTIONS */
	BOOL m_bAdd;
	BOOL m_bGt;
	BOOL m_bWb;
/*}}CGEN_OPTIONS */
}

#ifndef __cplusplus
CFsttools
#endif
;

/* Class CFsttools (C functions)*/

/* Virtual function overrides */
void  CFsttools_Constructor(CFsttools*, const char* lpInstanceName, BOOL bCallVirtual);
void  CFsttools_Destructor(CDlpObject*);
INT16 CFsttools_AutoRegisterWords(CDlpObject*);
INT16 CFsttools_Reset(CDlpObject*, BOOL bResetMembers);
INT16 CFsttools_Init(CDlpObject*, BOOL bCallVirtual);
INT16 CFsttools_Serialize(CDlpObject*, CDN3Stream* lpDest);
INT16 CFsttools_SerializeXml(CDlpObject*, CXmlStream* lpDest);
INT16 CFsttools_Deserialize(CDlpObject*, CDN3Stream* lpSrc);
INT16 CFsttools_DeserializeXml(CDlpObject*, CXmlStream* lpSrc);
INT16 CFsttools_Copy(CDlpObject*, CDlpObject* __iSrc);
INT16 CFsttools_ClassProc(CDlpObject*);
INT16 CFsttools_InstallProc(void* lpItp);
CFsttools* CFsttools_CreateInstance(const char* lpName);
INT16 CFsttools_GetClassInfo(SWord* lpClassWord);
INT16 CFsttools_GetInstanceInfo(CDlpObject*, SWord* lpClassWord);
BOOL  CFsttools_IsKindOf(CDlpObject*, const char* lpClassName);
INT16 CFsttools_ResetAllOptions(CDlpObject*, BOOL bInit);

/* Primary method invocation functions             */
/* DO NOT CALL THESE FUNCTIONS FROM C SCOPE.       */
/* THEY MAY INTERFERE WITH THE INTERPRETER SESSION */
#ifndef __NOITP
/*{{CGEN_CPMIC */
INT16 CFsttools_OnComputePath(CDlpObject*);
INT16 CFsttools_OnGetlogprob(CDlpObject*);
INT16 CFsttools_OnLmAddInputTrans(CDlpObject*);
INT16 CFsttools_OnLmClusterClasses(CDlpObject*);
INT16 CFsttools_OnNmg2lm(CDlpObject*);
INT16 CFsttools_OnOneTisPerPath(CDlpObject*);
INT16 CFsttools_OnRcByUsedPath(CDlpObject*);
INT16 CFsttools_OnRemoveExLoops(CDlpObject*);
INT16 CFsttools_OnRemoveMl2(CDlpObject*);
INT16 CFsttools_OnRestoreLoops(CDlpObject*);
INT16 CFsttools_OnSmooth(CDlpObject*);
INT16 CFsttools_OnSumCompId(CDlpObject*);
/*}}CGEN_CPMIC */
#endif /* #ifndef __NOITP */

/* Secondary method invocation functions */
/*{{CGEN_CSMIC */
/*}}CGEN_CSMIC */

/* Option changed callback functions */
/*{{CGEN_COCCF */
/*}}CGEN_COCCF */

/* Field changed callback functions */
/*{{CGEN_CFCCF */
/*}}CGEN_CFCCF */

/* Scanned C (member) functions */
/*{{CGEN_CEXPORT */

/* Taken from 'fstt_topo.c' */
INT16 CFsttools_RemoveExLoops(CFsttools*, INT32 nUnit, CFst * itFst);
INT16 CFsttools_OneTisPerPath(CFsttools*, INT32 nUnit, CFst* itFst);
INT16 CFsttools_RestoreLoops(CFsttools*, CFst* itSrc, INT32 nUnit, CFst* itDst);
INT16 CFsttools_ComputePath(CFsttools*, CData* idTrans, INT32 nIt, CData* idPath, CFst* itFst);
INT16 CFsttools_RcByUsedPath(CFsttools*, CData* idTransRC, FLOAT64 nPathWeight, INT32 nUnit, BOOL bReset, CData* idUnitTransCount, CFst* itFst);

/* Taken from 'fstt_misc.c' */
INT16 CFsttools_SumCompId(CFsttools*, CData* Src, INT32 Cid, INT32 DstRecs, CData* Dst);
INT16 CFsttools_LmClusterClasses(CFsttools*, CFst* itLM, INT32 nNClass, INT32 nNLoops, CData* idClassMap);

/* Taken from 'fstt_smooth.c' */
INT16 CFsttools_Smooth(CFsttools*, INT16 nKGt, FLOAT64 nDelta, INT32 nUnit, CFst* itFst);
FLOAT64 CFsttools_Getlogprob(CFsttools*, INT16 nSeqLen, CData* idSeq, INT32 nUnit, CFst* itFst);

/* Taken from 'fstt_nmg.c' */
INT16 CFsttools_Nmg2lm(CFsttools*, CFst* itSrc, INT32 nUnit, INT32 nNGram, CFst* itDst);
INT16 CFsttools_LmAddInputTrans(CFsttools*, CFst* itLM, INT32 nUnit);
INT16 CFsttools_RemoveMl2(CFsttools*, CFst* itR);
/*}}CGEN_CEXPORT */

#endif /*#ifndef __FSTTOOLS_H */


/* EOF */
