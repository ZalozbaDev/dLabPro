/* dLabPro class CSvm (svm)
 * - Header file
 *
 * AUTHOR : Robert Schubert
 * PACKAGE: dLabPro/classes
 *
 * This file was generated by dcg. DO NOT MODIFY! Modify svm.def instead.
 * 
 * Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
 * - Chair of System Theory and Speech Technology, TU Dresden
 * - Chair of Communications Engineering, BTU Cottbus
 * 
 * This file is part of dLabPro.
 * 
 * dLabPro is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 * 
 * dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with dLabPro. If not, see <http://www.gnu.org/licenses/>.
 */

/*{{CGEN_INCLUDE */
#include "dlp_config.h"
#include "dlp_object.h"
#include "dlp_data.h"
#include "dlp_base.h"
/*}}CGEN_END */

/*{{CGEN_ERRORS */
#undef SVM_NOTALLOWED      
#undef SVM_LABELS          
#undef SVM_INCONSISTENT    
#undef SVM_PARAMETERS      
#undef SVM_CONVERT         
#undef SVM_NOMODEL         
#undef SVM_NOTIMPL         
#undef SVM_LABNOTFOUND     
#undef SVM_INTERNAL        
#define SVM_NOTALLOWED       -1001
#define SVM_LABELS           -1002
#define SVM_INCONSISTENT     -1003
#define SVM_PARAMETERS       -1004
#define SVM_CONVERT          -1005
#define SVM_NOMODEL          -1006
#define SVM_NOTIMPL          -1007
#define SVM_LABNOTFOUND      -1008
#define SVM_INTERNAL         -1009
/*}}CGEN_END */

/* C/C++ language abstraction layer */
#undef svm_par
#define svm_par CSvm

/* dLabPro/C++ language abstraction layer */
#undef svm
#define svm CSvm

/*{{CGEN_DEFINE */
#define __NEW_LIBSVM_INTERFACE
#define SVM_CACHESIZE          50
#define SVM_KT_LINEAR           0
#define SVM_KT_POLY             1
#define SVM_KT_RBF              2
#define SVM_KT_SIGMOID          3
/*}}CGEN_DEFINE */

#ifndef __SVM_H
#define __SVM_H

/*{{CGEN_HEADERCODE */
/*}}CGEN_HEADERCODE */

/* Class CSvm */

#ifdef __cplusplus

class CSvm : public CDlpObject 
{

typedef CDlpObject inherited;
typedef CSvm thisclass;

/*{{CGEN_FRIENDS */
/*}}CGEN_FRIENDS */
public:
	CSvm(const char* lpInstanceName, BOOL bCallVirtual = 1);
	virtual ~CSvm();

/* Virtual and static function overrides */
public:
	virtual INT16 AutoRegisterWords();
	virtual INT16 Init(BOOL bCallVirtual = 0);
	virtual INT16 Reset(BOOL bResetMembers = 1);
	virtual INT16 Serialize(CDN3Stream* lpDest);
	virtual INT16 SerializeXml(CXmlStream* lpDest);
	virtual INT16 Deserialize(CDN3Stream* lpSrc);
	virtual INT16 DeserializeXml(CXmlStream* lpSrc);
	virtual INT16 Copy(CDlpObject* iSrc);
	virtual INT16 ClassProc();
	static  INT16 InstallProc(void* lpItp);
	static  CSvm* CreateInstance(const char* lpName);
	static  INT16 GetClassInfo(SWord* lpClassWord);
	virtual INT16 GetInstanceInfo(SWord* lpClassWord);
	virtual BOOL  IsKindOf(const char* lpClassName);
	virtual INT16 ResetAllOptions(BOOL bInit = 0);

/* Primary method invocation functions             */
/* DO NOT CALL THESE FUNCTIONS FROM C SCOPE.       */
/* THEY MAY INTERFERE WITH THE INTERPRETER SESSION */
#ifndef __NOITP
public:
/*{{CGEN_PMIC */
	INT16 OnClassify();
	INT16 OnCrossvalidate();
	INT16 OnIsTrained();
	INT16 OnStatus();
	INT16 OnTrain();
/*}}CGEN_PMIC */
#endif /* #ifndef __NOITP */

/* Secondary method invocation functions */
public:
/*{{CGEN_SMIC */
/*}}CGEN_SMIC */

/* Option changed callback functions */
public:
/*{{CGEN_OCCF */
	INT16 On2normSet();
	INT16 OnHardMarginSet();
/*}}CGEN_OCCF */

/* Field changed callback functions */
public:
/*{{CGEN_FCCF */
	INT16 OnModelAlphasChanged();
	INT16 OnModelSVsChanged();
	INT16 OnParamCChanged();
	INT16 OnParamCWeightsChanged();
	INT16 OnParamEpsilonChanged();
	INT16 OnParamKnlTypeChanged();
	INT16 OnParamThresholdChanged();
/*}}CGEN_FCCF */

/* Scanned member functions */
/*{{CGEN_EXPORT */

/* Taken from 'svm_data.c' */
	private: void toParameters(struct svm_parameter* param);
	private: bool toProblemSet(CData* idTset, struct svm_problem* lpPrblm);
	private: bool fromModel(struct svm_model* newmodel);
	private: bool toModel(struct svm_model* model);

/* Taken from 'svm_meth.c' */
	public: FLOAT64 Crossvalidate(INT16 n_fold, data* trainset);
	public: INT16 Train(data* trainset);
	protected: INT16 TrainIncremental(CData* trainset);
	public: BOOL IsTrained();
	public: INT16 Classify(data* testset, data* results);
	public: INT16 Status();
/*}}CGEN_EXPORT */

/* Member variables */
public:
/*{{CGEN_ICXX_FIELDS */
	data*            m_idModelAlphas;
	data*            m_idModelB;
	data*            m_idModelClasses;
	data*            m_idModelProbA;
	data*            m_idModelProbB;
	data*            m_idModelSVs;
	data*            m_idParamCWeights;
	data*            m_idStatErrs;
	data*            m_idStatRates;
/*}}CGEN_ICXX_FIELDS */

#else  /* #ifdef __cplusplus */

typedef struct CSvm
{
  /* Pointer to C base instance */
  struct CDlpObject* m_lpBaseInstance;

/*{{CGEN_IC_FIELDS */
	CDlpObject*      m_idModelAlphas;
	CDlpObject*      m_idModelB;
	CDlpObject*      m_idModelClasses;
	CDlpObject*      m_idModelProbA;
	CDlpObject*      m_idModelProbB;
	CDlpObject*      m_idModelSVs;
	CDlpObject*      m_idParamCWeights;
	CDlpObject*      m_idStatErrs;
	CDlpObject*      m_idStatRates;
/*}}CGEN_IC_FIELDS */

#endif /* #ifdef __cplusplus */

/*{{CGEN_FIELDS */
	UINT64           m_nModelNrfeatures;
	UINT64           m_nModelNrsamples;
	FLOAT64          m_nParamC;
	FLOAT64          m_nParamEpsilon;
	INT16            m_nParamKnlDegree;
	FLOAT64          m_nParamKnlGradient;
	FLOAT64          m_nParamKnlOffset;
	INT16            m_nParamKnlType;
	FLOAT64          m_nParamThreshold;
/*}}CGEN_FIELDS */

/*{{CGEN_OPTIONS */
	BOOL m_b2norm;
	BOOL m_bHardMargin;
	BOOL m_bIncremental;
	BOOL m_bNewstats;
	BOOL m_bNoShrinking;
	BOOL m_bProbabilities;
/*}}CGEN_OPTIONS */
}

#ifndef __cplusplus
CSvm
#endif
;

/* Class CSvm (C functions)*/

/* Virtual function overrides */
void  CSvm_Constructor(CSvm*, const char* lpInstanceName, BOOL bCallVirtual);
void  CSvm_Destructor(CDlpObject*);
INT16 CSvm_AutoRegisterWords(CDlpObject*);
INT16 CSvm_Reset(CDlpObject*, BOOL bResetMembers);
INT16 CSvm_Init(CDlpObject*, BOOL bCallVirtual);
INT16 CSvm_Serialize(CDlpObject*, CDN3Stream* lpDest);
INT16 CSvm_SerializeXml(CDlpObject*, CXmlStream* lpDest);
INT16 CSvm_Deserialize(CDlpObject*, CDN3Stream* lpSrc);
INT16 CSvm_DeserializeXml(CDlpObject*, CXmlStream* lpSrc);
INT16 CSvm_Copy(CDlpObject*, CDlpObject* __iSrc);
INT16 CSvm_ClassProc(CDlpObject*);
INT16 CSvm_InstallProc(void* lpItp);
CSvm* CSvm_CreateInstance(const char* lpName);
INT16 CSvm_GetClassInfo(SWord* lpClassWord);
INT16 CSvm_GetInstanceInfo(CDlpObject*, SWord* lpClassWord);
BOOL  CSvm_IsKindOf(CDlpObject*, const char* lpClassName);
INT16 CSvm_ResetAllOptions(CDlpObject*, BOOL bInit);

/* Primary method invocation functions             */
/* DO NOT CALL THESE FUNCTIONS FROM C SCOPE.       */
/* THEY MAY INTERFERE WITH THE INTERPRETER SESSION */
#ifndef __NOITP
/*{{CGEN_CPMIC */
INT16 CSvm_OnClassify(CDlpObject*);
INT16 CSvm_OnCrossvalidate(CDlpObject*);
INT16 CSvm_OnIsTrained(CDlpObject*);
INT16 CSvm_OnStatus(CDlpObject*);
INT16 CSvm_OnTrain(CDlpObject*);
/*}}CGEN_CPMIC */
#endif /* #ifndef __NOITP */

/* Secondary method invocation functions */
/*{{CGEN_CSMIC */
/*}}CGEN_CSMIC */

/* Option changed callback functions */
/*{{CGEN_COCCF */
INT16 CSvm_On2normSet(CDlpObject*);
INT16 CSvm_OnHardMarginSet(CDlpObject*);
/*}}CGEN_COCCF */

/* Field changed callback functions */
/*{{CGEN_CFCCF */
INT16 CSvm_OnModelAlphasChanged(CDlpObject*);
INT16 CSvm_OnModelSVsChanged(CDlpObject*);
INT16 CSvm_OnParamCChanged(CDlpObject*);
INT16 CSvm_OnParamCWeightsChanged(CDlpObject*);
INT16 CSvm_OnParamEpsilonChanged(CDlpObject*);
INT16 CSvm_OnParamKnlTypeChanged(CDlpObject*);
INT16 CSvm_OnParamThresholdChanged(CDlpObject*);
/*}}CGEN_CFCCF */

/* Scanned C (member) functions */
/*{{CGEN_CEXPORT */

/* Taken from 'svm_data.c' */
void PrintParams(struct svm_parameter* param);
void CSvm_toParameters(CSvm*, struct svm_parameter* param);
bool CSvm_toProblemSet(CSvm*, CData* idTset, struct svm_problem* lpPrblm);
bool CSvm_fromModel(CSvm*, struct svm_model* newmodel);
bool CSvm_toModel(CSvm*, struct svm_model* model);

/* Taken from 'svm_meth.c' */
FLOAT64 CSvm_Crossvalidate(CSvm*, INT16 n_fold, data* trainset);
INT16 CSvm_Train(CSvm*, data* trainset);
INT16 CSvm_TrainIncremental(CSvm*, CData* trainset);
BOOL CSvm_IsTrained(CSvm*);
INT16 CSvm_Classify(CSvm*, data* testset, data* results);
INT16 CSvm_Status(CSvm*);
/*}}CGEN_CEXPORT */

#endif /*#ifndef __SVM_H */


/* EOF */
