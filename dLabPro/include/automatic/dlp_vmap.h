/* dLabPro class CVmap (vmap)
 * - Header file
 *
 * AUTHOR : Christian-M. Westendorf, Matthias Wolff
 * PACKAGE: dLabPro/classes
 *
 * This file was generated by dcg. DO NOT MODIFY! Modify vmap.def instead.
 * 
 * Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
 * - Chair of System Theory and Speech Technology, TU Dresden
 * - Chair of Communications Engineering, BTU Cottbus
 * 
 * This file is part of dLabPro.
 * 
 * dLabPro is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 * 
 * dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with dLabPro. If not, see <http://www.gnu.org/licenses/>.
 */

/*{{CGEN_INCLUDE */
#include "dlp_config.h"
#include "dlp_object.h"
#include "dlp_matrix.h"
/*}}CGEN_END */

/*{{CGEN_ERRORS */
#undef VMP_OPCODE          
#undef VMP_NOTSETUP        
#define VMP_OPCODE           -1001
#define VMP_NOTSETUP         -1002
/*}}CGEN_END */

/* C/C++ language abstraction layer */
#undef vmap_par
#define vmap_par CVmap

/* dLabPro/C++ language abstraction layer */
#undef vmap
#define vmap CVmap

/*{{CGEN_DEFINE */
/*}}CGEN_DEFINE */

#ifndef __VMAP_H
#define __VMAP_H

/*{{CGEN_HEADERCODE */
/*}}CGEN_HEADERCODE */

/* Class CVmap */

#ifdef __cplusplus

class CVmap : public CDlpObject 
{

typedef CDlpObject inherited;
typedef CVmap thisclass;

/*{{CGEN_FRIENDS */
/*}}CGEN_FRIENDS */
public:
	CVmap(const char* lpInstanceName, BOOL bCallVirtual = 1);
	virtual ~CVmap();

/* Virtual and static function overrides */
public:
	virtual INT16 AutoRegisterWords();
	virtual INT16 Init(BOOL bCallVirtual = 0);
	virtual INT16 Reset(BOOL bResetMembers = 1);
	virtual INT16 Serialize(CDN3Stream* lpDest);
	virtual INT16 SerializeXml(CXmlStream* lpDest);
	virtual INT16 Deserialize(CDN3Stream* lpSrc);
	virtual INT16 DeserializeXml(CXmlStream* lpSrc);
	virtual INT16 Copy(CDlpObject* iSrc);
	virtual INT16 ClassProc();
	static  INT16 InstallProc(void* lpItp);
	static  CVmap* CreateInstance(const char* lpName);
	static  INT16 GetClassInfo(SWord* lpClassWord);
	virtual INT16 GetInstanceInfo(SWord* lpClassWord);
	virtual BOOL  IsKindOf(const char* lpClassName);
	virtual INT16 ResetAllOptions(BOOL bInit = 0);

/* Primary method invocation functions             */
/* DO NOT CALL THESE FUNCTIONS FROM C SCOPE.       */
/* THEY MAY INTERFERE WITH THE INTERPRETER SESSION */
#ifndef __NOITP
public:
/*{{CGEN_PMIC */
	INT16 OnMap();
	INT16 OnSetup();
	INT16 OnSetupI();
	INT16 OnStatus();
/*}}CGEN_PMIC */
#endif /* #ifndef __NOITP */

/* Secondary method invocation functions */
public:
/*{{CGEN_SMIC */
/*}}CGEN_SMIC */

/* Option changed callback functions */
public:
/*{{CGEN_OCCF */
/*}}CGEN_OCCF */

/* Field changed callback functions */
public:
/*{{CGEN_FCCF */
/*}}CGEN_FCCF */

/* Scanned member functions */
/*{{CGEN_EXPORT */

/* Taken from 'vmap_impl.c' */
	public: INT32 GetInDim();
	public: INT32 GetOutDim();
	public: INT16 Setup(CData* idTmx, const char* sAop, const char* sWop, FLOAT64 nZero);
	public: INT16 SetupI(CData* idImap, CData* idWtab, const char* sAop, const char* sWop, FLOAT64 nZero, FLOAT64 nOne);
	public: INT16 Status();
	public: INT16 Map(CData* idSrc, CData* idDst);
	public: void MapVector(BYTE* lpX, BYTE* lpY, INT32 nXdim, INT32 nYdim, INT16 nFtype);
/*}}CGEN_EXPORT */

/* Member variables */
public:
/*{{CGEN_ICXX_FIELDS */
	data*            m_idTmx;
	data*            m_idWeakTmx;
/*}}CGEN_ICXX_FIELDS */

#else  /* #ifdef __cplusplus */

typedef struct CVmap
{
  /* Pointer to C base instance */
  struct CDlpObject* m_lpBaseInstance;

/*{{CGEN_IC_FIELDS */
	CDlpObject*      m_idTmx;
	CDlpObject*      m_idWeakTmx;
/*}}CGEN_IC_FIELDS */

#endif /* #ifdef __cplusplus */

/*{{CGEN_FIELDS */
	INT16            m_nAop;
	INT16            m_nType;
	FLOAT64          m_nWeakThrsh;
	INT16            m_nWop;
	FLOAT64          m_nZero;
/*}}CGEN_FIELDS */

/*{{CGEN_OPTIONS */
	BOOL m_bDouble;
	BOOL m_bFloat;
/*}}CGEN_OPTIONS */
}

#ifndef __cplusplus
CVmap
#endif
;

/* Class CVmap (C functions)*/

/* Virtual function overrides */
void  CVmap_Constructor(CVmap*, const char* lpInstanceName, BOOL bCallVirtual);
void  CVmap_Destructor(CDlpObject*);
INT16 CVmap_AutoRegisterWords(CDlpObject*);
INT16 CVmap_Reset(CDlpObject*, BOOL bResetMembers);
INT16 CVmap_Init(CDlpObject*, BOOL bCallVirtual);
INT16 CVmap_Serialize(CDlpObject*, CDN3Stream* lpDest);
INT16 CVmap_SerializeXml(CDlpObject*, CXmlStream* lpDest);
INT16 CVmap_Deserialize(CDlpObject*, CDN3Stream* lpSrc);
INT16 CVmap_DeserializeXml(CDlpObject*, CXmlStream* lpSrc);
INT16 CVmap_Copy(CDlpObject*, CDlpObject* __iSrc);
INT16 CVmap_ClassProc(CDlpObject*);
INT16 CVmap_InstallProc(void* lpItp);
CVmap* CVmap_CreateInstance(const char* lpName);
INT16 CVmap_GetClassInfo(SWord* lpClassWord);
INT16 CVmap_GetInstanceInfo(CDlpObject*, SWord* lpClassWord);
BOOL  CVmap_IsKindOf(CDlpObject*, const char* lpClassName);
INT16 CVmap_ResetAllOptions(CDlpObject*, BOOL bInit);

/* Primary method invocation functions             */
/* DO NOT CALL THESE FUNCTIONS FROM C SCOPE.       */
/* THEY MAY INTERFERE WITH THE INTERPRETER SESSION */
#ifndef __NOITP
/*{{CGEN_CPMIC */
INT16 CVmap_OnMap(CDlpObject*);
INT16 CVmap_OnSetup(CDlpObject*);
INT16 CVmap_OnSetupI(CDlpObject*);
INT16 CVmap_OnStatus(CDlpObject*);
/*}}CGEN_CPMIC */
#endif /* #ifndef __NOITP */

/* Secondary method invocation functions */
/*{{CGEN_CSMIC */
/*}}CGEN_CSMIC */

/* Option changed callback functions */
/*{{CGEN_COCCF */
/*}}CGEN_COCCF */

/* Field changed callback functions */
/*{{CGEN_CFCCF */
/*}}CGEN_CFCCF */

/* Scanned C (member) functions */
/*{{CGEN_CEXPORT */

/* Taken from 'vmap_impl.c' */
INT32 CVmap_GetInDim(CVmap*);
INT32 CVmap_GetOutDim(CVmap*);
INT16 CVmap_Setup(CVmap*, CData* idTmx, const char* sAop, const char* sWop, FLOAT64 nZero);
INT16 CVmap_SetupI(CVmap*, CData* idImap, CData* idWtab, const char* sAop, const char* sWop, FLOAT64 nZero, FLOAT64 nOne);
INT16 CVmap_Status(CVmap*);
INT16 CVmap_Map(CVmap*, CData* idSrc, CData* idDst);
void CVmap_MapVector(CVmap*, BYTE* lpX, BYTE* lpY, INT32 nXdim, INT32 nYdim, INT16 nFtype);
/*}}CGEN_CEXPORT */

#endif /*#ifndef __VMAP_H */


/* EOF */
