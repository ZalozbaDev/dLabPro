/* dLabPro class CMatrix (matrix)
 * - Header file
 *
 * AUTHOR : Christian-M. Westendorf, Matthias Wolff
 * PACKAGE: dLabPro/classes
 *
 * This file was generated by dcg. DO NOT MODIFY! Modify matrix.def instead.
 * 
 * Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
 * - Chair of System Theory and Speech Technology, TU Dresden
 * - Chair of Communications Engineering, BTU Cottbus
 * 
 * This file is part of dLabPro.
 * 
 * dLabPro is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 * 
 * dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with dLabPro. If not, see <http://www.gnu.org/licenses/>.
 */

/*{{CGEN_INCLUDE */
#include "dlp_config.h"
#include "dlp_object.h"
#include "dlp_data.h"
#include "dlp_math.h"
/*}}CGEN_END */

/*{{CGEN_ERRORS */
/*}}CGEN_END */

/* C/C++ language abstraction layer */
#undef matrix_par
#define matrix_par CMatrix

/* dLabPro/C++ language abstraction layer */
#undef matrix
#define matrix CMatrix

/*{{CGEN_DEFINE */
/*}}CGEN_DEFINE */

#ifndef __MATRIX_H
#define __MATRIX_H

/*{{CGEN_HEADERCODE */
/*}}CGEN_HEADERCODE */

/* Class CMatrix */

#ifdef __cplusplus

class CMatrix : public CDlpObject 
{

typedef CDlpObject inherited;
typedef CMatrix thisclass;

/*{{CGEN_FRIENDS */
/*}}CGEN_FRIENDS */
public:
	CMatrix(const char* lpInstanceName, BOOL bCallVirtual = 1);
	virtual ~CMatrix();

/* Virtual and static function overrides */
public:
	virtual INT16 AutoRegisterWords();
	virtual INT16 Init(BOOL bCallVirtual = 0);
	virtual INT16 Reset(BOOL bResetMembers = 1);
	virtual INT16 Serialize(CDN3Stream* lpDest);
	virtual INT16 SerializeXml(CXmlStream* lpDest);
	virtual INT16 Deserialize(CDN3Stream* lpSrc);
	virtual INT16 DeserializeXml(CXmlStream* lpSrc);
	virtual INT16 Copy(CDlpObject* iSrc);
	virtual INT16 ClassProc();
	static  INT16 InstallProc(void* lpItp);
	static  CMatrix* CreateInstance(const char* lpName);
	static  INT16 GetClassInfo(SWord* lpClassWord);
	virtual INT16 GetInstanceInfo(SWord* lpClassWord);
	virtual BOOL  IsKindOf(const char* lpClassName);
	virtual INT16 ResetAllOptions(BOOL bInit = 0);

/* Primary method invocation functions             */
/* DO NOT CALL THESE FUNCTIONS FROM C SCOPE.       */
/* THEY MAY INTERFERE WITH THE INTERPRETER SESSION */
#ifndef __NOITP
public:
/*{{CGEN_PMIC */
	INT16 OnEigenIam();
	INT16 OnExpand();
	INT16 OnFactLdl();
	INT16 OnInvertIam();
	INT16 OnOp();
	INT16 OnSubmatIam();
/*}}CGEN_PMIC */
#endif /* #ifndef __NOITP */

/* Secondary method invocation functions */
public:
/*{{CGEN_SMIC */
	INT16 EigenIam(data* A, data* V, data* L);
	INT16 FactLdl(data* A, data* L, data* D);
	INT16 InvertIam(data* A, data* Z, data* Y);
	INT16 SubmatIam(data* A, INT32 i, INT32 k, INT32 n, INT32 m, data* Z);
/*}}CGEN_SMIC */

/* Option changed callback functions */
public:
/*{{CGEN_OCCF */
/*}}CGEN_OCCF */

/* Field changed callback functions */
public:
/*{{CGEN_FCCF */
/*}}CGEN_FCCF */

/* Scanned member functions */
/*{{CGEN_EXPORT */

/* Taken from 'mat_iam.c' */
	public: INT16 OnOp_Impl();
	public: static INT16 Op(CData* idDst, void* lpPar1, INT16 nType1, void* lpPar2, INT16 nType2, INT16 nOpcode);
	public: static INT16 Invert(CData* A, CData* Z, CData* Y);
	public: static INT16 Eigen(CData* A, CData* V, CData* L, BOOL bInv, BOOL bNorm);
	public: static INT16 Submat(CData* A, INT32 i, INT32 k, INT32 n, INT32 m, CData* Z);
	private: static INT16 FactLDL(CData* A, CData* L, CData* D);
	public: INT16 Expand(CData* idSrc, INT32 nIcR, INT32 nIcC, INT32 nIcV, INT32 nRecs, INT32 nComps, const char* sOp, CData* idDst);

/* Taken from 'mat_work.c' */
	private: static INT16 CopyLabels(CData* idDst, CData* idSrc);
	private: static INT16 EigenInt(CData* A, CData* V, CData* L, BOOL bNorm);
	private: static INT16 IeigenInt(CData* A, CData* V, CData* L, BOOL bNorm);
/*}}CGEN_EXPORT */

/* Member variables */
public:
/*{{CGEN_ICXX_FIELDS */
/*}}CGEN_ICXX_FIELDS */

#else  /* #ifdef __cplusplus */

typedef struct CMatrix
{
  /* Pointer to C base instance */
  struct CDlpObject* m_lpBaseInstance;

/*{{CGEN_IC_FIELDS */
/*}}CGEN_IC_FIELDS */

#endif /* #ifdef __cplusplus */

/*{{CGEN_FIELDS */
/*}}CGEN_FIELDS */

/*{{CGEN_OPTIONS */
	BOOL m_bInv;
	BOOL m_bNorm;
/*}}CGEN_OPTIONS */
}

#ifndef __cplusplus
CMatrix
#endif
;

/* Class CMatrix (C functions)*/

/* Virtual function overrides */
void  CMatrix_Constructor(CMatrix*, const char* lpInstanceName, BOOL bCallVirtual);
void  CMatrix_Destructor(CDlpObject*);
INT16 CMatrix_AutoRegisterWords(CDlpObject*);
INT16 CMatrix_Reset(CDlpObject*, BOOL bResetMembers);
INT16 CMatrix_Init(CDlpObject*, BOOL bCallVirtual);
INT16 CMatrix_Serialize(CDlpObject*, CDN3Stream* lpDest);
INT16 CMatrix_SerializeXml(CDlpObject*, CXmlStream* lpDest);
INT16 CMatrix_Deserialize(CDlpObject*, CDN3Stream* lpSrc);
INT16 CMatrix_DeserializeXml(CDlpObject*, CXmlStream* lpSrc);
INT16 CMatrix_Copy(CDlpObject*, CDlpObject* __iSrc);
INT16 CMatrix_ClassProc(CDlpObject*);
INT16 CMatrix_InstallProc(void* lpItp);
CMatrix* CMatrix_CreateInstance(const char* lpName);
INT16 CMatrix_GetClassInfo(SWord* lpClassWord);
INT16 CMatrix_GetInstanceInfo(CDlpObject*, SWord* lpClassWord);
BOOL  CMatrix_IsKindOf(CDlpObject*, const char* lpClassName);
INT16 CMatrix_ResetAllOptions(CDlpObject*, BOOL bInit);

/* Primary method invocation functions             */
/* DO NOT CALL THESE FUNCTIONS FROM C SCOPE.       */
/* THEY MAY INTERFERE WITH THE INTERPRETER SESSION */
#ifndef __NOITP
/*{{CGEN_CPMIC */
INT16 CMatrix_OnEigenIam(CDlpObject*);
INT16 CMatrix_OnExpand(CDlpObject*);
INT16 CMatrix_OnFactLdl(CDlpObject*);
INT16 CMatrix_OnInvertIam(CDlpObject*);
INT16 CMatrix_OnOp(CDlpObject*);
INT16 CMatrix_OnSubmatIam(CDlpObject*);
/*}}CGEN_CPMIC */
#endif /* #ifndef __NOITP */

/* Secondary method invocation functions */
/*{{CGEN_CSMIC */
INT16 CMatrix_EigenIam(CMatrix*, data* A, data* V, data* L);
INT16 CMatrix_FactLdl(CMatrix*, data* A, data* L, data* D);
INT16 CMatrix_InvertIam(CMatrix*, data* A, data* Z, data* Y);
INT16 CMatrix_SubmatIam(CMatrix*, data* A, INT32 i, INT32 k, INT32 n, INT32 m, data* Z);
/*}}CGEN_CSMIC */

/* Option changed callback functions */
/*{{CGEN_COCCF */
/*}}CGEN_COCCF */

/* Field changed callback functions */
/*{{CGEN_CFCCF */
/*}}CGEN_CFCCF */

/* Scanned C (member) functions */
/*{{CGEN_CEXPORT */

/* Taken from 'mat_iam.c' */
INT16 CMatrix_OnOp_Impl(CMatrix*);
INT16 CMatrix_Op(CData* idDst, void* lpPar1, INT16 nType1, void* lpPar2, INT16 nType2, INT16 nOpcode);
INT16 CMatrix_Invert(CData* A, CData* Z, CData* Y);
INT16 CMatrix_Eigen(CData* A, CData* V, CData* L, BOOL bInv, BOOL bNorm);
INT16 CMatrix_Submat(CData* A, INT32 i, INT32 k, INT32 n, INT32 m, CData* Z);
INT16 CMatrix_FactLDL(CData* A, CData* L, CData* D);
INT16 CMatrix_Expand(CMatrix*, CData* idSrc, INT32 nIcR, INT32 nIcC, INT32 nIcV, INT32 nRecs, INT32 nComps, const char* sOp, CData* idDst);

/* Taken from 'mat_work.c' */
INT16 CMatrix_CopyLabels(CData* idDst, CData* idSrc);
INT16 CMatrix_EigenInt(CData* A, CData* V, CData* L, BOOL bNorm);
INT16 CMatrix_IeigenInt(CData* A, CData* V, CData* L, BOOL bNorm);
/*}}CGEN_CEXPORT */

#endif /*#ifndef __MATRIX_H */


/* EOF */
