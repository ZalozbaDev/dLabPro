/* dLabPro class CVar (var)
 * - Header file
 *
 * AUTHOR : Christian-M. Westendorf, Matthias Wolff
 * PACKAGE: dLabPro/classes
 *
 * This file was generated by dcg. DO NOT MODIFY! Modify var.def instead.
 * 
 * Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
 * - Chair of System Theory and Speech Technology, TU Dresden
 * - Chair of Communications Engineering, BTU Cottbus
 * 
 * This file is part of dLabPro.
 * 
 * dLabPro is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 * 
 * dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with dLabPro. If not, see <http://www.gnu.org/licenses/>.
 */

/*{{CGEN_INCLUDE */
#include "dlp_config.h"
#include "dlp_object.h"
#include "dlp_data.h"
/*}}CGEN_END */

/*{{CGEN_ERRORS */
#undef VAR_NOTSUPPORTED    
#define VAR_NOTSUPPORTED     -1001
/*}}CGEN_END */

/* C/C++ language abstraction layer */
#undef var_par
#define var_par CVar

/* dLabPro/C++ language abstraction layer */
#undef var
#define var CVar

/*{{CGEN_DEFINE */
#define T_RDOUBLE 13008
#define T_RDDATA  20000
#define T_RSDATA  20001
/*}}CGEN_DEFINE */

#ifndef __VAR_H
#define __VAR_H

/*{{CGEN_HEADERCODE */
/*}}CGEN_HEADERCODE */

/* Class CVar */

#ifdef __cplusplus

class CVar : public CDlpObject 
{

typedef CDlpObject inherited;
typedef CVar thisclass;

/*{{CGEN_FRIENDS */
/*}}CGEN_FRIENDS */
public:
	CVar(const char* lpInstanceName, BOOL bCallVirtual = 1);
	virtual ~CVar();

/* Virtual and static function overrides */
public:
	virtual INT16 AutoRegisterWords();
	virtual INT16 Init(BOOL bCallVirtual = 0);
	virtual INT16 Reset(BOOL bResetMembers = 1);
	virtual INT16 Serialize(CDN3Stream* lpDest);
	virtual INT16 SerializeXml(CXmlStream* lpDest);
	virtual INT16 Deserialize(CDN3Stream* lpSrc);
	virtual INT16 DeserializeXml(CXmlStream* lpSrc);
	virtual INT16 Copy(CDlpObject* iSrc);
	virtual INT16 ClassProc();
	static  INT16 InstallProc(void* lpItp);
	static  CVar* CreateInstance(const char* lpName);
	static  INT16 GetClassInfo(SWord* lpClassWord);
	virtual INT16 GetInstanceInfo(SWord* lpClassWord);
	virtual BOOL  IsKindOf(const char* lpClassName);
	virtual INT16 ResetAllOptions(BOOL bInit = 0);

/* Primary method invocation functions             */
/* DO NOT CALL THESE FUNCTIONS FROM C SCOPE.       */
/* THEY MAY INTERFERE WITH THE INTERPRETER SESSION */
#ifndef __NOITP
public:
/*{{CGEN_PMIC */
	INT16 OnMultiplySet();
	INT16 OnIncrementSet();
	INT16 OnAddSet();
	INT16 OnDecrementSet();
	INT16 OnSubtractSet();
	INT16 OnBset();
	INT16 OnIntv();
	INT16 OnIset();
	INT16 OnRset();
	INT16 OnSset();
	INT16 OnStatus();
	INT16 OnVset();
	INT16 OnDivideSet();
	INT16 OnSet();
/*}}CGEN_PMIC */
#endif /* #ifndef __NOITP */

/* Secondary method invocation functions */
public:
/*{{CGEN_SMIC */
	INT16 MultiplySet();
	INT16 IncrementSet();
	INT16 AddSet();
	INT16 DecrementSet();
	INT16 SubtractSet();
	INT16 Bset(BOOL bVal);
	INT16 Intv(FLOAT64 nLow, FLOAT64 nHi, FLOAT64 nDelta);
	INT16 Iset(CDlpObject* iVal);
	INT16 Rset(data* idRndSet, INT32 nIc);
	INT16 Sset(char* sVal);
	INT16 Vset(COMPLEX64 nVal);
	INT16 DivideSet();
	INT16 Set();
/*}}CGEN_SMIC */

/* Option changed callback functions */
public:
/*{{CGEN_OCCF */
/*}}CGEN_OCCF */

/* Field changed callback functions */
public:
/*{{CGEN_FCCF */
/*}}CGEN_FCCF */

/* Scanned member functions */
/*{{CGEN_EXPORT */

/* Taken from 'var_impl.c' */
	public: INT16 Status();
	protected: INT16 SetOp(const char* lpsOpname);
	protected: void PopOwnValue();
	protected: void Exec();
/*}}CGEN_EXPORT */

/* Member variables */
public:
/*{{CGEN_ICXX_FIELDS */
	CData*           m_idRndSet;
/*}}CGEN_ICXX_FIELDS */

#else  /* #ifdef __cplusplus */

typedef struct CVar
{
  /* Pointer to C base instance */
  struct CDlpObject* m_lpBaseInstance;

/*{{CGEN_IC_FIELDS */
	CDlpObject*      m_idRndSet;
/*}}CGEN_IC_FIELDS */

#endif /* #ifdef __cplusplus */

/*{{CGEN_FIELDS */
	INT16            m_bBVal;
	FLOAT64          m_nDelta;
	FLOAT64          m_nHi;
	INT32            m_nIcomp;
	INT32            m_nInd;
	FLOAT64          m_nLow;
	COMPLEX64        m_nNVal;
	FLOAT64          m_nNorm;
	char*            m_lpsSVal;
	INT32            m_nSetSize;
	INT16            m_nType;
/*}}CGEN_FIELDS */

/*{{CGEN_OPTIONS */
/*}}CGEN_OPTIONS */
}

#ifndef __cplusplus
CVar
#endif
;

/* Class CVar (C functions)*/

/* Virtual function overrides */
void  CVar_Constructor(CVar*, const char* lpInstanceName, BOOL bCallVirtual);
void  CVar_Destructor(CDlpObject*);
INT16 CVar_AutoRegisterWords(CDlpObject*);
INT16 CVar_Reset(CDlpObject*, BOOL bResetMembers);
INT16 CVar_Init(CDlpObject*, BOOL bCallVirtual);
INT16 CVar_Serialize(CDlpObject*, CDN3Stream* lpDest);
INT16 CVar_SerializeXml(CDlpObject*, CXmlStream* lpDest);
INT16 CVar_Deserialize(CDlpObject*, CDN3Stream* lpSrc);
INT16 CVar_DeserializeXml(CDlpObject*, CXmlStream* lpSrc);
INT16 CVar_Copy(CDlpObject*, CDlpObject* __iSrc);
INT16 CVar_ClassProc(CDlpObject*);
INT16 CVar_InstallProc(void* lpItp);
CVar* CVar_CreateInstance(const char* lpName);
INT16 CVar_GetClassInfo(SWord* lpClassWord);
INT16 CVar_GetInstanceInfo(CDlpObject*, SWord* lpClassWord);
BOOL  CVar_IsKindOf(CDlpObject*, const char* lpClassName);
INT16 CVar_ResetAllOptions(CDlpObject*, BOOL bInit);

/* Primary method invocation functions             */
/* DO NOT CALL THESE FUNCTIONS FROM C SCOPE.       */
/* THEY MAY INTERFERE WITH THE INTERPRETER SESSION */
#ifndef __NOITP
/*{{CGEN_CPMIC */
INT16 CVar_OnMultiplySet(CDlpObject*);
INT16 CVar_OnIncrementSet(CDlpObject*);
INT16 CVar_OnAddSet(CDlpObject*);
INT16 CVar_OnDecrementSet(CDlpObject*);
INT16 CVar_OnSubtractSet(CDlpObject*);
INT16 CVar_OnBset(CDlpObject*);
INT16 CVar_OnIntv(CDlpObject*);
INT16 CVar_OnIset(CDlpObject*);
INT16 CVar_OnRset(CDlpObject*);
INT16 CVar_OnSset(CDlpObject*);
INT16 CVar_OnStatus(CDlpObject*);
INT16 CVar_OnVset(CDlpObject*);
INT16 CVar_OnDivideSet(CDlpObject*);
INT16 CVar_OnSet(CDlpObject*);
/*}}CGEN_CPMIC */
#endif /* #ifndef __NOITP */

/* Secondary method invocation functions */
/*{{CGEN_CSMIC */
INT16 CVar_MultiplySet(CVar*);
INT16 CVar_IncrementSet(CVar*);
INT16 CVar_AddSet(CVar*);
INT16 CVar_DecrementSet(CVar*);
INT16 CVar_SubtractSet(CVar*);
INT16 CVar_Bset(CVar*, BOOL bVal);
INT16 CVar_Intv(CVar*, FLOAT64 nLow, FLOAT64 nHi, FLOAT64 nDelta);
INT16 CVar_Iset(CVar*, CDlpObject* iVal);
INT16 CVar_Rset(CVar*, data* idRndSet, INT32 nIc);
INT16 CVar_Sset(CVar*, char* sVal);
INT16 CVar_Vset(CVar*, COMPLEX64 nVal);
INT16 CVar_DivideSet(CVar*);
INT16 CVar_Set(CVar*);
/*}}CGEN_CSMIC */

/* Option changed callback functions */
/*{{CGEN_COCCF */
/*}}CGEN_COCCF */

/* Field changed callback functions */
/*{{CGEN_CFCCF */
/*}}CGEN_CFCCF */

/* Scanned C (member) functions */
/*{{CGEN_CEXPORT */

/* Taken from 'var_impl.c' */
INT16 CVar_Status(CVar*);
INT16 CVar_SetOp(CVar*, const char* lpsOpname);
void CVar_PopOwnValue(CVar*);
void CVar_Exec(CVar*);
/*}}CGEN_CEXPORT */

#endif /*#ifndef __VAR_H */


/* EOF */
