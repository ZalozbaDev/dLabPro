/* dLabPro class CProfile (profile)
 * - Header file
 *
 * AUTHOR : M. Eichner
 * PACKAGE: dLabPro/classes
 *
 * This file was generated by dcg. DO NOT MODIFY! Modify profile.def instead.
 * 
 * Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
 * - Chair of System Theory and Speech Technology, TU Dresden
 * - Chair of Communications Engineering, BTU Cottbus
 * 
 * This file is part of dLabPro.
 * 
 * dLabPro is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 * 
 * dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with dLabPro. If not, see <http://www.gnu.org/licenses/>.
 */

/*{{CGEN_INCLUDE */
#include "dlp_config.h"
#include "dlp_object.h"
/*}}CGEN_END */

/*{{CGEN_ERRORS */
/*}}CGEN_END */

/* C/C++ language abstraction layer */
#undef profile_par
#define profile_par CProfile

/* dLabPro/C++ language abstraction layer */
#undef profile
#define profile CProfile

/*{{CGEN_DEFINE */
/*}}CGEN_DEFINE */

#ifndef __PROFILE_H
#define __PROFILE_H

/*{{CGEN_HEADERCODE */
  #if (defined __GNUC__ && !defined __MINGW32__)
    #include <sys/times.h>
  #elif !defined _MSC_VER && !defined __TMS
    #include <windows.h>
    #include <winuser.h>
  #endif
/*}}CGEN_HEADERCODE */

/* Class CProfile */

#ifdef __cplusplus

class CProfile : public CDlpObject 
{

typedef CDlpObject inherited;
typedef CProfile thisclass;

/*{{CGEN_FRIENDS */
/*}}CGEN_FRIENDS */
public:
	CProfile(const char* lpInstanceName, BOOL bCallVirtual = 1);
	virtual ~CProfile();

/* Virtual and static function overrides */
public:
	virtual INT16 AutoRegisterWords();
	virtual INT16 Init(BOOL bCallVirtual = 0);
	virtual INT16 Reset(BOOL bResetMembers = 1);
	virtual INT16 Serialize(CDN3Stream* lpDest);
	virtual INT16 SerializeXml(CXmlStream* lpDest);
	virtual INT16 Deserialize(CDN3Stream* lpSrc);
	virtual INT16 DeserializeXml(CXmlStream* lpSrc);
	virtual INT16 Copy(CDlpObject* iSrc);
	virtual INT16 ClassProc();
	static  INT16 InstallProc(void* lpItp);
	static  CProfile* CreateInstance(const char* lpName);
	static  INT16 GetClassInfo(SWord* lpClassWord);
	virtual INT16 GetInstanceInfo(SWord* lpClassWord);
	virtual BOOL  IsKindOf(const char* lpClassName);
	virtual INT16 ResetAllOptions(BOOL bInit = 0);

/* Primary method invocation functions             */
/* DO NOT CALL THESE FUNCTIONS FROM C SCOPE.       */
/* THEY MAY INTERFERE WITH THE INTERPRETER SESSION */
#ifndef __NOITP
public:
/*{{CGEN_PMIC */
	INT16 OnAssert();
	INT16 OnBeginTimer();
	INT16 OnBreakTimer();
	INT16 OnCheckHeap();
	INT16 OnContTimer();
	INT16 OnDate();
	INT16 OnEndTimer();
	INT16 OnResetTimer();
	INT16 OnShowTimer();
	INT16 OnTime();
	INT16 OnTstamp();
/*}}CGEN_PMIC */
#endif /* #ifndef __NOITP */

/* Secondary method invocation functions */
public:
/*{{CGEN_SMIC */
	INT16 Assert(BOOL bCondition);
	INT16 BeginTimer();
	INT16 BreakTimer();
	INT16 CheckHeap();
	INT16 ContTimer();
	INT16 Date();
	INT16 EndTimer(const char* sMsg);
	INT16 ResetTimer();
	INT16 ShowTimer(const char* sMsg);
	INT16 Time();
	INT16 Tstamp();
/*}}CGEN_SMIC */

/* Option changed callback functions */
public:
/*{{CGEN_OCCF */
/*}}CGEN_OCCF */

/* Field changed callback functions */
public:
/*{{CGEN_FCCF */
/*}}CGEN_FCCF */

/* Scanned member functions */
/*{{CGEN_EXPORT */
/*}}CGEN_EXPORT */

/* Member variables */
public:
/*{{CGEN_ICXX_FIELDS */
/*}}CGEN_ICXX_FIELDS */

#else  /* #ifdef __cplusplus */

typedef struct CProfile
{
  /* Pointer to C base instance */
  struct CDlpObject* m_lpBaseInstance;

/*{{CGEN_IC_FIELDS */
/*}}CGEN_IC_FIELDS */

#endif /* #ifdef __cplusplus */

/*{{CGEN_FIELDS */
	INT32            m_nCalls;
	INT64            m_nTime;
	INT64            m_nTime0;
	char             m_sTstamp[24];
/*}}CGEN_FIELDS */

/*{{CGEN_OPTIONS */
/*}}CGEN_OPTIONS */
}

#ifndef __cplusplus
CProfile
#endif
;

/* Class CProfile (C functions)*/

/* Virtual function overrides */
void  CProfile_Constructor(CProfile*, const char* lpInstanceName, BOOL bCallVirtual);
void  CProfile_Destructor(CDlpObject*);
INT16 CProfile_AutoRegisterWords(CDlpObject*);
INT16 CProfile_Reset(CDlpObject*, BOOL bResetMembers);
INT16 CProfile_Init(CDlpObject*, BOOL bCallVirtual);
INT16 CProfile_Serialize(CDlpObject*, CDN3Stream* lpDest);
INT16 CProfile_SerializeXml(CDlpObject*, CXmlStream* lpDest);
INT16 CProfile_Deserialize(CDlpObject*, CDN3Stream* lpSrc);
INT16 CProfile_DeserializeXml(CDlpObject*, CXmlStream* lpSrc);
INT16 CProfile_Copy(CDlpObject*, CDlpObject* __iSrc);
INT16 CProfile_ClassProc(CDlpObject*);
INT16 CProfile_InstallProc(void* lpItp);
CProfile* CProfile_CreateInstance(const char* lpName);
INT16 CProfile_GetClassInfo(SWord* lpClassWord);
INT16 CProfile_GetInstanceInfo(CDlpObject*, SWord* lpClassWord);
BOOL  CProfile_IsKindOf(CDlpObject*, const char* lpClassName);
INT16 CProfile_ResetAllOptions(CDlpObject*, BOOL bInit);

/* Primary method invocation functions             */
/* DO NOT CALL THESE FUNCTIONS FROM C SCOPE.       */
/* THEY MAY INTERFERE WITH THE INTERPRETER SESSION */
#ifndef __NOITP
/*{{CGEN_CPMIC */
INT16 CProfile_OnAssert(CDlpObject*);
INT16 CProfile_OnBeginTimer(CDlpObject*);
INT16 CProfile_OnBreakTimer(CDlpObject*);
INT16 CProfile_OnCheckHeap(CDlpObject*);
INT16 CProfile_OnContTimer(CDlpObject*);
INT16 CProfile_OnDate(CDlpObject*);
INT16 CProfile_OnEndTimer(CDlpObject*);
INT16 CProfile_OnResetTimer(CDlpObject*);
INT16 CProfile_OnShowTimer(CDlpObject*);
INT16 CProfile_OnTime(CDlpObject*);
INT16 CProfile_OnTstamp(CDlpObject*);
/*}}CGEN_CPMIC */
#endif /* #ifndef __NOITP */

/* Secondary method invocation functions */
/*{{CGEN_CSMIC */
INT16 CProfile_Assert(CProfile*, BOOL bCondition);
INT16 CProfile_BeginTimer(CProfile*);
INT16 CProfile_BreakTimer(CProfile*);
INT16 CProfile_CheckHeap(CProfile*);
INT16 CProfile_ContTimer(CProfile*);
INT16 CProfile_Date(CProfile*);
INT16 CProfile_EndTimer(CProfile*, const char* sMsg);
INT16 CProfile_ResetTimer(CProfile*);
INT16 CProfile_ShowTimer(CProfile*, const char* sMsg);
INT16 CProfile_Time(CProfile*);
INT16 CProfile_Tstamp(CProfile*);
/*}}CGEN_CSMIC */

/* Option changed callback functions */
/*{{CGEN_COCCF */
/*}}CGEN_COCCF */

/* Field changed callback functions */
/*{{CGEN_CFCCF */
/*}}CGEN_CFCCF */

/* Scanned C (member) functions */
/*{{CGEN_CEXPORT */
/*}}CGEN_CEXPORT */

#endif /*#ifndef __PROFILE_H */


/* EOF */
