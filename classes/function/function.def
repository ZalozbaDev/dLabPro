## dLabPro class CFunction (function)
## - Definition file
##
## AUTHOR : Matthias Wolff
## PACKAGE: dLabPro/classes
## 
## Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
## - Chair of System Theory and Speech Technology, TU Dresden
## - Chair of Communications Engineering, BTU Cottbus
## 
## This file is part of dLabPro.
## 
## dLabPro is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
## 
## dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
## 
## You should have received a copy of the GNU Lesser General Public License
## along with dLabPro. If not, see <http://www.gnu.org/licenses/>.

PLATFORM: GNUC++
COMPILER: gcc
AR:       ar
CFLAGS:   -Wno-trigraphs

/cxx_nconv
/no_idcheck
#/xDoc
PROJECT: function
CLASS:   function
AUTHOR:  Matthias Wolff
COMMENT: dLabPro script container and executer
VERSION: 2.5.3
/html MAN:
  <p>Instances of the function class represent a piece of dLabPro code which can be used repeatedly. The code is
  stored as a sequence of tokens (see {@link tsq field tsq}). Functions have a local name space, may have formal
  arguments and may return a value to their calling function.</p>
  <p>The following example illustrates the usage of the function class:</p>
  <pre class="code">

  <span class="c-cmt">## Moves components from one data table to another.</span>
  <span class="c-cmt">##</span>
  <span class="c-cmt">## @param idSrc</span>
  <span class="c-cmt">##          The source table</span>
  <span class="c-cmt">## @param nFirst</span>
  <span class="c-cmt">##          Zero-based index of first component to move</span>
  <span class="c-cmt">## @param nCount</span>
  <span class="c-cmt">##          Number of components to move</span>
  <span class="c-cmt">## @param idDst</span>
  <span class="c-cmt">##          The destination table (may be identical with idSrc)</span>
  <span class="c-cmt">## @return The number of components actually moved</span>
  <span class="c-cmt">##</span>
  <span class="c-key">function</span> -slice(idSrc,nFirst,nCount,idDst)   <span class="c-cmt"># Function header</span>
  {@link {}                                            <span class="c-cmt"># Define function body</span>
    idSrc idDst && not {@link if} 0 {@link return}; {@link end}        <span class="c-cmt"># Return 0 if idSrc or idDst are NULL</span>
    idSrc nFirst nCount idDst <a href="data.html#mth_-select"><code class="link">-select</code></a>;         <span class="c-cmt"># Move components</span>
    idSrc idDst == not {@link if}                      <span class="c-cmt"># If source is not identical with destination >></span>
      idSrc nFirst nCount idSrc <a href="data.html#mth_-delete"><code class="link">-delete</code></a>;       <span class="c-cmt">#   Delete moved components from source</span>
    {@link end}                                        <span class="c-cmt"># <<</span>
    idDst.dim {@link return};                          <span class="c-cmt"># Return number of actually moved components</span>
  }                                            <span class="c-cmt"># End of function body</span>

  <span class="c-cmt">## Main program                              # ----------------------------------------------</span>
  <a href="data.html"><code class="link">data</code></a> x;                                      <span class="c-cmt"># Create a data table</span>
  <a href="data.html"><code class="link">data</code></a> y;                                      <span class="c-cmt"># Create another data table</span>
  <a href="var.html"><code class="link">var</code></a>  n;                                      <span class="c-cmt"># Create a variable</span>

  {@link -type} long 5 2 x <a href="data.html#mth_-array"><code class="link">-array</code></a>                      <span class="c-cmt"># Initialize data table x</span>
  {
     11  22  33  44  55
    111 222 333 444 555
  };

  x 1 2 y -slice n =;                          <span class="c-cmt"># Call function and store return value in n</span>
  "\n Moved \${n} component(s)." {@link -echo};         <span class="c-cmt"># Print a message</span>
  x <a href="data.html#mth_-print"><code class="link">-print</code></a>;                                    <span class="c-cmt"># Print data table x</span>
  y <a href="data.html#mth_-print"><code class="link">-print</code></a>;                                    <span class="c-cmt"># Print data table y</span>
  </pre>
  <p>Instances defined inside functions have a local scope and will be automatically destroyed upon leaving the
  function. Functions may be nested.</p>

  <h4>Function Definition Syntax</h4>
  <pre class="code">

  <b>function</b> identifier<b>(</b>[arg1[<b>,</b>arg2[<b>,</b>...]]]<b>)</b></code> <b>{</b> &lt;dLabPro commands&gt; <b>}</b>
  </pre>
  <p>A function definition consists of</p>
  <ul>
    <li>a header comprising the function's identifier and a comma-separated list of formal arguments enclosed in braces and</li>
    <li>a function body made of dLabPro commands enclosed in curly braces.</li>
  </ul>
  <p>Please note that the function header <em>must not</em> contain any white spaces. By convention, function identifiers
  should begin with a hyphen (-).</p>

  <h4>Function Call Syntax</h4>
  <pre class="code">

  [arg1[ arg2[ ...]]] identifier<b>;</b>
  </pre>
  <p>A function is called like a method of a class, i.e. the function call consists of a white space separated argument
  list followed by the function identifier. A semicolon can be placed after the function call to clear the stack.</p>

  <h4>Further Examples</h4>
  <p>There is a number examples and code snippets spread over this manual section. Below is an index:</p>
  <table class="indent">
    <tr><th>Topic</th><th>See manual section</th></tr>
    <tr>
      <td>Command line arguments<br>- determine number<br>- using in scripts</td>
      <td>&nbsp;<br>{@link if}<br>{@link else}</td>
    </tr>
    <tr>
      <td>Debug break points</td>
      <td>{@link brk}, {@link step}, {@link cont}</td>
    </tr>
    <tr>
      <td>Error handling</td>
      <td>{@link ?error}, {@link return}</td>
    </tr>
    <tr>
      <td>Fields<br>- initializing<br>- reading, writing</td>
      <td>&nbsp;<br>{@link -reset}<br>{@link -get}, {@link -set}, {@link -see}</td>
    </tr>
    <tr>
      <td>Jumps<br>- conditional<br>- unconditional</td>
      <td>&nbsp;<br>{@link if}, {@link else}, {@link end}<br>{@link label}</td>
    </tr>
    <tr>
      <td>Loops<br>- head controlled</td>
      <td>{@link while}, {@link break}, {@link continue}<br>{@link goto}</td>
    </tr>
    <tr>
      <td>Platform dependent scripts</td>
      <td>{@link ?platform}, {@link end}</td>
    </tr>
  </tabLe>

  <h4>See also</h4>
  <ul class="linklist">
    <li class="linklist"><a href="../tutorials/t001.html" class="linklist">dLabPro Tutorial I - Basics</a> for a description of the dLabPro syntax.</li>
  </ul>

  <h4>Known Issues</h4>
  <ul>
    <li>The function header cannot be longer than 48 characters (including the formal argument list!).</li>
  </ul>

  @cgen:TODO: Errors' documentation
  @cgen:TODO: Complete RN "Scalar operators"
  @cgen:TODO: Using <code>CDlpTable</code> for token sequence and source table will save enormous amounts of memory! 
END_MAN

INCLUDE: "dlp_dgen.h"
FILE:    fnc_arg.cpp
FILE:    fnc_aux.cpp
FILE:    fnc_ctl.cpp
FILE:    fnc_def.cpp
FILE:    fnc_fml.cpp
FILE:    fnc_iam.cpp
FILE:    fnc_itp.cpp
FILE:    fnc_pre.cpp
FILE:    fnc_stk.cpp
FILE:    fnc_teq.cpp

DEFINE:  FNC_MSG(LV,MSG,A,B,C,D,E) if (m_nCheck>=LV) Msg(MSG,A,B,C,D,E)
DEFINE:  FNC_DELEGATE \
  if (!(m_nXm & XM_EXEC)) \
  { \
    CFunction* iParent = (CFunction*)OfKind("function",GetParent()); \
    if (!iParent) return NOT_EXEC; \
    if (iParent->m_nCheck>=2) \
    { \
      char lpsPrtId[255]; \
      Msg("  - DELEGATE --> %s",CDlpObject_GetFQName(iParent,lpsPrtId,0),0,0); \
    } \
  } \
  if (!(m_nXm & XM_EXEC)) return ((CFunction*)OfKind("function",GetParent()))->

## Define - Function execution modes
DEFINE:  XM_EXEC       0x0001                                                   # Executing  
DEFINE:  XM_BREAK      0x0002                                                   # At break point
DEFINE:  XM_QUIT       0x0004                                                   # Quitting session
DEFINE:  XM_STEP       0x0008                                                   # Step mode
DEFINE:  XM_NOLOGO     0x0010                                                   # Called with --nologo
DEFINE:  XM_PIPEMODE   0x0020                                                   # Called with --pipemode
DEFINE:  XM_AUTOBREAK  0x0040                                                   # Internal use
DEFINE:  XM_INLINE     0x0080                                                   # Inline function
DEFINE:  XM_IN_IDE     0x0100                                                   # Called with --in-IDE
DEFINE:  XM_NOPROMPT   0x0200                                                   # No user prompts except break points
DEFINE:  XM_ARCHIVE    0x0400                                                   # Continuing restored program archive

## Define - Argument list component indices
DEFINE:  FNC_ALIC_ID   0                                                        # Formal argument identifier
DEFINE:  FNC_ALIC_TYPE 1                                                        # Argument type
DEFINE:  FNC_ALIC_PTR  2                                                        # Pointer to variable/string

## Define - Additional token types
DEFINE:  TT_DATA       "=d"                                                     # Data instance
DEFINE:  TT_VAR        "=v"                                                     # Variable
DEFINE:  TT_NUM        "=n"                                                     # Number
DEFINE:  TT_WORD       "=w"                                                     # Arbitrary instance or field
DEFINE:  TT_FUNC       "=f"                                                     # Scalop/aggrop/strop function
DEFINE:  TT_OBR        "=("                                                     # Opening round/square/curly bracket
DEFINE:  TT_CBR        "=)"                                                     # Closing round/square/curly bracket
DEFINE:  TT_ASEP       "=,"                                                     # Argument separator
DEFINE:  TT_OPR        "=*"                                                     # Operator

## Errors
ERROR:   FNC_INTERNAL
COMMENT: Internal error (%s) at %s(%ld).
/html MAN:
  <p>This error occurs on internal malfunctions. The problem lies most likely in
  the C/C++ implementation.</p>
  @param 1 Error description
  @param 2 C/C++ source file name
  @param 3 Line number
END_MAN

ERROR:   FNC_SYNTAX
COMMENT: Syntax error.

ERROR:   FNC_EXPECT
COMMENT: Expect %s.

ERROR:   FNC_NOTALLOWED
COMMENT: %s is not allowed %s.

ERROR:   FNC_STACKOVERFLOW
COMMENT: Stack overflow.

ERROR:   FNC_STACKOVERFLOW_WARNING
COMMENT: Stack overflow (%d unused elements).
LEVEL:   EL_WARNING

ERROR:   FNC_STACKUNDERFLOW
COMMENT: Stack underflow%s%s.

ERROR:   FNC_TYPECAST
COMMENT: Cannot cast argument %ld from %s to %s.

ERROR:   FNC_LABEL
COMMENT: Label '%s' not found.

ERROR:   FNC_NOMORETOKENS
COMMENT: No more tokens to execute.

ERROR:   FNC_UNDEF
COMMENT: '%s' undefined.

ERROR:   FNC_DBL
COMMENT: '%s' was already %s.

ERROR:   FNC_INVALID
COMMENT: Invalid %s '%s'.

ERROR:   FNC_CANTEXEC
COMMENT: Cannot execute %s %s.%s.

ERROR:   FNC_UNEXOEF
COMMENT: Unexpected end of function searching for %s.

ERROR:   FNC_EXTRACHARS
COMMENT: Extra characters following %s in %s.

ERROR:   FNC_NOSET
COMMENT: Field %s is write-protected.

ERROR:   FNC_DESTROY
COMMENT: Cannot destroy instance %s.

ERROR:   FNC_MISSING
COMMENT: Missing %s.

ERROR:   FNC_STDIN
COMMENT: Broken pipe <stdin>.
LEVEL:   EL_WARNING

ERROR:   FNC_IGNORE
COMMENT: Ignoring %s.
LEVEL:   EL_WARNING

ERROR:   FNC_TOOLONG
COMMENT: %s too long%s.
LEVEL:   EL_WARNING

ERROR:   FNC_LISTINI
COMMENT: Too %s list initializers for record %ld.
LEVEL:   EL_WARNING

ERROR:   FNC_ASGNONNULL
COMMENT: Assignment on NULL has no effect.
LEVEL:   EL_WARNING
/html MAN:
  <p>The warning occurs if an assignment is made to the <code>NULL</code>
  instance:</p>
  <pre class="code">
  <a href="data.html"><code class="link">data</code></a> x;
  x NULL =;        <span class="c-cmt"># Assignment ineffective</span>
  </pre>
  <p>Another possible reason for this warning is trying to assign an instance
  to a variable:</p>
  <pre class="code">
  <a href="data.html"><code class="link">data</code></a> x;
  <a href="var.html"><code class="link">var</code></a>  y;
  NULL y <a href="var.html#mth_-iset"><code class="link">-iset</code></a>;    <span class="c-cmt"># Assign NULL to variable</span>
  x y =;           <span class="c-cmt"># Faulty attempt to assign a new instance to the variable y
  </pre>
  <p>The assignment operator on instance variables <em>always</em> works like a
  {@link -copy} to the instance <em>referred</em> to by the variable. If you
  wish to assign a new instance to the variable you must use <a
  href="var.html#mth_-iset"><code class="link">-iset</code></a>.</p>
END_MAN

ERROR:   FNC_COMPAT
COMMENT: Backward compatibility: %s
LEVEL:   EL_WARNING

## Hidden fields - caller and formal argument list
FIELD:   caller
CNAME:   m_iCaller
TYPE:    INSTANCE()
FLAGS:   /hidden /noset /nonautomatic /nosave

FIELD:   arg                                                                    # Table of arguments
TYPE:    INSTANCE(data)
FLAGS:   /hidden /noset

## Hidden fields - program control
FIELD:   ai                                                                     # The currently active instance
TYPE:    INSTANCE()
FLAGS:   /hidden /noset /nosave

FIELD:   ai2                                                                    # The currently active secondary instance
TYPE:    INSTANCE()
FLAGS:   /hidden /noset /nosave

FIELD:   ai_used                                                                # Invoke-on-active-instance flag
TYPE:    bool
FLAGS:   /hidden /noset /nosave

FIELD:   pp                                                                     # Program pointer
TYPE:    int
FLAGS:   /hidden /noset

FIELD:   xm                                                                     # Execution mode
TYPE:    int
FLAGS:   /hidden /noset

## Hidden fields - source parser
FIELD:   par                                                                    # Source code parser instance
CNAME:   m__iPar
TYPE:    INSTANCE(CDgen)
FLAGS:   /hidden /noset /nosave

## Hidden fields - function source code
FIELD:   tsq                                                                    # Token sequence (function body)
TYPE:    INSTANCE(data)
FLAGS:   /hidden /noset

FIELD:   sfl                                                                    # List of source code files of function body
TYPE:    INSTANCE(data)
FLAGS:   /hidden /noset

## Protected fields - token execution queue
FIELD:   teq                                                                    # Token execution queue
TYPE:    INSTANCE(data)
FLAGS:   /hidden /noset

FIELD:   teq_offset                                                             # Current offset from queue head (for GetNextToken)
TYPE:    int
FLAGS:   /hidden /noset

## Fields - hidden
FIELD:   stack                                                                  # Argument stack
CNAME:   m_aStack
TYPE:    StkItm*
FLAGS:   /hidden /noset /nosave

FIELD:   stack_len                                                              # Actual length of argument stack
TYPE:    short
INIT:    -1
FLAGS:   /hidden /noset

FIELD:   stack_str                                                              # Buffer for fetching strings from stack
CNAME:   m_lpasStackStr
TYPE:    char**
FLAGS:   /hidden /noset /nosave

FIELD:   stack_str_pos                                                          # Pointer to next string buffer to be used
TYPE:    short
FLAGS:   /hidden /noset

FIELD:   stack_inst                                                             # Buffer for temporary instances on stack
CNAME:   m_lpasStackInst
TYPE:    CDlpObject**
FLAGS:   /hidden /noset /nosave

FIELD:   stack_inst_pos                                                         # Pointer to next instance buffer to be used
TYPE:    short
FLAGS:   /hidden /noset

FIELD:   mic                                                                    # The function's invocation context
TYPE:    (SMic)
FLAGS:   /hidden /noset

FIELD:   last_fml                                                               # interpreter code translated and queued from last formula token
TYPE:    text
COMMENT: Interpreter code translated and queued from last formula token.
FLAGS:   /noset /nosave

FIELD:   time
TYPE:    (time_t)
COMMENT: Used by option {@link /time}.
INIT:    dlp_time()
FLAGS:   /noset /nosave /hidden

## Options
OPTION:  /inline
COMMENT: Define an inline function.
CODE:
  if (!(m_nXm & XM_EXEC))
  {
    CFunction* iParent = (CFunction*)OfKind("function",GetParent());
    if (!iParent) return NOT_EXEC;
    if (iParent->m_nCheck>=2) Msg("  - DELEGATE --> Option /inline",0,0,0);
  ISETOPTION(iParent,"/inline");
  }
END_CODE

OPTION:  /disarm
COMMENT: Do not call classproc for next interpreted instance.
CODE:
  CFunction* iRoot = GetRootFnc();
  if (!iRoot) return NOT_EXEC;
  if(this != iRoot) {
    this->m_bDisarm = FALSE;
    if (iRoot->m_nCheck>=2) Msg("  - DELEGATE --> Option /disarm",0,0,0);
    ISETOPTION(iRoot,"/disarm");
  }
END_CODE
/html MAN:
  <p>Prevents the following instance identifier from causing any actions.</p>
  <h4>Example</h4>
  <pre class="code">

  <a href="function.html" class="code">function</a> f(s)
  {@link {}
    <span class="c-cmt"># ...</span>
  }
  {@link /disarm} f {@link -list} tokens;  <span class="c-cmt"># Without /disarm f would be executed here!</span>
  </pre>
  <h4>Remarks</h4>
  <p>Upon interpretation of an instance's identifier dLabPro executes the so called
  class procedure. This feature is intended for classes whose instance indentifiers have
  another semantics than just be the reference for its members. Examples are:</p>
  <ul>
    <li><a href="var.html"><b>Variables</b></a><br>The interpretation of a variable's
    identifier pushes the variable's value onto the stack. Thus a variable can be used
    with exactly the same syntax as the value it stands for.</li>
    <li><a href="function.html"><b>Functions</b></a><br>The interpretation of a functions's
    identifiers executes the funcion. Thus a function call has the same syntax as a method
    call.</li>
  </ul>
  <p>The {@link /disarm} option prevents dLabPro from invoking the following instance's
  class procedure which means it does nothing but pushing the instance onto the stack and
  activate it.</p>
  @see this
  @see parent
END_MAN

OPTION:  /xml
COMMENT: (De)serialize from/to XML file.
/html MAN:
  <p>{@link /xml} <b>{@link -restore}</b><br>
  Reads an XML file (default is set through __DEFAULT_FILEFORMAT_DN3/_XML).</p>
  <p>{@link /xml} <b>{@link -save}</b><br>
  Writes an XML file (default is set through __DEFAULT_FILEFORMAT_DN3/_XML).</p>
END_MAN

OPTION:  /dn3
COMMENT: (De)serialize from/to DN3 file.
/html MAN:
  <p>{@link /dn3} <b>{@link -restore}</b><br>
  Reads an DN3 file (default is set through __DEFAULT_FILEFORMAT_DN3/_XML).</p>
  <p>{@link /dn3} <b>{@link -save}</b><br>
  Writes an DN3 file (default is set through __DEFAULT_FILEFORMAT_DN3/_XML).</p>
END_MAN

OPTION:  /zip
COMMENT: Compress file during serialization.
/html MAN:
  <p>{@link /zip} <b>{@link -save}</b><br>
  Writes an compressed DN3 file.</p>
  <p>Decompression during <b>{@link -restore}</b>
  is done automatically (no option must be provided).</p>
END_MAN

OPTION:  /noerror
COMMENT: Suppress error messages.
/html MAN:
  <p>This option suppresses warning and error messages caused any methods.
  The error state may be determined after the method call using {@link ?error}.</p>
END_MAN

OPTION:  /nonstop
COMMENT: Never stop running.
FLAGS:   /nonautomatic
/html MAN:
  {@link /nonstop} prevents a script from interrupting and waiting for user
  input. This is a global setting.
  @see /stop
END_MAN
CODE:
  dlp_set_nonstop_mode(TRUE);
END_CODE

OPTION:  /stderr
COMMENT: Use standard error stream.
/html MAN:
  <p>{@link /stderr} <b>{@link -echo}</b><br>
  Writes message to standard error stream (rather than to standard output).</p>
END_MAN

OPTION:  /stop
COMMENT: Stop at break points and long listings.
FLAGS:   /nonautomatic
/html MAN:
  {@link /stop} enables break points and stopping on long listings. This is a
  global setting.
  @see /nonstop
END_MAN
CODE:
  dlp_set_nonstop_mode(FALSE);
END_CODE

OPTION: /time
COMMENT: Measures and outputs elapsed time to process one line of input.

## Methods - Source code
METHOD:  {
SYNTAX:  ()
POSTSYN: <script> }
CNAME:   Define
COMMENT: Defines the function body.
/html MAN:
  <p>This method stores all source code up to the matching closing curly brace as the function
  body (i.e. the dLabPro code which is executed when the function is called). Function definitions
  may be nested.</p>
  <h4>Example</h4>
  <pre class="code">

  <span class="c-key">function</span> -add_a_rec(x)                  <span class="c-cmt"># Instanciate a function with one argument</span>
  {@link {}                                       <span class="c-cmt"># Define the function body</span>
    <a href="data.html" class="code">data</a> idAux;                           <span class="c-cmt">#   ...</span>
    32 2 1 idAux <a href="data.html#mth_-array" class="code">-array</a> <a href="data.html#mth_{" class="code">{</a> "foo" "bar" };  <span class="c-cmt">#   Nested curly braces do not matter</span>
    idAux x <a href="data.html#mth_-cat" class="code">-cat</a>;                         <span class="c-cmt">#   ...</span>
  }                                       <span class="c-cmt"># End of function body</span>
  </pre>
  @see -load
END_MAN

METHOD:  (
SYNTAX:  ()
CNAME:   BraceOn
COMMENT: Ignored, to be used for better legibility of UPN code
CODE:
  // Ignored
END_CODE

METHOD:  )
SYNTAX:  ()
CNAME:   BraceOff
COMMENT: Ignored, to be used for better legibility of UPN code
CODE:
  // Ignored
END_CODE

METHOD:  -load
SYNTAX:  (string sFilename)
COMMENT: Loads source code from a file.
/html MAN:
  <p>This method loads the function body from a source file.</p>
  <h4>Example</h4>
  <pre class="code">

  <span class="c-key">function</span> f;                       <span class="c-cmt"># Instanciate a function</span>
  "myfunction.itp" {@link /disarm} f {@link -load}; <span class="c-cmt"># Load a source file</span>
  {@link /disarm} f {@link -list} tokens;           <span class="c-cmt"># Print the function</span>
  f;                                <span class="c-cmt"># Execute the function</span>
  </pre>
  <p><b class="warning">Important:</b> interpreting a functions's identifier means executing
  the function. As demonstrated in the example above you must use the {@link /disarm} option in order
  to call a method (like {@link -load} or {@link -list}) of a function instance <em>without</em> executing
  the function body.</p>
  @param sFilename Name of source file to be loaded
  @see {
END_MAN

## Methods - Program control
METHOD:  include
SYNTAX:  (string sFilename)
COMMENT: Includes a source file.
/html MAN:
  <p>Includes a source file by placing its contents immediately after
  {@link include}.</p>

  <h4>Examples</h4>
  <pre class="code">

  "myscript.itp"                {@link include}; <span class="c-cmt"># Include file relative to working directory or current script</span>
  "\$UASR_HOME/common/utils.itp" {@link include}; <span class="c-cmt"># Include using environment varible UASR_HOME</span>
  "\$1"                          {@link include}; <span class="c-cmt"># Include using command line argument of current script</span>
  </pre>

  <h4>Remarks</h4>
  <ul>
    <li>The same file cannot be included more than once in a dLabPro
      session (this prevents from infinite recursions).</li>
    <li>{@link include} should <em>not</em> be used within functions or loops.</li>
  </ul>

  param filename Path of file to be included. May be absolute or relative to the
                 current script
  @see -load
END_MAN

METHOD:  -swap
SYNTAX:  ()
COMMENT: Exchanges the two top stack elements.
/html MAN:
  <p>Leaves values unchanged. Works for all types. Does not modify command handlers.</p>
  <h4>Example</h4>
  <pre class="code">

  3 7 {@link -swap} "\n3 now on top of stack!" {@link -echo}
  </pre>
#  @see -dup
#  @see -rot
END_MAN

METHOD:  -dup
SYNTAX:  ()
COMMENT: Duplicates the top stack element.
/html MAN:
  <p>Leaves values unchanged. Works for all types. Does not modify command handlers.</p>
  <h4>Example</h4>
  <pre class="code">

  "cha" {@link -dup} {@link -dup} + + " is a dance!" + {@link -echo}
  </pre>
  @see -swap
  @see -rot
END_MAN

METHOD:  -rot
SYNTAX:  ()
COMMENT: Rotates the stack upwards one element.
/html MAN:
  <p>The top element becomes the new bottom, all others are shifted up once. 
  Leaves values unchanged. Works for all types. Does not modify command handlers.</p>
  <h4>Example</h4>
  <pre class="code">

  1 3 7 {@link -rot} + - "\n3 now on top of stack!" {@link -echo}
  </pre>
  @see -dup
  @see -swap
END_MAN

METHOD:  if
SYNTAX:  (boolean bCondition)
COMMENT: Conditional jump (positive control path).
/html MAN:
  <p>The following example checks if the script was called with at least 2 command line
  arguments.</p>
  <pre class="code">

  \$\$ 2 < {@link if}
    "\nThis script needs at least 2 commmand line arguments." {@link -echo};
    {@link quit};
  {@link end}
  </pre>
  @param bCondition Jump condition. The value does not neccessarily have to be
                    Boolean (for type cast rules see C++ method {@link StackLogic}).
  @see else
  @see end
END_MAN

METHOD:  else
SYNTAX:  ()
COMMENT: Conditional jump (negative control path).
/html MAN:
  <p>The following example tries to load a DNorm 3 file and copies it, if successfull,
  into another file.</p>
  <pre class="code">

  <a href="data.html" class="code">data</a> x;
  "\$1" x {@link -restore} {@link ?error} {@link if}
    {@link quit};
  else
    "\$2" x {@link -save};
  end
  </pre>
  @see if
  @see end
END_MAN

METHOD:  end
OBSOLETE: endif
SYNTAX:  ()
COMMENT: Conditional jump or while loop (end of control paths).
CODE:
  // Nothing to be done
END_CODE
/html MAN:
  <p>The following example lists the files in the current working directory using platform
  dependent OS commands.</p>
  <pre class="code">

  <a href="var.html" class="code">var</a> sCmdLsFiles;
  "WIN32" {@link ?platform} {@link if}
    "cmd /c dir /a:-d /b" sCmdLsFiles <a href="var.html#mth_-sset" class="code">-sset</a>;
  {@link else}
    "find . -type f -maxdepth 1 -name" sCmdLsFiles <a href="var.html#mth_-sset" class="code">-sset</a>;
  {@link end}
  sCmdLsFiles {@link -system};
  </pre>
  @see if
  @see else
  @see while
END_MAN

METHOD:  while
SYNTAX:  (boolean bCondition)
COMMENT: Loop
/html MAN:
  <p>The following example shows a simple loop.</p>
  <pre class="code">

    0 <a href="var.html" class="code">var</a> i;
    0 10 < {@link while}
      <span class="c-cmt"># Do something...</span>
      i <a href="var.html#mth_++=">++=</a>;
    {@link end}
  </pre>
  <p>The loop body is executed if the preceeding condition is <code>TRUE</code> (or non-null).
  At {@link end}, the program pointer is moved to the last semicolon before
  {@link while} or, if none, to the beginning of the function. You can put more
  than the loop condition between the last semicolon and {@link while}:</p>
  <pre class="code">

    <a href="var.html" class="code">var</a> i;
    -1 i =; {@link (} i <a href="var.html#mth_++=">++=</a> {@link )} {@link (} 0 10 < {@link )} {@link while}
      <span class="c-cmt"># Do something...</span>
    {@link end}
  </pre>
  <p>which makes kind of a for-loop. Please note, that <code>i <a
  href="var.html#mth_++=">++=</a></code> will also be executed <em>before</em>
  the entire loop. This means if the loop shall start with <code>i</code>=0, you
  must initialize <code>i</code> with -1. A slightly more ledgible version of 
  last example is obtained using the mathematic formula notation:</p>
  <pre class="code">

    <a href="var.html" class="code">var</a> i;
    i=-1; :i++: :i<10: {@link while}
      <span class="c-cmt"># Do something...</span>
    {@link end}
  </pre>
  <p>The colons and semicolons must be used exactly as shown above.</p>
  @see end
  @see break
  @see continue
END_MAN

METHOD:  break
SYNTAX:  ()
COMMENT: Break while loop
/html MAN:
  <p>Breaks a {@link while} loop.</p>
  <h4>Example</h4>
  <pre class="code">

    "" <a href="var.html" class="code">var</a> s;
    s not {@link while}
      <span class="c-cmt"># Do this and that...</span>
      {@link (} "Once again? (yes/no)" {@link -prompt} {@link )} s =;
      "no" s == {@link if} {@link break}; {@link end}
    {@link end}
  </pre>
  @see while
  @see continue
  @see end
END_MAN

METHOD:  continue
SYNTAX:  ()
COMMENT: Continue while loop
/html MAN:
  <p>Continues a {@link while} loop.</p>
  <h4>Example</h4>
  <pre class="code">

    <a href="file.html" class="code">file</a> iF;
    <span class="c-cmt"># Attach a file list...</span>
    iF <a href="file.html#mth_-next" class="code">-next</a> {@link while}
      iF.<a href="file.html#fld_sfile_fq" class="code">sfile_fq</a> x {@link -restore} not {@link if} {@link continue}; {@link end}
      <span class="c-cmt"># Do something with the file...</span>
    {@link end}
  </pre>
  @see while
  @see break
  @see end
END_MAN

METHOD:  label
SYNTAX:  ()
POSTSYN: <labelname>
COMMENT: == Preprocessor directive ==; defines a jump label.
CODE:
  // This is no actual method!
  // It is only been defined for documentation.
END_CODE
/html MAN:
  <p>The following example illustrates the usage of unconditional jumps:</p>
  <pre class="code">
  
  {@link goto} L_SKIP;    <span class="c-cmt">Unconditional jump to label L_SKIP</span>
  ...
  {@link label} L_SKIP;   <span class="c-cmt">Definition of jump label L_SKIP</span>
  </pre>
  <p>By convention jump label identifiers should be all upper case and start with
  <code>L_</code>.</p>
  @param labelname Identifier of jump label (must be unique within one function).
  @see goto
END_MAN

METHOD:  goto
SYNTAX:  ()
POSTSYN: <labelname>
COMMENT: Unconditional jump to a jump label.
/html MAN:
  <p>The following example illustrates the usage of unconditional jumps to
  implement a loop:</p>
  <pre class="code">
  
  10 <a href="var.html" class="code">var</a> i;                 <span class="c-cmt"># Create and initialize loop counter</span>
  {@link label} L_LOOP;             <span class="c-cmt"># Define loop jump label</span>
  i 0 >= {@link if}                 <span class="c-cmt"># Loop head condition</span>
    "\ni=" {@link -echo}; i {@link -echo};  <span class="c-cmt">#   Print loop counter</span>
    i <a href="var.html#mth_--=" class="code">--=</a>;                  <span class="c-cmt">#   Decrement loop counter</span>
    {@link goto} L_LOOP;            <span class="c-cmt">#   Jump to loop head</span>
  {@link end}                     <span class="c-cmt"># End of loop</span>
  </pre>
  @param labelname Identifier of label to jump to.
  @see label
END_MAN

METHOD:  leave
SYNTAX:  ()
COMMENT: Leaves the function.
/html MAN:
  <p>The method immediately leaves the currently executed function and continues
  with the calling function. If there is no calling function, the dLabPro session
  will enter the interactive mode (i.e. display a command prompt and wait for
  user input).</p>
  <h4>Example</h4>
  <pre class="code">

  <a href="#" class="code">function</code> -test(x)
  {@link {}
    x not {@link if} {@link leave} {@link end};  <span class="c-cmt"># Leave if x is 0., NULL or ""</span>
    <span class="c-cmt"># ...</span>
  }
  </pre>
  @see return
  @see quit
END_MAN

METHOD:  return
SYNTAX:  "<value>"
COMMENT: Leaves the function returning a value.
/html MAN:
  <p>The method immediately leaves the currently executed function, returns <code>value</code>
  to the calling function and continues with the calling function. If there is no calling
  function, the dLabPro session will enter the interactive mode (i.e. display a command prompt
  and wait for user input).</p>
  <h4>Example</h4>
  <pre class="code">

  <a href="#" class="code">function</a> -import(idDst,sFilename)
  {@link {}
    idDst "data" {@link ?instance} not {@link if}
      -1 {@link return};
    {@link end}
    sFilename "ascii" idDst <a href="file.html" class="code">stdfile</a> <a href="file.html#mth_-import" class="code">-import</a>
    {@link ?error} {@link if}
      -2 {@link return};
    {@link end}
    0 {@link return};
  }
  </pre>
  @see leave
  @see quit
END_MAN

METHOD:  brk
SYNTAX:  (string sId)
COMMENT: Break point.
/html MAN:
  <p>Interrupts the function execution and enters the interactive mode (i.e. display a command
  prompt and wait for user input).</p>
  <pre class="code">

  nDebug 0 > {@link if}
    "my break point" {@link break};
  {@link end}
  </pre>
  dLabPro displays the position and identifier of a break point:</p>
  <pre class="code">

  (dlabpro_debug.itp:11) BREAK POINT 'my break point'
  dLabPro>_
  </pre> 
  <p>The function may be continued using {@link cont} or {@link step}. Use {@link -list}<code>;</code> (inculding the
  semicolon!!) to get more information about the break point.</p>

  @param sId Break point identifier
  @cgen:option /stop Force stopping at this break point in {@link /nonstop} mode
  @see cont
  @see step
END_MAN

METHOD:  cont
SYNTAX:  ()
COMMENT: Resume after break point.
/html MAN:
  <p>This method resumes executing a function after a break point.</p>
  <p>In case of multiple subsequent break points you may just press the return key instead of entering "cont" again. If
  you only want to execute the next instruction use {@link step} insterad of <code>cont</code>.</p>

  @cgen:option /nonstop Do not stop at break points anymore
  @see brk
  @see step
END_MAN

METHOD:  step
SYNTAX:  ()
COMMENT: Execute one instruction after a break point.
/html MAN:
  <p>This method executes one instruction after a break point. Then the program will be interrupted again
  displaying the current position, e.g.:</p>
  <pre class="code">

  (dlabpro_debug.itp:5) > sMsg -echo-[;]-
  dlabpro>_ 

</pre>
  <p>The last executed token is highlighted by <code>-[ ]-</code>.</p>
  <p>The program may be continued using {@link cont} or {@link step}. Instead of entering "step" again you may just
  press the return key. Use {@link -list}<code>;</code> (inculding the semicolon!!) to get more information.</p>

  @see brk
  @see cont
  @see -list
END_MAN

METHOD:  quit
SYNTAX:  ()
COMMENT: Exits dLabPro session.
/html MAN:
  <p>This method terminates the dLabPro session immediately.
  If there is a number of the Stack, it is used as exit code of dLabPro.</p>
  @see leave
  @see return
END_MAN

## Methods - CDlpObject
METHOD:   -get
OBSOLETE: get
CNAME:    OnGet
SYNTAX:   "<instance iInst>"                                                    # Custom RPN (undoc'ed CGen feature)
POSTSYN:  <field_id>
COMMENT:  Reads a field of an instance.
/html MAN:
  <p>This method may be used to read fields of instances.</p>
  <h4>Example</h4>
  <pre class="code">

  <a href="data.html" class="code">data</a> x;
  42 x {@link -set} <a href="data.html#fld_descr0" class="code">descr0</a>;
  "x.descr0=" {@link -echo}; x {@link -get} <a href="data.html#fld_descr0" class="code">descr0</a> {@link -echo};
  </pre>
  <p>The <code>-get</code> method behaves like the member operator <code>.</code>
  which means you can write <code>x.descr0</code> instead of <code>x -get
  descr0</code> in the example above.</p>
  @see -set
  @see -reset
  @see -see
END_MAN

METHOD:   -set
OBSOLETE: set
CNAME:    OnSet
SYNTAX:   "<value> <instance iInst>"                                            # Custom RPN (undoc'ed CGen feature)
POSTSYN:  <field_id>
COMMENT:  Writes a field of an instance.
/html MAN:
  <p>This method may be used to write fields of instances.</p>
  <h4>Example</h4>
  <pre class="code">

  <a href="data.html" class="code">data</a> x;
  42 x {@link -set} <a href="data.html#fld_descr0" class="code">descr0</a>;
  "x.descr0=" {@link -echo}; x {@link -get} <a href="data.html#fld_descr0" class="code">descr0</a> {@link -echo};
  </pre>
  <h4>Notes</h4>
  <ul>
    <li>{@link -set} may be used to write instance fields:
      <pre class="code">

  <a href="fst.html" class="code">fst</a>  f;
  <a href="data.html" class="code">data</a> idMyUd;
  idMyUd f {@link -set} <a href="fst.html#fld_ud" class="code">ud</a>;
      </pre>
      In case of instance fields {@link -set} stores <em>a reference</em> to an instance. It
      does <em>not</em> copy the instance. That means if you modify or destroy <code>idMyUd</code>
      in the above example you also modify or destroy <code>f.ud</code>. If this behaviour is not
      desired you may use {@link -internalize} to destroy the copy outside the instance or
      -preferably - use {@link -copy} instead of {@link -set}:
      <pre class="code">

  idMyUd f.ud {@link -copy};
      </pre>
    </li>
  </ul>
  @see -get
  @see -reset
  @see -internalize
  @see -see
END_MAN

METHOD:   -see
OBSOLETE: see
CNAME:    OnSee
SYNTAX:   "<instance iInst>"                                                    # Custom RPN (undoc'ed CGen feature)
POSTSYN:  <field_id>|*
COMMENT:  Prints field(s) of an instance.
/html MAN:
  <p>This method may be used to view the value of one or several fields of
  the active instance.</p>
  <h4>Example</h4>
  <pre class="code">

  <a href="fst.html" class="code">fst</a> f;           <span class="c-cmt"># Create a finite state transducer instance</span>
  f {@link -see} <a href="fst.html#fld_wceil" class="code">wceil</a>;    <span class="c-cmt"># Show value of field f.wceil</span>
  f {@link -see} *;        <span class="c-cmt"># List values of all fields of f</span>
  </pre>
  @see -get
  @see -set
  @see -reset
END_MAN

METHOD:   -reset
OBSOLETE: reset
COMMENT:  Resets (fields of) an instance.
CNAME:    OnReset
SYNTAX:   "<instance iInst>"                                                    # Custom RPN (undoc'ed CGen feature)
POSTSYN:  [<field_id>|*]
/html MAN:
  <p>This method may be used to reset an instance or one or all of its
  fields. There are three variants of <code>-reset</code>:</p>
  <ol>
    <li>Reset one field to default value<br><pre class="code">

  x -reset &lt;field_id&gt;;
    </pre><br>&nbsp;</li>
    <li>Reset all fields to default values<br><pre class="code">

  x -reset *;
    </pre><br>&nbsp;</li>
    <li>Reset entire instance<br><pre class="code">

  x -reset;
    </pre></li>
  </ol>
  <p>where <code>x</code> stands for an arbitrary instance.</p>
  @see -get
  @see -set
  @see -see
END_MAN

METHOD:   -internalize
OBSOLETE: internalize
CNAME:    OnInternalize
COMMENT:  Makes instance field(s) internal.
SYNTAX:   "<instance iInst>"                                                    # Custom RPN (undoc'ed CGen feature)
POSTSYN:  <field_id>|*
/html MAN:
  <p>Replaces references to instance fields by copies of the respective
  (external) instances. An instance field may be only a reference to another
  instance as result of the {@link -set} method.</p>
  <h4>Notes</h4>
  <ul>
    <li>The method removes the external instance if no other instance or
    <a href="var.html">variable</a> holds another reference.</li>
    <li>Preferably you should use {@link -copy} instead of
    {@link -set}/{@link -internalize} (see description of {@link -set}).</li>
  </ul>
  @see -set
  @see -copy
END_MAN

METHOD:   -copy
COMMENT:  Copies an instance. 
CNAME:    OnCopy
SYNTAX:   "<instance iSrc> <instance iDst>"                                     # Custom RPN (undoc'ed CGen feature)
/html MAN:
  <p>Copies a source instance to an assignable destination instance. This generic
  method works for all classes of <code>iSrc</code> and <code>iDst</code>.</p>
  <h4>Example</h4>
  <pre class="code">

  <a href="data.html" class="code">data</a> idTokens;       <span class="c-cmt"># Create a data table</span>
  tsq idTokens {@link -copy};  <span class="c-cmt"># Copy token sequence of current function</span>
  </pre>
  @see -save
  @see -restore
END_MAN

METHOD:   -save
COMMENT:  Saves an instance to a file.
CNAME:    OnSave
SYNTAX:   "<string filename> <instance iInst>"                                  # Custom RPN (undoc'ed CGen feature)
/html MAN:
  <p>Saves an instance (including all nested instances) to a file. This generic
  method works for all classes of <code>iInst</code>. The standard file format is
  set through __DEFAULT_FILEFORMAT_DN3/_XML. Using the {@link /xml} or {@link /dn3} option you
  may write an XML or and DN3 file. The zip compression level is defaultly set to 6
  for performance reasons. You may rezip the file with a higher compression level if
  you want smaller files. {@link -restore} can read all compression levels.</p>
  @cgen:option /xml
  @cgen:option /dn3
  @cgen:option /zip
  @see -restore
  @see -copy
END_MAN

METHOD:   -restore
COMMENT:  Restores an instance from a file.
CNAME:    OnRestore
SYNTAX:   "<string filename> <instance iInst>"                                  # Custom RPN (undoc'ed CGen feature)
/html MAN:
  <p>Restores an instance (including all nested instances) from a file. This generic
  method works for all classes of <code>iInst</code>. Using the {@link /xml} or
  {@link /dn3} option you may read an XML or DN3 file. If none or both formats are
  given, the file contents is checked to be xml or dn3.</p>
  @cgen:option /xml
  @cgen:option /dn3
  @cgen:option /zip
  @see -save
  @see -copy
END_MAN

METHOD:   -destroy
CNAME:    OnDestroy
COMMENT:  Destroys an instance
SYNTAX:   "<instance iInst>"                                                    # Custom RPN (undoc'ed CGen feature)
/html MAN:
  <p>This method destroys an instance.</p>
  <h4>Example</h4>
  <pre class="code">

  <a href="svm.html" class="code">svm</a> iMachine;       <span class="c-cmt"># Easy come ...</span>
  ...
  iMachine {@link -destroy};  <span class="c-cmt"># ... easy go</span>
  </pre>
END_MAN

## Methods - Help & info
METHOD:   -help
OBSOLETE: help
CNAME:    OnHelp
COMMENT:  Prints help table of an instance.
SYNTAX:   "<instance iInst>"                                                    # Custom RPN (undoc'ed CGen feature)

METHOD:   -explain
OBSOLETE: explain
CNAME:    OnExplain
COMMENT:  Prints detailled description of an instance or identifier.
SYNTAX:   " "                                                                   # Custom RPN (undoc'ed CGen feature)
POSTSYN:  [<identifier>]
/html MAN:
  <p>Prints detailled help on classes, instances, methods, fields and options.</p>
  <h4>Example</h4>
  <pre class="code">

  {@link -explain};
  {@link -explain} -explain;
  </pre>
  @param identifier Identifier of class, instance, method, field or option.
END_MAN

METHOD:   -check
SYNTAX:   ()
COMMENT:  Self check of session.

METHOD:   -status
SYNTAX:   ()
COMMENT:  Prints status information of the function.
/html MAN:
  <p>The method prints the following status information:</p>
  <ul>
    <li>function identifier,</li>
    <li>the source file (if applicable),</li>
    <li>list of formal and actual arguments (if applicable),</li>
    <li>a stack dump and</li>
    <li>the list of active instances.</li>
  </ul>
  <p>Further information are displayed by the {@link -list} method.</p>
  <h4>Notes</h4>
  <ul>
    <li>As several classes implement a <code>-status</code> method you should deactivate
    all other instances using the {@link this} method before calling {@link -status}:
    <pre class="code">

  {@link this} {@link -status};
    </pre></li>
    <li>If you want to display the status of another than the currently executed function
    you must disarm this function to prevent it from being executed (instead of just to
    display its status):
    <pre class="code">

  {@link /disarm} f {@link -status};
    </pre></li>
  </ul>
  @see -explain
  @see -help
  @see -list
  @see this
END_MAN

METHOD:   -version
SYNTAX:   cstring()
COMMENT:  Returns the dLabPro build identifier.
CODE:
  return dlp_get_version_info();
END_CODE

METHOD:   -pid
SYNTAX:   int()
COMMENT:  Returns the process ID.
CODE:
  return dlp_getpid();
END_CODE

METHOD:   -list
CNAME:    OnList
COMMENT:  Lists operation, token sequence, labes, etc.
SYNTAX:   ()
POSTSYN:  [aggrops|classes|help|labels|memory|scalops|strops|tokens|types]
/html MAN:
  <p>This method may be used to print the following information:<br>&nbsp;
  <table class="indent">
    <tr><th>List identifier</th><th>Description</th></tr>
    <tr><td><code>aggrops</code></td><td>List of aggregation operation codes</td></tr>
    <tr><td><code>classes</code></td><td>List of installed dLabPro classes</td></tr>
    <tr><td><code>const  </code></td><td>List of constants</td></tr>
    <tr><td><code>labels </code></td><td>List of the function's jump labels</td></tr>
    <tr><td><code>matrops</code></td><td>List of matrix operation codes</td></tr>
    <tr><td><code>memory </code></td><td>List of allocated memory objects</td></tr>
    <tr><td><code>scalops</code></td><td>List of scalar operation codes</td></tr>
    <tr><td><code>stack  </code></td><td>Dump the function's operand stack</td></tr>
    <tr><td><code>strops </code></td><td>List of string operation codes</td></tr>
    <tr><td><code>tokens </code></td><td>The function's token sequence</td></tr>
    <tr><td><code>trace  </code></td><td>Dump the function's call stack</td></tr>
    <tr><td><code>types  </code></td><td>List of dLabPro type names</td></tr>
  </table></p>
  @see -explain
  @see -help
  @see -see
  @see -status
END_MAN

METHOD:   ?error
CNAME:    OnGetError
SYNTAX:   ()
COMMENT:  Check error state.
CODE:
  // This is no actual method!
  // It's only been defined for documentation.
END_CODE
/html MAN:
  <p>Determines if the most recent method call caused an error. You may use the {@link /noerror} option
  to suppress error messages.</p>
  <h4>Example</h4>
  <pre class="code">
  
  <a href="data.html" class="code">data</a> x;
  "nonexistingfile.dn3" x {@link /noerror} {@link -restore}; {@link ?error} {@link if}
    "\nDoes not matter... :)" {@link -echo};
  {@link end}
  </pre>
  @return If there was an error the method returns <code>TRUE</code> otherwise it returns
          <code>FALSE</code>.
  @see /noerror
END_MAN

METHOD:   ?platform
CNAME:    Platform
COMMENT:  Tests if dLabPro is running on specified platform.
SYNTAX:   BOOL(string sPlatformId)
/html MAN:
  <p>This method may be used to implement platform dependent behaviour.</p>
  <h4>Example</h4>
  <pre class="code">

  "~" <a href="var.html" class="code">var</a> sHomeDir;             <span class="c-cmt"># This is the Unix style user home directory</span>
  "WIN32" {@link ?platform} {@link if}          <span class="c-cmt"># But if running on Windows ... &gt;&gt;</span>
    "\$USERPROFILE" sHomeDir <a href="var.html#mth_=" class="code">=</a>;  <span class="c-cmt">#   ... it is stored in the environment variable USERPROFILE</span>
  {@link end}                         <span class="c-cmt"># &lt;&lt;</span>
  sHomeDir {@link -cd};                 <span class="c-cmt"># Change to user home directory</span>
  </pre>
  @param  sPlatformID Platform identifier, one of the following strings:
                      <table style="margin-top:6pt;">
                        <tr><th><code>sPlatformId</code></th><th>Description</th></tr>
                        <tr><td>"LINUX"</td><td>PC with Linux</td></tr>
                        <tr><td>"SPARC"</td><td>Sun WS with Sparc</td></tr>
                        <tr><td>"WIN32"</td><td>PC with Windows</td></tr>
                      </table>
  @return The method returns <code>TRUE</code> if the current dLabPro session runs on the
          specified platform, otherwise it return <code>FALSE</code>.
END_MAN

METHOD:   ?instance
OBSOLETE: -is_instance
CNAME:    IsInstance
COMMENT:  Check instance existence and class.
SYNTAX:   BOOL(string sInstanceId, string sClassId)
/html MAN:
  <p>The method tests if an instance named <code>sInstanceIs</code> exists and
  if the instance is assignable to a specified class. An instance is assignable
  to a class if and only if it is of this class or of a derived class. The
  parameter <code>sInstanceId</code> does not necessarily have to be a string.
  It may also be an instance (variable). See C++ method {@link StackString} for
  type cast rules.</p>
  <h4>Example</h4>
  <pre class="code">

  "x" NULL {@link ?instance} {@link if}
    "\nYes, an instance named \"x\" exists." {@link -echo};
  {@link end}
  </pre>
  @param sInstanceId Identifier of instance to be checked.
  @param sClassId    Identifier of class. The method checks if the instance
                     is assignable to this class. May be <code>NULL</code>
                     or empty meaning any class is acceptable.
  @return <code>TRUE</code> if the instance exists and is assignable to the
          specified class, <code>FALSE</code> otherwise.
END_MAN

METHOD:   -type
OBSOLETE: type
CNAME:    OnType
COMMENT:  Select elementary data type.
SYNTAX:   ()
POSTSYN:  <typename>
/html MAN:
  <p>Even though dLabPro itself works with only one (double precision floating point) numeric 
  data type there are some dLabPro classes (e.g. <a href="data.html" class="code">data</a>)
  which allow more specific numeric types. These types are identified by numeric codes. This
  method allows a more readable type definition through type names.</p>
  @param typename An elementary type name as listed below
 <pre class="code">
  <span class="c-key">     </span>           or
  <span class="c-key">-type</span> bool      <span class="c-key">-type</span> BOOL        <span class="c-cmt"># boolean</span>
  <span class="c-key">-type</span> char      <span class="c-key">     </span>             <span class="c-cmt"># signed character</span>
  <span class="c-key">     </span>           <span class="c-key">-type</span> UINT8       <span class="c-cmt"># unsigned character</span>
  <span class="c-key">-type</span> short     <span class="c-key">-type</span> INT16       <span class="c-cmt"># signed short</span>
  <span class="c-key">     </span>           <span class="c-key">-type</span> UINT16      <span class="c-cmt"># unsigned short</span>
  <span class="c-key">-type</span> int       <span class="c-key">-type</span> INT32       <span class="c-cmt"># signed int</span>
  <span class="c-key">     </span>           <span class="c-key">-type</span> UINT32      <span class="c-cmt"># unsigned int</span>
  <span class="c-key">-type</span> long      <span class="c-key">-type</span> INT64       <span class="c-cmt"># signed long</span>
  <span class="c-key">     </span>           <span class="c-key">-type</span> UINT64      <span class="c-cmt"># unsigned long</span>
  <span class="c-key">-type</span> float     <span class="c-key">-type</span> FLOAT32     <span class="c-cmt"># float</span>
  <span class="c-key">-type</span> double    <span class="c-key">-type</span> FLOAT64     <span class="c-cmt"># double</span>
  <span class="c-key">-type</span> complex   <span class="c-key">-type</span> COMPLEX64   <span class="c-cmt"># complex (64bit)</span>
  <span class="c-key">-type</span> char[n]   <span class="c-key">-type</span> n           <span class="c-cmt"># string of length n (1 &le; n &le; 256)</span>
  </pre>
  @return The numeric type code for <code>typename</code>.
END_MAN

METHOD:  -trace_error
COMMENT: Stops dLabPro when the specified error occurs
SYNTAX:  (string lpsError)
CODE:
  CDlpObject_SetTraceError(lpsError);
END_CODE
/html MAN:
  
  <h4>Example</h4>
  <p>The following script</p>
  <pre class="code">

  "function1007" {@this} -trace_error;
  {@link if}                                 <span class="c-cmt"># Lone if causes stack underflow error</span> 
  {@link end}
  </pre>
  <p>produces this output</p>
  <pre class="code">
  myscript.itp(3): error function1007: Stack underflow.

&nbsp;&nbsp;&nbsp;******* ASSERTION FAILURE *******************************

    dLabPro - Assertion Failure:

    > Expression: FALSE
    > Location  : dlpo_stat.c(785)

&nbsp;&nbsp;&nbsp;*********************************************************
    (A)bort/(D)ebug/(I)gnore? [dLabPro Kernel]:
  </pre>
  <p>At this point you may attach a debugger to dLabPro and trace the error.</p>
  <p><b>Note:</b> Error tracing is only possible with debug executables of dLabPro. In release executables
  <code>-trace_error</code> is ineffective.</p>

  @param lpsError dLabPro error code in the format "&lt;classname&gt;&lt;errornumber&gt;", e.g. "function1007"
END_MAN

METHOD:  -stacktrace
SYNTAX:  (data idTrace)
COMMENT: Dumps the stack trace to a data table.

## Methods - Miscellaneous
METHOD:   -argv
COMMENT:  Gets a command line argument.
SYNTAX:   string(int nArg)
/html MAN:
  Remark: The number of command line arguments may be obtained by
  <code>\$\$</code>.
END_MAN

METHOD:   -echo
COMMENT:  Prints a message.
SYNTAX:   (string sMessage)
/html MAN:
  <p>Prints <code>sMessage</code> at stdout.</p>
  <h4>Example</h4>
  <pre class="code">

  "Hello world!" {@link -echo};
  </pre>
  @param sMessage Message to be printed.
  @cgen:option /stderr Writes message to standard error stream (rather than to 
  standard output)
END_MAN

METHOD:   -prompt
SYNTAX:   (string sMessage)
COMMENT:  Prompt for user input.
/html MAN:
  <p>Prints <code>sMessage</code> at stdout and prompts for user input from
  stdin.</p>
  <h4>Example</h4>
  <pre class="code">

  "Please enter your name" {@link -prompt} 
  "Hi " {@link -swap} + "!" + {@link -echo};
  </pre>
  @param sMessage Message to be printed.
END_MAN

METHOD:   this
OBSOLETE: -root
COMMENT:  Implicit identifier of the current function.
SYNTAX:   ()
/html MAN:
  <p>The method clears the fields {@link ai} and {@link ai2}. Thus following member identifiers are
  interpreted as members of the current (or "this") function.</p>
  <h4>Remarks</h4>
  <p>From the RPN syntax of dLabPro follows that method and field identifiers are treated
  as members of the instance whose identifier was most recently interpreted. For convenience, dLabPro
  remembers the most recently interpreted instance name as the "active instance" and allows to invoke
  further methods of that instance without repeating the instance name. Thus the active instance may
  in some cases "shadow" indentifiers of the current function. In these cases you may use {@link this}
  to have dLabPro "forget" the active instance.</p>
  <h4>Example</h4>
  <pre class="code">
  
  <a href="gauss.html" class="code">Gauss</a> iGmm;    <span class="c-cmt"># Create a Gaussian model</span>
  iGmm <a href="gauss.html#mth_-status" class="code">-status</a>;  <span class="c-cmt"># Print its status</span>
  <a href="gauss.html#mth_-status" class="code">-status</a>;       <span class="c-cmt"># Same as previous line as iGmm is still "active"</span>
  {@link this} {@link -status};  <span class="c-cmt"># Now printint status of current function</span>
  </pre>
  @see ai
  @see ai2
END_MAN

METHOD:   parent
OBSOLETE: up
SYNTAX:   ()
COMMENT:  Implicit identifier of parent instance.
/html MAN:
  <p>Typically to be used in the interactive mode to switch to the parent instance
  of the currently active instance.</p>
  <h4>Example</h4>
  <pre class="code">

  <a href="fst.html" class="code">fst</a> f;   <span class="c-cmt"># Create a finite state machine</span>
  f.<a href="fst.html#fld_td" class="code">td</a>;    <span class="c-cmt"># Active its transition table</span>
  {@link parent};  <span class="c-cmt"># Switch to parent instance of f.td (which is f)</span>
  </pre>
END_MAN

METHOD:  -cd
COMMENT: Change directory.
SYNTAX:  (string sDir)
/html MAN:
  <p>This method changes the current working directory of the dLabPro session.</p>
  @param sDir Relative or absolute directory path name.
END_MAN

METHOD:  -cwd
COMMENT: Get the current working directory.
SYNTAX:  cstring()
/html MAN:
  Gets the current working directory.
  @return The current working directory.
END_MAN

METHOD:  -system
SYNTAX:  int(string sCmd)
COMMENT: Executes a shell command.
/html MAN:
  <p>Executes the shell command <code>sCommand</code> and blocks until the command has been
  completed.</p>
  <h4>Example</h4>
  <pre class="code">

  "notepad.exe mytextfile.txt" {@link -system};
  </pre>
  @param sCmd The command line.
  @return The return code of the shell command.
END_MAN

## dLabPro interface code snippets
INITCODE:
  INIT;
  m_nInStyle |= IS_GLOBAL;
  ArgParse();
  if (!GetRootFnc()) SetRootFnc(this);
  LoadClassRegistry(GetRootFnc()==this);
  
  INT16 i = 0;
  while(dlp_scalop_entry(i)->opc >= 0) {
    REGISTER_OPERATOR(dlp_scalop_entry(i)->sym,NULL,dlp_scalop_entry(i)->opc,dlp_scalop_entry(i)->res,dlp_scalop_entry(i)->ops,dlp_scalop_entry(i)->sig,dlp_scalop_entry(i)->nam);
    i++;
  }
  
END_CODE

DONECODE:
  ArgDestroy();
  StackDestroy();
  DONE;
END_CODE

CLASSCODE:
  CLASSPROC;
  const SMic* lpMic = CDlpObject_MicGet(this);
  m_iCaller = lpMic ? lpMic->iCaller : NULL;
  if (CData_GetNRecs(m_idTsq)>0)
    if (OK(ArgCommit()))
      Exec();
END_CODE

RESETCODE:
  RESET;
  IFIELD_RESET(CData,"tsq");
  IFIELD_RESET(CData,"sfl");
  if (GetRootFnc()==this) IFIELD_RESET(CDgen,"par");
  CDgen::TsqInit(m_idTsq);
  CDgen::TsqInit(m_idTeq);
  if (GetRootFnc()==this) m__iPar->Setup("dlp");
END_CODE

RESTORECODE:
  CData* idArg = NULL;
  if (GetRootFnc()==this)
  {
    ICREATE(CData,idArg,NULL);
    CData_Copy(idArg,m_idArg);
  }
  RESTORE;
  if (GetRootFnc()==this)
  {
    CData_Copy(m_idArg,idArg);
    IDESTROY(idArg);
    m__iPar->Setup("dlp");
  }
  CDgen::TsqInit(m_idTeq);
END_CODE

SAVECODE:
  SAVE;
END_CODE

NOTE:    -save and -restore for functions
COMMENT: Usage and limitations of file (de)serialization for functions and programs.
/html MAN:
  <p>Functions may be saved and restored like this:</p>
  <pre class="code">

  "filename.dlp" {@link this} [{@link /zip}] {@link -save};
  </pre>
  <p>and</p>
  <pre class="code">

  "filename.dlp" {@link this} [{@link /zip}] {@link -restore};
  </pre>
  <p>This is an experimental feature and there are many limitations.</p>

  <h4>What it can do</h4>
  <ul>
    <li>Save/restore a program in the main code (root function),</li>
    <li>save/restore all instances in the root function, including nested functions
      even if they were defined in included scripts (i.e. you can save and restore the complete
      program),</li>
    <li>continue a saved program after <code>function</code> {@link -restore} (this actually
      happens automatically).</li>
  </ul>

  <h4>What it <em>cannot</em> do</h4>
  <ul>
    <li>Save/restore a program in another than the root function (because
      this would require saving/restoring instance variables which is not supperted),</li>
    <li>restore a program within an instruction (as the stack will not be restored),</li>
    <li>restore the command line arguments of the root function (they will be replaced by the command
      line arguments of the current dLabPro session),</li> 
    <li>save/restore using {@link /xml} (due to limitations of the current XML stream class),</li>
    <li>restore programs which use <a href="data.html" class="code">data</a> instances which
      have componentes but <em>no</em> records (as this is not supported by the current DN3 stream
      implementation; the empty instances will deserialize but without any components).</li>
  </ul>
END_MAN

## Load manual, generate and quit
#"function_man.def" load
-cgen
quit

## EOF
