## dLabPro class CFvrtools (fvrtools)
## - Definition script
##
## AUTHOR : Matthias Wolff, Werner Meyer
## PACKAGE: dLabPro/classes
## 
## Copyright 2013-2015 dLabPro contributors and others (see COPYRIGHT file) 
## - Chair of System Theory and Speech Technology, TU Dresden
## - Chair of Communications Engineering, BTU Cottbus
## 
## This file is part of dLabPro.
## 
## dLabPro is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
## 
## dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
## 
## You should have received a copy of the GNU Lesser General Public License
## along with dLabPro. If not, see <http://www.gnu.org/licenses/>.

PLATFORM: GNUC++
COMPILER: gcc
AR:       ar

PROJECT:  fvrtools
COMMENT:  FST-based feature-value relation processing tools
AUTHOR:   Matthias Wolff, Werner Meyer
VERSION:  1.0.0

CLASS:    fvrtools
FLAGS:    /singleton /noautoactivate
/cProject                                                                       # Generate ANSI C compatible code
/cxx_nconv                                                                      # Use strict C++ naming conventions
/html MAN:
  <p>Weighted feature-value relations (wFVRs)<a href="#WW14">[WW14]</a> are a means of representing and processing the 
  meaning of signals. This experimental class handles wFVRs through an FST approximation in the form of trees. Ultimately,
  wFVR processing is to be realized by weighted Petri net transducers.</p>

  <h4>Example</h4>
  <p>Consider the phrase "ein Meter zwanzig" (<i>"one meter twenty"</i>). The meaning represented as a FVR string <a 
  href="#WW14">[WW14]</a> is: <pre>    FVR[
      LDIM:0.61[
        val:1[
          DIG:1[
            o:1[
              (ein)1:1
      ] ] ] ][
        val:NaN[
          komma:NaN
      ] ][
        unit:0.7[
          (m)m:0.7
      ] ][
        val:0.36[
          CN2:0.36[
            t:0.36[
              (zwan)2(-zig):0.36
    ] ] ] ] ]</pre>
  where the weights were assigned by ASR. The graphical representation of this meaning&mdash;with the weights 
  dropped&mdash;would be</p>
  <p class="indent"><img src="../resources/fvrtools/fvrexmpl.png"></p>

  <h3>References</h3>
  <table>
    <tr><td class="hidden"><a name="WW14"></a>[WW14]</td><td class="hidden"><a target="_blank"
      href="https://www.researchgate.net/profile/Matthias_Wolff3/publication/277309488_Semantische_Dekodierung_von_Sprachsignalen_am_Beispiel_einer_Mikrofonfeldsteuerung/links/556ac3af08aeab7772212d74.pdf"
      >G. Wirsching, M. Wolff: Semantische Dekodierung von Sprachsignalen am Beispiel einer Mikrofonfeldsteuerung. 
      In proc. 25. Konferenz Elektronische Sprachsignalverarbeitung 2014 (ESSV 2014), At Dresden, Volume: 71, 
      pages 104-109</a></td>
  </table>
END_MAN

## -- Files and locations --

FILE:    fvrt_iam.c
FILE:    fvrt_compile.c
FILE:    fvrt_fsg.c

INCLUDE: "dlp_data.h"
INCLUDE: "dlp_fst.h"

## -- Defines --

DEFINE: FVRT_EXCEPTION(ERR,A,B,C) { IERROR(_this,ERR,A,B,C); nRet=ERR; goto L_EXCEPTION; }
DEFINE: FVRT_STIS(FST,TIS) (const char*)CData_XAddr(AS(CData,FST->is),TIS,0)

## -- Errors --

ERROR:   FVRT_SEQSYNTAX
COMMENT: FVR string or sequence syntax error (%s)
/html MAN:
  <p>An FVR string or sequence contained a syntax error. Details are given in 
  parentheses.</p>
END_MAN

ERROR:   FVRT_NOTFVR
COMMENT: '%s' is not a feature-value relation
/html MAN:
  <p>The object is not a feature-value relation.</p>
END_MAN

ERROR:   FVRT_EXTRATIS
COMMENT: Ignored extra input symbol '%s' at transition %ld
LEVEL:   EL_WARNING
/html MAN:
  <p>An FST string or sequence contained more than one input symbol for a FVR 
  transition. For example, the instruction</p>
  <pre class="code">
  "FVR[A[B]EXTRA[C]]" itFvr fvrtools <a href="#mth_-from_string">-from_string</a>;</pre>
  <p>will produce this warning for the symbol "EXTRA".</p> 
END_MAN

ERROR:   FVRT_NOTIS
COMMENT: No input symbol at transition %ld
LEVEL:   EL_WARNING
/html MAN:
  <p>An FST string or sequence contained no input symbol for a FVR transition. 
  For example, the instruction</p>
  <pre class="code">
  "FVR[[B][C]]" itFvr fvrtools <a href="#mth_-from_string">-from_string</a>;</pre>
  <p>will produce this warning.</p> 
END_MAN

## -- Options --

OPTION:  /nofvrcheck
COMMENT: Do not check for enclosing <code>'FVR[...]'</code>.

OPTION:  /keepexpectation
COMMENT: Keep only expectation on double value entry by function union.

OPTION:  /keepboth	
COMMENT: Keep both (expectation and input) on double value entry by function union.

OPTION:  /keepnothing
COMMENT: Keep nothing on double value entry by function union.

## -- Methods --

METHOD:  -is_fvr
SYNTAX:  BOOL (int nU, INSTANCE(fst) itFvr)
COMMENT: Determines if the argument is an FVR
/html MAN:
  <p>An <a href="fst.html" class="code">fst</a> is a feature-value relation iff</p>
  <ol>
    <li>it is not empty <em>and</em></li>
    <li>it is a tree <em>and</em></li>
    <li>the only transition starting a the root state is labelled "FVR".</li>
  </ol>

  @param nU    The unit of <code>itFvr</code> to test.
  @param itFvr The <a href="fst.html" class="code">fst</a> to test.
  @return <code>TRUE</code> if the unit is a FVR, <code>FALSE</code> otherwise.
  @cgen:option /nofvrcheck Do not check for enclosing "FVR[...]".
END_MAN

METHOD:  -is_complete
SYNTAX:  BOOL (int nU, INSTANCE(fst) itFvr)
COMMENT: Check itFvr is complete. All values are given.
/html MAN:
  This function is searched for finite state in <code>itFvr</code> and checked there is only one more value. 
  @param nU    The unit of <code>itFvr</code> to test.
  @param itFvr The <a href="fst.html" class="code">fst</a> to check.
  @return <code>TRUE</code> if the unit is complete and on every finite state is a value given, <code>FALSE</code> otherwise.
END_MAN

METHOD:  -from_string
SYNTAX:  (string src, INSTANCE(fst) itFvr)
COMMENT: Creates a (weighted) FVR from a string representation
/html MAN:
  <p>The eBNF syntax of wFVR strings is <a href="#WW14">[WW14]</a>:<pre>
    FVR      = "FVR" state
    state    = "[" states statedef states "]"
    states   = [ [ states ] state ]
    statedef = comments label comments [ ":" weight ] comments
    comments = [ [ comments ] comment ]
    comment  = "(" &lt;alpha&gt; ")"
    label    = &lt;alpha&gt;
    weight   = &lt;numeric&gt; | "NaN"</pre>
  where <tt>&lt;alpha&gt;</tt> denotes an arbitrary string without white spaces and special characters and 
  <tt>&lt;numeric&gt;</tt> denotes a floating point number in the English locale.</p>
  <p>If the FVR string contains comments, the method will store the space-separated string of comments in 
  <code>itFvr.<a class="code" href="fst.html#fld_ud">ud</a>.<a class="code" 
  href="data.html#fld_rtext">rtext</a></code>.</p>

  @param src The source string.
  @param itFvr The target FST, must not be <code>NULL</code>.
  @cgen:option /nofvrcheck Do not check for enclosing "FVR[...]".
  @return void
END_MAN

METHOD:  -from_fst
SYNTAX:  (INSTANCE(fst) itSeq, INSTANCE(fst) itFvr)
COMMENT: Creates a (weighted) FVR from an FST containing a single path.
/html MAN:
  The FVR structure is built from the output symbol sequence of the only path in
  <code>itSeq</code>. See documentation of method <a class="code" 
  href="#mth_-from_string">-from_string</a> for the format specification of FVR
  strings. 
  <p>If the FVR string as FST contains comments, the method will store the space-separated string of comments in 
  <code>itFvr.<a class="code" href="fst.html#fld_ud">ud</a>.<a class="code" 
  href="data.html#fld_rtext">rtext</a></code>.</p>
  @param itSeg The source FST, must contain exactly one path.
  @param itFvr The target FST, must not be <code>NULL</code>.
  @return void
  @cgen:option /nofvrcheck Do not check for enclosing "FVR[...]".
  @see -from_string
END_MAN

METHOD:  -synthesize
SYNTAX:  (INSTANCE(fst) itDst, INSTANCE(fst) itFvr)
COMMENT: Creates a FST list of all possible combinations of branches of a FVR
/html MAN:
  <p>The collocation of branches be effected with observance that branches with same names are stay in the same order of itFvr.</p>
  @param itDst FST to be filled with the serializations.
  @param itFvr The feature-value relation to synthesize from.
  @return
END_MAN

METHOD:  -fsg_normalize
SYNTAX:  (INSTANCE(fst) itFsgSrc, INSTANCE(fst) itFsgDst)
COMMENT: ...

METHOD:  -fsg_fvr_check
SYNTAX:  BOOL (INSTANCE(fst) itFsg, INSTANCE(fst) itErr)
COMMENT: Check square bracket parity in the output language of a FVR grammar.
/html MAN:
  <p>Checks if the parity of opening and closing square brackes <code>'['</code>/<code>']'</code>
  in an FVR finite state grammar is correct in all each consecutive paths. A grammar is
  considered an FVR grammar, iff its <a href="fst.html#fld_os">output symbol table</a> contains
  at least the symbols "FVR", "[", and "]".</p>
  
  <p>Note: you must <a href="#mth_-fsg_normalize">normalize</a> the grammar before invoking this method!</p>

  @param itFsg Finite state grammer to check.
  @param itErr If the return value is <code>FALSE</code>: Filled with the beginning of
               the first path violating the bracket parity up to the erroneous transition,
               can be <code>NULL</code> or identical with <code>itFgs</code>.
  @return <code>TRUE</code> if the bracket parity is ok or if the <code>itFsg</code> is 
  <em>not</em> an FVR grammar, <code>FALSE</code> in all other cases. 
  @see -fsg_normalize
END_MAN

METHOD:  -union
SYNTAX:  BOOL (INSTANCE(fst) itDst, INSTANCE(fst) itFvr)
COMMENT: Combinates two FVRs
/html MAN:
  Union of two FVRs. Different values on same position in both instance will be delete.
  TODO: Another option for different values. (Take both, take last, take first,...)
  @param itDst First FVR and Output.
  @param itFvr Second FVR.
  @return
  @cgen:option /keepexpectation On double value entry keep only expectation.
  @cgen:option /keepboth On double value entry keep both (expectation and input).
  @cgen:option /keepnothing On double value entry keep nothing.
END_MAN

METHOD:  -adjust
SYNTAX:  BOOL (INSTANCE(fst) itWom, INSTANCE(fst) itInp, INSTANCE(fst) itQry)
COMMENT: Adjust a FVR with a given model of FVR and update both.
/html MAN:
  Compare a input FVR <code>itInp</code> with a given world model FVR <code>itWom</code>. 
  The <code>itWom</code> shouldn't contain values. Values of <code>itInp</code> added to <code>itWom</code>, while the same path exist. 
  Added paths are delete from <code>itInp</code>.
  While the path in <code>itInp</code> not exist or is incomplete, it would be added from <code>itWom</code> without a value.
  @param itWom Worldmodel.
  @param itInp Input/Given FVR.
  @return <code>TRUE</code> if input FVR <code>itInp</code> compatible with world model FVR <code>itWom</code>, <code>FALSE</code> in a case of edit or missing value in <code>itInp</code>.
END_MAN

METHOD:  -compare_with_model
SYNTAX:  double (INSTANCE(fst) itWom, INSTANCE(fst) itInp)
COMMENT: Compare two FVRs each other.
/html MAN:
  One input FVR are checked with a schema FVR. The return value behind the decimal point is a relative number of congruence features of the input with the schema.
  The number in front of the decimal point indicate the congruence of values which are already given in the schema. A schema with a correlated value with the input FVR has a higher priority as a schema without correlated values.
  The schema sign the point who should be a value of the input FVR with a finite state on the last feature.
  Is a value given in the world model FVR, then it must be the same value given in the input FVR otherwise the return value is 0.
  @param itWom World Model FVR.
  @param itInp FVR input. 
END_MAN

METHOD:  -hash
SYNTAX:  string (int nU, INSTANCE(fst) itFvr)
COMMENT: Hashvalue for an FVR.
/html MAN:
TODO
END_MAN

-cgen
quit

## EOF
