// dLabPro class CFunction (function)
// - Header file
//
// AUTHOR : Matthias Wolff
// PACKAGE: dLabPro/classes
//
// This file was generated by dcg. DO NOT MODIFY! Modify function.def instead.
// 
// Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
// - Chair of System Theory and Speech Technology, TU Dresden
// - Chair of Communications Engineering, BTU Cottbus
// 
// This file is part of dLabPro.
// 
// dLabPro is free software: you can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License as published by the Free
// Software Foundation, either version 3 of the License, or (at your option)
// any later version.
// 
// dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
// details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with dLabPro. If not, see <http://www.gnu.org/licenses/>.


//{{CGEN_INCLUDE
#include "dlp_config.h"
#include "dlp_object.h"
#include "dlp_dgen.h"
//}}CGEN_END

//{{CGEN_ERRORS
#undef FNC_INTERNAL        
#undef FNC_SYNTAX          
#undef FNC_EXPECT          
#undef FNC_NOTALLOWED      
#undef FNC_STACKOVERFLOW   
#undef FNC_STACKOVERFLOW_WARNING
#undef FNC_STACKUNDERFLOW  
#undef FNC_TYPECAST        
#undef FNC_LABEL           
#undef FNC_NOMORETOKENS    
#undef FNC_UNDEF           
#undef FNC_DBL             
#undef FNC_INVALID         
#undef FNC_CANTEXEC        
#undef FNC_UNEXOEF         
#undef FNC_EXTRACHARS      
#undef FNC_NOSET           
#undef FNC_DESTROY         
#undef FNC_MISSING         
#undef FNC_STDIN           
#undef FNC_IGNORE          
#undef FNC_TOOLONG         
#undef FNC_LISTINI         
#undef FNC_ASGNONNULL      
#undef FNC_COMPAT          
#define FNC_INTERNAL         -1001
#define FNC_SYNTAX           -1002
#define FNC_EXPECT           -1003
#define FNC_NOTALLOWED       -1004
#define FNC_STACKOVERFLOW    -1005
#define FNC_STACKOVERFLOW_WARNING -1006
#define FNC_STACKUNDERFLOW   -1007
#define FNC_TYPECAST         -1008
#define FNC_LABEL            -1009
#define FNC_NOMORETOKENS     -1010
#define FNC_UNDEF            -1011
#define FNC_DBL              -1012
#define FNC_INVALID          -1013
#define FNC_CANTEXEC         -1014
#define FNC_UNEXOEF          -1015
#define FNC_EXTRACHARS       -1016
#define FNC_NOSET            -1017
#define FNC_DESTROY          -1018
#define FNC_MISSING          -1019
#define FNC_STDIN            -1020
#define FNC_IGNORE           -1021
#define FNC_TOOLONG          -1022
#define FNC_LISTINI          -1023
#define FNC_ASGNONNULL       -1024
#define FNC_COMPAT           -1025
//}}CGEN_END

// C/C++ language abstraction layer
#undef function_par
#define function_par CFunction

// dLabPro/C++ language abstraction layer
#undef function
#define function CFunction

//{{CGEN_DEFINE
#define FNC_MSG(LV,MSG,A,B,C,D,E) if (m_nCheck>=LV) Msg(MSG,A,B,C,D,E)
#define FNC_DELEGATE   if (!(m_nXm & XM_EXEC))   {     CFunction* iParent = (CFunction*)OfKind("function",GetParent());     if (!iParent) return NOT_EXEC;     if (iParent->m_nCheck>=2)     {       char lpsPrtId[255];       Msg(     "  - DELEGATE --> %s",CDlpObject_GetFQName(iParent,lpsPrtId,0),0,0);     }   }   if (!(m_nXm & XM_EXEC)) return ((CFunction*)OfKind("function",GetParent()))->
#define XM_EXEC       0x0001
#define XM_BREAK      0x0002
#define XM_QUIT       0x0004
#define XM_STEP       0x0008
#define XM_NOLOGO     0x0010
#define XM_PIPEMODE   0x0020
#define XM_AUTOBREAK  0x0040
#define XM_INLINE     0x0080
#define XM_IN_IDE     0x0100
#define XM_NOPROMPT   0x0200
#define XM_ARCHIVE    0x0400
#define FNC_ALIC_ID   0
#define FNC_ALIC_TYPE 1
#define FNC_ALIC_PTR  2
#define TT_DATA       "=d"
#define TT_VAR        "=v"
#define TT_NUM        "=n"
#define TT_WORD       "=w"
#define TT_FUNC       "=f"
#define TT_OBR        "=("
#define TT_CBR        "=)"
#define TT_ASEP       "=,"
#define TT_OPR        "=*"
//}}CGEN_DEFINE

#ifndef __FUNCTION_H
#define __FUNCTION_H

//{{CGEN_HEADERCODE
//}}CGEN_HEADERCODE

// Class CFunction

class CFunction : public CDlpObject 
{

typedef CDlpObject inherited;
typedef CFunction thisclass;

//{{CGEN_FRIENDS
//}}CGEN_FRIENDS
public:
	CFunction(const char* lpInstanceName, BOOL bCallVirtual = 1);
	virtual ~CFunction();

// Virtual and static function overrides
public:
	virtual INT16 AutoRegisterWords();
	virtual INT16 Init(BOOL bCallVirtual = 0);
	virtual INT16 Reset(BOOL bResetMembers = 1);
	virtual INT16 Serialize(CDN3Stream* lpDest);
	virtual INT16 SerializeXml(CXmlStream* lpDest);
	virtual INT16 Deserialize(CDN3Stream* lpSrc);
	virtual INT16 DeserializeXml(CXmlStream* lpSrc);
	virtual INT16 Copy(CDlpObject* iSrc);
	virtual INT16 ClassProc();
	static  INT16 InstallProc(void* lpItp);
	static  CFunction* CreateInstance(const char* lpName);
	static  INT16 GetClassInfo(SWord* lpClassWord);
	virtual INT16 GetInstanceInfo(SWord* lpClassWord);
	virtual BOOL  IsKindOf(const char* lpClassName);
	virtual INT16 ResetAllOptions(BOOL bInit = 0);

// Primary method invocation functions            
// DO NOT CALL THESE FUNCTIONS FROM C SCOPE.      
// THEY MAY INTERFERE WITH THE INTERPRETER SESSION
#ifndef __NOITP
public:
//{{CGEN_PMIC
	INT16 OnArgv();
	INT16 OnCd();
	INT16 OnCwd();
	INT16 OnEcho();
	INT16 OnLoad();
	INT16 OnPid();
	INT16 OnPrompt();
	INT16 OnSystem();
	INT16 OnTraceError();
	INT16 OnVersion();
	INT16 OnIsInstance();
	INT16 OnPlatform();
	INT16 OnBrk();
	INT16 OnIf();
	INT16 OnInclude();
	INT16 OnWhile();
//}}CGEN_PMIC
#endif // #ifndef __NOITP

// Secondary method invocation functions
public:
//{{CGEN_SMIC
	INT16 BraceOn();
	INT16 BraceOff();
	INT32 Pid();
	INT16 TraceError(char* lpsError);
	const char* Version();
	INT16 OnGetError();
	INT16 End();
	INT16 Label();
//}}CGEN_SMIC

// Option changed callback functions
public:
//{{CGEN_OCCF
	INT16 OnDisarmSet();
	INT16 OnInlineSet();
	INT16 OnNonstopSet();
	INT16 OnStopSet();
//}}CGEN_OCCF

// Field changed callback functions
public:
//{{CGEN_FCCF
//}}CGEN_FCCF

// Scanned member functions
//{{CGEN_EXPORT

// Taken from 'fnc_arg.cpp'
	private: INT16 ArgInit();
	private: void ArgClear();
	private: void ArgDestroy();
	public: INT16 ArgCmdline(INT32 argc, char** argv);
	protected: INT16 ArgCommit();
	private: BOOL ArgCheckInstanceRef(CDlpObject* iInst, CFunction* iCaller);
	protected: INT16 ArgReturnVal();
	private: INT16 ArgParse();

// Taken from 'fnc_aux.cpp'
	protected: static void SetRootFnc(CFunction* iFnc);
	public: static CFunction* GetRootFnc();
	protected: CDgen* GetDlpParser();
	protected: void PrintCode(INT16 nEnv, const char* sPrefix = NULL);
	protected: void PrintInfo(const char* lpTitle);
	public: INT16 Status();
	public: INT16 PrintStackTrace();
	public: INT16 Explain(const char* lpsIdentifier);
	public: INT16 List(const char* lpsWhat);
	protected: void Msg(const char* lpsMsg,  ...);
	public: INT16 IsValidInstanceName(CDlpObject* iCont, const char* lpsToken);
	protected: CFunction* GetCaller();
	protected: CDlpObject* GetActiveInstance();
	protected: CDlpObject* Instantiate(const char* lpsClassName, const char* lpsInstanceName);
	protected: INT16 Deinstanciate(CDlpObject* iInst, INT16 nMode);
	private: static BOOL DerefInstance(CDlpObject* iCont, CDlpObject* iInst, BOOL bDescent, INT16 nVerbose = 0);
	public: INT16 Check();
	protected: SWord* FindWordAi(const char* lpsIdentifier);

// Taken from 'fnc_ctl.cpp'
	public: INT16 Exec();
	private: INT16 StartExec();
	private: INT16 StopExec();
	protected: INT16 JumpLabel(const char* lpsLabel);
	protected: INT16 JumpConditional(BOOL bCondition);
	protected: INT16 JumpEnd();
	protected: INT16 JumpWhile();
	protected: INT16 Swap();
	protected: INT16 Dup();
	protected: INT16 Rot();
	protected: INT16 If(BOOL bCondition);
	protected: INT16 Else();
	protected: INT16 While(BOOL bCondition);
	protected: INT16 Break();
	protected: INT16 Continue();
	protected: INT16 Goto();
	protected: INT16 Leave();
	protected: INT16 Return();
	public: INT16 Brk(const char* sId);
	public: INT16 Cont();
	public: INT16 Step();
	protected: virtual INT16 Quit();

// Taken from 'fnc_def.cpp'
	protected: static void TsqStrip(CData* idTsq);
	protected: INT32 AddSrcFile(const char* lpsFilename);
	public: char* GetSrcFile(INT32 nTok, CData* idTsq = NULL);
	protected: INT16 IncludeEx(const char* lpsFilename, INT32 nPos, CDgen* iParser = NULL, const char* lpsParserType = "dlp");
	public: INT16 Load(const char* lpsFilename);
	public: INT16 Define();

// Taken from 'fnc_fml.cpp'
	protected: INT16 Formula2RPN(const char* lpsIn, char* lpsOut, INT16 nMaxLength);
	protected: INT16 FormulaTagSyntax(CData* idTsq);
	protected: INT16 FormulaTranslate(CData* idTsq, char* lpsOut, INT16 nMaxLength);

// Taken from 'fnc_iam.cpp'
	public: INT16 OnGet();
	public: INT16 OnSet();
	public: INT16 OnSee();
	public: INT16 OnReset();
	public: INT16 OnInternalize();
	protected: INT16 OnCopy();
	protected: INT16 OnSave();
	protected: INT16 OnRestore();
	protected: INT16 OnDestroy();
	public: INT16 OnHelp();
	protected: INT16 OnList();
	public: INT16 OnExplain();
	protected: INT16 OnType();
	public: virtual INT16 Include(const char* lpsFilename);
	protected: const char* Argv(INT32 nArg);
	public: INT16 Echo(const char* lpsMessage);
	public: INT16 Prompt(const char* lpsMessage);
	protected: INT16 Parent();
	protected: INT16 This();
	public: INT16 Cd(const char* lpsDir);
	public: const char* Cwd();
	public: INT32 System(const char* lpsCmd);
	public: BOOL Platform(const char* lpsPlatformId);
	public: BOOL IsInstance(const char* sInstanceId, const char* sClassId);

// Taken from 'fnc_itp.cpp'
	protected: INT16 ItpAsFormula(const char* lpsToken);
	private: INT16 ItpAsDirective(const char* lpsToken);
	private: INT16 ItpAsWord(const char* lpsToken);
	protected: INT16 ItpAsNumber(const char* lpsToken);
	protected: INT16 ItpAsList(const char* lpsToken);
	protected: INT16 ItpAsOpAssign(const char* lpsToken);
	protected: INT16 OpEqual(SWord* lpWord);
	protected: INT16 OpLogic(SWord* lpWord);
	protected: INT16 OpStrsc(SWord* lpWord);
	protected: INT16 OpMatrx(SWord* lpWord);
	protected: INT16 OpSignal(SWord* lpWord);
	protected: INT16 OpVerifySignature(const char* lpsSig, INT16 nOps);
	protected: INT16 ItpAsOperator(const char* lpsToken);
	protected: void ItpInstance(CDlpObject* iInst);

// Taken from 'fnc_pre.cpp'
	public: BOOL PreprocessToken(char* lpsTok, INT16 nLen, const char* lpsTt, CData* iArgs, const char* lpsInfile, INT32 nInline);

// Taken from 'fnc_stk.cpp'
	public: void PushLogic(BOOL bVal);
	public: void PushNumber(COMPLEX64 nVal);
	public: void PushString(const char* lpsVal);
	public: void PushInstance(CDlpObject* iVal);
	public: void PushBrake();
	public: BOOL StackLogic(INT16 nPos, INT16 nArg = 0);
	public: COMPLEX64 StackNumber(INT16 nPos, INT16 nArg = 0);
	public: CDlpObject* StackInstance(INT16 nPos, INT16 nArg = 0);
	public: char* StackString(INT16 nPos, INT16 nArg = 0);
	public: StkItm* PopAny(INT16 nArg, StkItm* lpSi);
	public: BOOL PopLogic(INT16 nArg = 0);
	public: COMPLEX64 PopNumber(INT16 nArg = 0);
	public: CDlpObject* PopInstance(INT16 nArg = 0);
	public: char* PopString(INT16 nArg = 0);
	public: void StackPrint();
	protected: void StackInit();
	protected: void StackClearInst();
	public: INT32 StackGetLength();
	protected: void StackClear(BOOL bDestroy = FALSE);
	protected: void StackClearBrake();
	protected: void StackDestroy();
	protected: void Push();
	public: StkItm* StackGet(INT16 nPos);
	public: void Pop(BOOL bClearBrake = FALSE);
	protected: void StackSwap();
	protected: void StackDup();
	protected: void StackRot();

// Taken from 'fnc_teq.cpp'
	protected: BOOL StepBreak();
	protected: BOOL Interrupt();
	public: INT32 PostCommand(const char* lpsCommand, const char* lpsIdel = NULL, INT32 nLine = -1, BOOL bHead = FALSE);
	protected: INT32 PostTokens(CData* idTsq, INT32 nLine = -1, BOOL bHead = FALSE);
	private: INT32 PostTokensInt(CData* idTsq, const char* lpsCommand, const char* lpsIdel, INT32 nLine = -1, BOOL bHead = FALSE);
	protected: INT16 SendCommand(const char* lpsCommand, char* lpsResult, INT32 nLength, INT32 nLine = -1);
	protected: INT16 SendTokens(CData* idTsq, char* lpsResult, INT32 nLength, INT32 nLine = -1);
	private: INT16 SendTokensInt(CData* idTsq, const char* lpsCommand, char* lpsResult, INT32 nLength, INT32 nLine = -1);
	protected: INT16 PumpToken(BOOL bPostSyn = FALSE);
	protected: INT16 ExecuteToken();
	public: const char* GetNextToken(BOOL bSameInstr = FALSE);
	public: const char* GetNextTokenDel();
	public: INT16 RefuseToken();
	protected: INT16 TokenProcessed();
	protected: void EmptyUserInput(char* lpsInput);
//}}CGEN_EXPORT

// Member variables
public:

//{{CGEN_FIELDS
	CDlpObject*      m_iAi;
	CDlpObject*      m_iAi2;
	BOOL             m_bAiUsed;
	data*            m_idArg;
	CDlpObject*      m_iCaller;
	char*            m_lpsLastFml;
	SMic             m_mic;
	CDgen*           m__iPar;
	INT32            m_nPp;
	data*            m_idSfl;
	StkItm*          m_aStack;
	CDlpObject**     m_lpasStackInst;
	INT16            m_nStackInstPos;
	INT16            m_nStackLen;
	char**           m_lpasStackStr;
	INT16            m_nStackStrPos;
	data*            m_idTeq;
	INT32            m_nTeqOffset;
	time_t           m_time;
	data*            m_idTsq;
	INT32            m_nXm;
//}}CGEN_FIELDS

//{{CGEN_OPTIONS
	BOOL m_bDisarm;
	BOOL m_bDn3;
	BOOL m_bInline;
	BOOL m_bNoerror;
	BOOL m_bNonstop;
	BOOL m_bStderr;
	BOOL m_bStop;
	BOOL m_bTime;
	BOOL m_bXml;
	BOOL m_bZip;
//}}CGEN_OPTIONS
}

;

// Scanned C (member) functions
//{{CGEN_CEXPORT

// Taken from 'fnc_arg.cpp'

// Taken from 'fnc_aux.cpp'

// Taken from 'fnc_ctl.cpp'

// Taken from 'fnc_def.cpp'

// Taken from 'fnc_fml.cpp'

// Taken from 'fnc_iam.cpp'

// Taken from 'fnc_itp.cpp'

// Taken from 'fnc_pre.cpp'

// Taken from 'fnc_stk.cpp'

// Taken from 'fnc_teq.cpp'
//}}CGEN_CEXPORT

#endif //#ifndef __FUNCTION_H


// EOF
