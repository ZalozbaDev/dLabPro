/* dLabPro class CFvrtools (fvrtools)
 * - Header file
 *
 * AUTHOR : Matthias Wolff, Werner Meyer
 * PACKAGE: dLabPro/classes
 *
 * This file was generated by dcg. DO NOT MODIFY! Modify fvrtools.def instead.
 * 
 * Copyright 2013 dLabPro contributors and others (see COPYRIGHT file) 
 * - Chair of System Theory and Speech Technology, TU Dresden
 * - Chair of Communications Engineering, BTU Cottbus
 * 
 * This file is part of dLabPro.
 * 
 * dLabPro is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 * 
 * dLabPro is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with dLabPro. If not, see <http://www.gnu.org/licenses/>.
 */

/*{{CGEN_INCLUDE */
#include "dlp_config.h"
#include "dlp_object.h"
#include "dlp_data.h"
#include "dlp_fst.h"
/*}}CGEN_END */

/*{{CGEN_ERRORS */
#undef FVRT_SEQSYNTAX      
#undef FVRT_EXTRATIS       
#undef FVRT_NOTIS          
#define FVRT_SEQSYNTAX       -1001
#define FVRT_EXTRATIS        -1002
#define FVRT_NOTIS           -1003
/*}}CGEN_END */

/* C/C++ language abstraction layer */
#undef fvrtools_par
#define fvrtools_par CFvrtools

/* dLabPro/C++ language abstraction layer */
#undef fvrtools
#define fvrtools CFvrtools

/*{{CGEN_DEFINE */
#define FVRT_EXCEPTION(ERR,A,B,C) { IERROR(_this,ERR,A,B,C); nRet=ERR; goto L_EXCEPTION; }
#define FVRT_STIS(FST,TIS) (const char*)CData_XAddr(AS(CData,FST->is),TIS,0)
/*}}CGEN_DEFINE */

#ifndef __FVRTOOLS_H
#define __FVRTOOLS_H

/*{{CGEN_HEADERCODE */
/*}}CGEN_HEADERCODE */

/* Class CFvrtools */

#ifdef __cplusplus

class CFvrtools : public CDlpObject 
{

typedef CDlpObject inherited;
typedef CFvrtools thisclass;

/*{{CGEN_FRIENDS */
/*}}CGEN_FRIENDS */
public:
	CFvrtools(const char* lpInstanceName, BOOL bCallVirtual = 1);
	virtual ~CFvrtools();

/* Virtual and static function overrides */
public:
	virtual INT16 AutoRegisterWords();
	virtual INT16 Init(BOOL bCallVirtual = 0);
	virtual INT16 Reset(BOOL bResetMembers = 1);
	virtual INT16 Serialize(CDN3Stream* lpDest);
	virtual INT16 SerializeXml(CXmlStream* lpDest);
	virtual INT16 Deserialize(CDN3Stream* lpSrc);
	virtual INT16 DeserializeXml(CXmlStream* lpSrc);
	virtual INT16 Copy(CDlpObject* iSrc);
	virtual INT16 ClassProc();
	static  INT16 InstallProc(void* lpItp);
	static  CFvrtools* CreateInstance(const char* lpName);
	static  INT16 GetClassInfo(SWord* lpClassWord);
	virtual INT16 GetInstanceInfo(SWord* lpClassWord);
	virtual BOOL  IsKindOf(const char* lpClassName);
	virtual INT16 ResetAllOptions(BOOL bInit = 0);

/* Primary method invocation functions             */
/* DO NOT CALL THESE FUNCTIONS FROM C SCOPE.       */
/* THEY MAY INTERFERE WITH THE INTERPRETER SESSION */
#ifndef __NOITP
public:
/*{{CGEN_PMIC */
	INT16 OnFromString();
	INT16 OnIsFvr();
/*}}CGEN_PMIC */
#endif /* #ifndef __NOITP */

/* Secondary method invocation functions */
public:
/*{{CGEN_SMIC */
/*}}CGEN_SMIC */

/* Option changed callback functions */
public:
/*{{CGEN_OCCF */
/*}}CGEN_OCCF */

/* Field changed callback functions */
public:
/*{{CGEN_FCCF */
/*}}CGEN_FCCF */

/* Scanned member functions */
/*{{CGEN_EXPORT */

/* Taken from 'fvrt_iam.c' */
	public: BOOL IsFvr(INT32 nU, CFst* itFvr);
	public: INT16 FromString(const char* lpsSrc, CFst* itFvr);

/* Taken from 'fvrt_compile.c' */
	protected: static FST_STYPE FindIs(const char* lpsStr, BOOL bAdd, CFst* itFst);
	protected: void AddToSeq(const char* lpsTok, INT32 nU, CFst* itSeq);
	protected: INT16 ParseSeq(CFst* itSeq, FST_ITYPE nIni, FST_ITYPE nPar, CFst* itFvr);
	protected: INT16 StrToSeq(const char* lpsSrc, CFst* itSeq);
	protected: INT16 SeqToFvr(CFst* itSeq, CFst* itFvr);
/*}}CGEN_EXPORT */

/* Member variables */
public:
/*{{CGEN_ICXX_FIELDS */
/*}}CGEN_ICXX_FIELDS */

#else  /* #ifdef __cplusplus */

typedef struct CFvrtools
{
  /* Pointer to C base instance */
  struct CDlpObject* m_lpBaseInstance;

/*{{CGEN_IC_FIELDS */
/*}}CGEN_IC_FIELDS */

#endif /* #ifdef __cplusplus */

/*{{CGEN_FIELDS */
/*}}CGEN_FIELDS */

/*{{CGEN_OPTIONS */
/*}}CGEN_OPTIONS */
}

#ifndef __cplusplus
CFvrtools
#endif
;

/* Class CFvrtools (C functions)*/

/* Virtual function overrides */
void  CFvrtools_Constructor(CFvrtools*, const char* lpInstanceName, BOOL bCallVirtual);
void  CFvrtools_Destructor(CDlpObject*);
INT16 CFvrtools_AutoRegisterWords(CDlpObject*);
INT16 CFvrtools_Reset(CDlpObject*, BOOL bResetMembers);
INT16 CFvrtools_Init(CDlpObject*, BOOL bCallVirtual);
INT16 CFvrtools_Serialize(CDlpObject*, CDN3Stream* lpDest);
INT16 CFvrtools_SerializeXml(CDlpObject*, CXmlStream* lpDest);
INT16 CFvrtools_Deserialize(CDlpObject*, CDN3Stream* lpSrc);
INT16 CFvrtools_DeserializeXml(CDlpObject*, CXmlStream* lpSrc);
INT16 CFvrtools_Copy(CDlpObject*, CDlpObject* __iSrc);
INT16 CFvrtools_ClassProc(CDlpObject*);
INT16 CFvrtools_InstallProc(void* lpItp);
CFvrtools* CFvrtools_CreateInstance(const char* lpName);
INT16 CFvrtools_GetClassInfo(SWord* lpClassWord);
INT16 CFvrtools_GetInstanceInfo(CDlpObject*, SWord* lpClassWord);
BOOL  CFvrtools_IsKindOf(CDlpObject*, const char* lpClassName);
INT16 CFvrtools_ResetAllOptions(CDlpObject*, BOOL bInit);

/* Primary method invocation functions             */
/* DO NOT CALL THESE FUNCTIONS FROM C SCOPE.       */
/* THEY MAY INTERFERE WITH THE INTERPRETER SESSION */
#ifndef __NOITP
/*{{CGEN_CPMIC */
INT16 CFvrtools_OnFromString(CDlpObject*);
INT16 CFvrtools_OnIsFvr(CDlpObject*);
/*}}CGEN_CPMIC */
#endif /* #ifndef __NOITP */

/* Secondary method invocation functions */
/*{{CGEN_CSMIC */
/*}}CGEN_CSMIC */

/* Option changed callback functions */
/*{{CGEN_COCCF */
/*}}CGEN_COCCF */

/* Field changed callback functions */
/*{{CGEN_CFCCF */
/*}}CGEN_CFCCF */

/* Scanned C (member) functions */
/*{{CGEN_CEXPORT */

/* Taken from 'fvrt_iam.c' */
BOOL CFvrtools_IsFvr(CFvrtools*, INT32 nU, CFst* itFvr);
INT16 CFvrtools_FromString(CFvrtools*, const char* lpsSrc, CFst* itFvr);

/* Taken from 'fvrt_compile.c' */
FST_STYPE CFvrtools_FindIs(const char* lpsStr, BOOL bAdd, CFst* itFst);
void CFvrtools_AddToSeq(CFvrtools*, const char* lpsTok, INT32 nU, CFst* itSeq);
INT16 CFvrtools_ParseSeq(CFvrtools*, CFst* itSeq, FST_ITYPE nIni, FST_ITYPE nPar, CFst* itFvr);
INT16 CFvrtools_StrToSeq(CFvrtools*, const char* lpsSrc, CFst* itSeq);
INT16 CFvrtools_SeqToFvr(CFvrtools*, CFst* itSeq, CFst* itFvr);
/*}}CGEN_CEXPORT */

#endif /*#ifndef __FVRTOOLS_H */


/* EOF */
